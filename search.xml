<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>flask框架(1-2)</title>
    <url>/2023/05/29/Flask/1/</url>
    <content><![CDATA[<h2 id="Flask简介"><a href="#Flask简介" class="headerlink" title="Flask简介"></a>Flask简介</h2><p>​		Flask是一个轻量级的可定制框架，使用Python语言编写，较其他同类型框架更为灵活、轻便、安全且容易上手。它可以很好地结合<a href="https://baike.baidu.com/item/MVC%E6%A8%A1%E5%BC%8F/713147?fromModule=lemma_inlink">MVC模式</a>进行开发，开发人员分工合作，小型团队在短时间内就可以完成功能丰富的中小型网站或<a href="https://baike.baidu.com/item/Web%E6%9C%8D%E5%8A%A1/2837593?fromModule=lemma_inlink">Web服务</a>的实现。另外，Flask还有很强的定制性，用户可以根据自己的需求来添加相应的功能，在保持核心功能简单的同时实现功能的丰富与扩展，其强大的插件库可以让用户实现个性化的网站定制，开发出功能强大的网站。</p>
<p>​		Flask是目前十分流行的web框架，采用Python编程语言来实现相关功能。它被称为微框架(microframework)，“微”并不是意味着把整个Web应用放入到一个Python文件，微框架中的“微”是指Flask旨在保持代码简洁且易于扩展，Flask框架的主要特征是核心构成比较简单，但具有很强的扩展性和兼容性，程序员可以使用Python语言快速实现一个网站或Web服务。一般情况下，它不会指定数据库和模板引擎等对象，用户可以根据需要自己选择各种数据库。Flask自身不会提供表单验证功能，在项目实施过程中可以自由配置，从而为应用程序开发提供数据库抽象层基础组件，支持进行表单数据合法性验证、文件上传处理、用户身份认证和数据库集成等功能。Flask主要包括Werkzeug和Jinja2两个核心函数库，它们分别负责业务处理和安全方面的功能，这些基础函数为web项目开发过程提供了丰富的基础组件。Werkzeug库十分强大，功能比较完善，支持URL路由请求集成，一次可以响应多个用户的访问请求；支持Cookie和会话管理，通过身份缓存数据建立长久连接关系，并提高用户访问速度；支持交互式Javascript调试，提高用户体验；可以处理HTTP基本事务，快速响应客户端推送过来的访问请求。Jinja2库支持自动HTML转义功能，能够很好控制外部黑客的脚本攻击。系统运行速度很快，页面加载过程会将源码进行编译形成Python字节码，从而实现模板的高效运行；模板继承机制可以对模板内容进行修改和维护，为不同需求的用户提供相应的模板。</p>
<h2 id="路由和请求响应对象"><a href="#路由和请求响应对象" class="headerlink" title="路由和请求响应对象"></a>路由和请求响应对象</h2><ul>
<li>装饰器其实就是将rule字符串跟视图函数进行了绑定，通过add_url_rule()实现的绑定。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/index&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;welcome everyone！&#x27;</span></span><br></pre></td></tr></table></figure>

<p>等效</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;welcome everyone！&#x27;</span></span><br><span class="line">app.add_url_rule(<span class="string">&#x27;/index&#x27;</span>, view_func=index)</span><br></pre></td></tr></table></figure>

<h3 id="路由变量规则"><a href="#路由变量规则" class="headerlink" title="路由变量规则"></a>路由变量规则</h3><p>string  （缺省值） 接受任何不包含斜杠的文本   *<br>int      接受正整数  *<br>float    接受正浮点数<br>path     类似 string ，但可以包含斜杠<br>uuid     接受 UUID 字符串</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/index/&lt;path:p&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_path</span>(<span class="params">p</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;******&gt;&#x27;</span>, <span class="built_in">type</span>(p))  <span class="comment"># str类型</span></span><br><span class="line">    <span class="built_in">print</span>(p)</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/test/&lt;uuid:uid&gt;&#x27;</span></span>)  </span><span class="comment"># 必须传递uuid的格式，uuid模块， uuid.uuid4() ----&gt;UUID类型</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">uid</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;#######&gt;&gt;&gt;&gt;&gt;&#x27;</span>, <span class="built_in">type</span>(uid))</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;获取唯一的标识码&#x27;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 所有的路由搜索规则都是自上而下搜索，在写路由的是有定义的路由是唯一的。</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/projects&#x27;</span></span>)  </span><span class="comment"># 请求路由中如果添加了/：http://127.0.0.1:5000/about/  显示Not Found</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">about</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;The about page&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/projects/&#x27;</span></span>)  </span><span class="comment"># 路由中定义&#x27;/&#x27;，无论请求的URL是否带有/，都可以执行视图函数。如果请求的是有/，浏览器做了一次重定向</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">projects</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;The project page&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h3><p>返回值：其实返回值返回的都是一个响应对象。</p>
<blockquote>
<p>视图函数的返回值：<br>response响应：<br>1.str     自动转成response对象<br>2.dict    json<br>3.response对象  response对象<br>4.make_response()  response对象<br>5.redirect()   重定向  302状态码<br>6.render_template()  模板渲染 + 模板</p>
</blockquote>
<p>response响应对象</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(response.content_type)</span><br><span class="line"><span class="built_in">print</span>(response.headers)</span><br><span class="line"><span class="built_in">print</span>(response.status_code)  <span class="comment"># 200</span></span><br><span class="line"><span class="built_in">print</span>(response.status)  <span class="comment"># 200 OK</span></span><br><span class="line">response.set_cookie(<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;wxy&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>request请求对象：只需要导入，通过from flask import request<br>导入之后可以获取对象的属性和方法<br>属性：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(request.headers)  <span class="comment"># request对象 对象访问属性，也可以调用方法</span></span><br><span class="line"><span class="built_in">print</span>(request.path)</span><br><span class="line"><span class="built_in">print</span>(request.full_path)</span><br><span class="line"><span class="built_in">print</span>(request.base_url)</span><br><span class="line"><span class="built_in">print</span>(request.url)</span><br></pre></td></tr></table></figure>

<h4 id="获取提交的数据"><a href="#获取提交的数据" class="headerlink" title="获取提交的数据"></a>获取提交的数据</h4><p>跟请求方法相关的</p>
<ul>
<li><p>get：<br>request.args 底层是字典的形式   主要获取get提交的请求参数<br>如果是get请求格式是这个样子的：&#x2F;register2?username&#x3D;zhangsan&amp;address&#x3D;Beijing<br>此时的username是form表单中表单元素的name值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(request.args.get(<span class="string">&#x27;username&#x27;</span>))   <span class="comment"># 获取值</span></span><br><span class="line"><span class="built_in">print</span>(request.args.get(<span class="string">&#x27;address&#x27;</span>))</span><br></pre></td></tr></table></figure>
</li>
<li><p>post:<br>request.form 底层是字典的形式   主要获取post提交的请求参数<br>注意post提交必须在路由中进行设置，通过methods &#x3D; [‘GET’,’POST’]<br>按照此种形式：<br>@app.route(‘&#x2F;register2’, methods&#x3D;[‘GET’, ‘POST’])<br>def register2():  # 获取页面提交的内容<br>…….  内容省略<br>获取数据：<br>print(request.form)  # 如果请求方法是post则需要通过request.form取值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(request.form.get(<span class="string">&#x27;username&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(request.form.get(<span class="string">&#x27;address&#x27;</span>))</span><br></pre></td></tr></table></figure></li>
</ul>
<p>定制响应头</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">response = make_response(content)  <span class="comment"># 返回值就是一个response对象</span></span><br><span class="line">   <span class="comment"># 定制响应头</span></span><br><span class="line">   response.headers[<span class="string">&#x27;mytest&#x27;</span>] = <span class="string">&#x27;123abc&#x27;</span></span><br><span class="line">   response.headers[<span class="string">&#x27;myhello&#x27;</span>] = <span class="string">&#x27;hellohello&#x27;</span></span><br><span class="line">   <span class="comment"># 将定制好的response返回</span></span><br><span class="line">   <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Flask</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>大二自学</tag>
      </tags>
  </entry>
  <entry>
    <title>方法与接口</title>
    <url>/2023/06/06/Go/10/</url>
    <content><![CDATA[<h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><h2 id="什么是方法"><a href="#什么是方法" class="headerlink" title="什么是方法"></a>什么是方法</h2><p>Go 语言中同时有函数和方法。一个方法就是一个包含了接受者的函数，接受者可以是命名类型或者结构体类型的一个值或者是一个指针。所有给定类型的方法属于该类型的方法集。</p>
<p>方法只是一个函数，它带有一个特殊的接收器类型，它是在func关键字和方法名之间编写的。接收器可以是struct类型或非struct类型。接收方可以在方法内部访问。</p>
<h2 id="方法的语法"><a href="#方法的语法" class="headerlink" title="方法的语法"></a>方法的语法</h2><p>定义方法的语法</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t Type)</span></span> methodName(parameter list)(<span class="keyword">return</span> list) &#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">funcName</span><span class="params">(parameter list)</span></span>(<span class="keyword">return</span> list)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>示例代码：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (  </span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Employee <span class="keyword">struct</span> &#123;  </span><br><span class="line">    name     <span class="type">string</span></span><br><span class="line">    salary   <span class="type">int</span></span><br><span class="line">    currency <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> displaySalary() method has Employee as the receiver type</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e Employee)</span></span> displaySalary() &#123;  </span><br><span class="line">    fmt.Printf(<span class="string">&quot;Salary of %s is %s%d&quot;</span>, e.name, e.currency, e.salary)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;  </span><br><span class="line">    emp1 := Employee &#123;</span><br><span class="line">        name:     <span class="string">&quot;Sam Adolf&quot;</span>,</span><br><span class="line">        salary:   <span class="number">5000</span>,</span><br><span class="line">        currency: <span class="string">&quot;$&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    emp1.displaySalary() <span class="comment">//Calling displaySalary() method of Employee type</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>可以定义相同的方法名</strong></p>
<p>示例代码：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;math&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Rectangle <span class="keyword">struct</span> &#123;</span><br><span class="line">	width, height <span class="type">float64</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> Circle <span class="keyword">struct</span> &#123;</span><br><span class="line">	radius <span class="type">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r Rectangle)</span></span> area() <span class="type">float64</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> r.width * r.height</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//该 method 属于 Circle 类型对象中的方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c Circle)</span></span> area() <span class="type">float64</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> c.radius * c.radius * math.Pi</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	r1 := Rectangle&#123;<span class="number">12</span>, <span class="number">2</span>&#125;</span><br><span class="line">	r2 := Rectangle&#123;<span class="number">9</span>, <span class="number">4</span>&#125;</span><br><span class="line">	c1 := Circle&#123;<span class="number">10</span>&#125;</span><br><span class="line">	c2 := Circle&#123;<span class="number">25</span>&#125;</span><br><span class="line">	fmt.Println(<span class="string">&quot;Area of r1 is: &quot;</span>, r1.area())</span><br><span class="line">	fmt.Println(<span class="string">&quot;Area of r2 is: &quot;</span>, r2.area())</span><br><span class="line">	fmt.Println(<span class="string">&quot;Area of c1 is: &quot;</span>, c1.area())</span><br><span class="line">	fmt.Println(<span class="string">&quot;Area of c2 is: &quot;</span>, c2.area())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Area of r1 is:  24</span><br><span class="line">Area of r2 is:  36</span><br><span class="line">Area of c1 is:  314.1592653589793</span><br><span class="line">Area of c2 is:  1963.4954084936207</span><br></pre></td></tr></table></figure>

<ul>
<li>虽然method的名字一模一样，但是如果接收者不一样，那么method就不一样</li>
<li>method里面可以访问接收者的字段</li>
<li>调用method通过.访问，就像struct里面访问字段一样</li>
</ul>
<h2 id="方法和函数"><a href="#方法和函数" class="headerlink" title="方法和函数"></a>方法和函数</h2><p>既然我们已经有了函数，为什么还要使用方法？</p>
<p>示例代码：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (  </span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Employee <span class="keyword">struct</span> &#123;  </span><br><span class="line">    name     <span class="type">string</span></span><br><span class="line">    salary   <span class="type">int</span></span><br><span class="line">    currency <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> displaySalary() method converted to function with Employee as parameter</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">displaySalary</span><span class="params">(e Employee)</span></span> &#123;  </span><br><span class="line">    fmt.Printf(<span class="string">&quot;Salary of %s is %s%d&quot;</span>, e.name, e.currency, e.salary)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;  </span><br><span class="line">    emp1 := Employee&#123;</span><br><span class="line">        name:     <span class="string">&quot;Sam Adolf&quot;</span>,</span><br><span class="line">        salary:   <span class="number">5000</span>,</span><br><span class="line">        currency: <span class="string">&quot;$&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    displaySalary(emp1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在上面的程序中，displaySalary方法被转换为一个函数，而Employee struct作为参数传递给它。这个程序也产生了相同的输出：Salary of Sam Adolf is $5000.。</p>
</blockquote>
<p>为什么我们可以用函数来写相同的程序呢?有以下几个原因</p>
<ol>
<li>Go不是一种纯粹面向对象的编程语言，它不支持类。因此，类型的方法是一种实现类似于类的行为的方法。</li>
<li>相同名称的方法可以在不同的类型上定义，而具有相同名称的函数是不允许的。假设我们有一个正方形和圆形的结构。可以在正方形和圆形上定义一个名为Area的方法。</li>
</ol>
<h2 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h2><p>作用域为已声明标识符所表示的常量、类型、变量、函数或包在源代码中的作用范围。</p>
<p>Go 语言中变量可以在三个地方声明：</p>
<ul>
<li>函数内定义的变量称为局部变量</li>
<li>函数外定义的变量称为全局变量</li>
<li>函数定义中的变量称为形式参数</li>
</ul>
<p><strong>局部变量</strong></p>
<p>在函数体内声明的变量称之为局部变量，它们的作用域只在函数体内，参数和返回值变量也是局部变量。</p>
<p><strong>全局变量</strong></p>
<p>在函数体外声明的变量称之为全局变量，首字母大写全局变量可以在整个包甚至外部包（被导出后）使用。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 声明全局变量 */</span></span><br><span class="line"><span class="keyword">var</span> g <span class="type">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* 声明局部变量 */</span></span><br><span class="line">   <span class="keyword">var</span> a, b <span class="type">int</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">/* 初始化参数 */</span></span><br><span class="line">   a = <span class="number">10</span></span><br><span class="line">   b = <span class="number">20</span></span><br><span class="line">   g = a + b</span><br><span class="line"></span><br><span class="line">   fmt.Printf(<span class="string">&quot;结果： a = %d, b = %d and g = %d\n&quot;</span>, a, b, g)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">结果： a = 10, b = 20 and g = 30</span><br></pre></td></tr></table></figure>

<p><strong>形式参数</strong></p>
<p>形式参数会作为函数的局部变量来使用</p>
<p><strong>指针作为接收者</strong></p>
<p>若不是以指针作为接收者，实际只是获取了一个copy，而不能真正改变接收者的中的数据</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Box)</span></span> SetColor(c Color) &#123;</span><br><span class="line">	b.color = c</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>示例代码</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Rectangle <span class="keyword">struct</span> &#123;</span><br><span class="line">	width, height <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Rectangle)</span></span> setVal() &#123;</span><br><span class="line">	r.height = <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	p := Rectangle&#123;<span class="number">1</span>, <span class="number">2</span>&#125;</span><br><span class="line">	s := p</span><br><span class="line">	p.setVal()</span><br><span class="line">	fmt.Println(p.height, s.height)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">20 2</span><br></pre></td></tr></table></figure>

<p>如果没有那个*，则值就是<code>2 2</code></p>
<h2 id="method继承"><a href="#method继承" class="headerlink" title="method继承"></a>method继承</h2><p>method是可以继承的，如果匿名字段实现了一个method，那么包含这个匿名字段的struct也能调用该method</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Human <span class="keyword">struct</span> &#123;</span><br><span class="line">	name  <span class="type">string</span></span><br><span class="line">	age   <span class="type">int</span></span><br><span class="line">	phone <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">	Human  <span class="comment">//匿名字段</span></span><br><span class="line">	school <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> Employee <span class="keyword">struct</span> &#123;</span><br><span class="line">	Human   <span class="comment">//匿名字段</span></span><br><span class="line">	company <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *Human)</span></span> SayHi() &#123;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;Hi, I am %s you can call me on %s\n&quot;</span>, h.name, h.phone)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	mark := Student&#123;Human&#123;<span class="string">&quot;Mark&quot;</span>, <span class="number">25</span>, <span class="string">&quot;222-222-YYYY&quot;</span>&#125;, <span class="string">&quot;MIT&quot;</span>&#125;</span><br><span class="line">	sam := Employee&#123;Human&#123;<span class="string">&quot;Sam&quot;</span>, <span class="number">45</span>, <span class="string">&quot;111-888-XXXX&quot;</span>&#125;, <span class="string">&quot;Golang Inc&quot;</span>&#125;</span><br><span class="line">	mark.SayHi()</span><br><span class="line">	sam.SayHi()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">Hi, I am Mark you can call me on <span class="number">222</span><span class="number">-222</span>-YYYY</span><br><span class="line">Hi, I am Sam you can call me on <span class="number">111</span><span class="number">-888</span>-XXXX</span><br></pre></td></tr></table></figure>

<h2 id="method重写"><a href="#method重写" class="headerlink" title="method重写"></a>method重写</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Human <span class="keyword">struct</span> &#123;</span><br><span class="line">	name  <span class="type">string</span></span><br><span class="line">	age   <span class="type">int</span></span><br><span class="line">	phone <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">	Human  <span class="comment">//匿名字段</span></span><br><span class="line">	school <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> Employee <span class="keyword">struct</span> &#123;</span><br><span class="line">	Human   <span class="comment">//匿名字段</span></span><br><span class="line">	company <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Human定义method</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *Human)</span></span> SayHi() &#123;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;Hi, I am %s you can call me on %s\n&quot;</span>, h.name, h.phone)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Employee的method重写Human的method</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *Employee)</span></span> SayHi() &#123;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;Hi, I am %s, I work at %s. Call me on %s\n&quot;</span>, e.name,</span><br><span class="line">		e.company, e.phone) <span class="comment">//Yes you can split into 2 lines here.</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	mark := Student&#123;Human&#123;<span class="string">&quot;Mark&quot;</span>, <span class="number">25</span>, <span class="string">&quot;222-222-YYYY&quot;</span>&#125;, <span class="string">&quot;MIT&quot;</span>&#125;</span><br><span class="line">	sam := Employee&#123;Human&#123;<span class="string">&quot;Sam&quot;</span>, <span class="number">45</span>, <span class="string">&quot;111-888-XXXX&quot;</span>&#125;, <span class="string">&quot;Golang Inc&quot;</span>&#125;</span><br><span class="line">	mark.SayHi()</span><br><span class="line">	sam.SayHi()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Hi, I am Mark you can call me on 222-222-YYYY</span><br><span class="line">Hi, I am Sam, I work at Golang Inc. Call me on 111-888-XXXX</span><br></pre></td></tr></table></figure>

<ul>
<li>方法是可以继承和重写的</li>
<li>存在继承关系时，按照就近原则，进行调用</li>
</ul>
<h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><h2 id="什么是接口"><a href="#什么是接口" class="headerlink" title="什么是接口"></a>什么是接口</h2><p>面向对象世界中的接口的一般定义是“接口定义对象的行为”。它表示让指定对象应该做什么。实现这种行为的方法(实现细节)是针对对象的。</p>
<p>在Go中，接口是一组方法签名。当类型为接口中的所有方法提供定义时，它被称为实现接口。它与OOP非常相似。接口指定了类型应该具有的方法，类型决定了如何实现这些方法。</p>
<blockquote>
<p> 它把所有的具有共性的方法定义在一起，任何其他类型只要实现了这些方法就是实现了这个接口</p>
<p> 接口定义了一组方法，如果某个对象实现了某个接口的所有方法，则此对象就实现了该接口。</p>
</blockquote>
<h2 id="接口的定义语法"><a href="#接口的定义语法" class="headerlink" title="接口的定义语法"></a>接口的定义语法</h2><p>定义接口</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 定义接口 */</span></span><br><span class="line"><span class="keyword">type</span> interface_name <span class="keyword">interface</span> &#123;</span><br><span class="line">   method_name1 [return_type]</span><br><span class="line">   method_name2 [return_type]</span><br><span class="line">   method_name3 [return_type]</span><br><span class="line">   ...</span><br><span class="line">   method_namen [return_type]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 定义结构体 */</span></span><br><span class="line"><span class="keyword">type</span> struct_name <span class="keyword">struct</span> &#123;</span><br><span class="line">   <span class="comment">/* variables */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 实现接口方法 */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(struct_name_variable struct_name)</span></span> method_name1() [return_type] &#123;</span><br><span class="line">   <span class="comment">/* 方法实现 */</span></span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(struct_name_variable struct_name)</span></span> method_namen() [return_type] &#123;</span><br><span class="line">   <span class="comment">/* 方法实现*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>示例代码：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Phone <span class="keyword">interface</span> &#123;</span><br><span class="line">    call()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> NokiaPhone <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(nokiaPhone NokiaPhone)</span></span> call() &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;I am Nokia, I can call you!&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> IPhone <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(iPhone IPhone)</span></span> call() &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;I am iPhone, I can call you!&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> phone Phone</span><br><span class="line"></span><br><span class="line">    phone = <span class="built_in">new</span>(NokiaPhone)</span><br><span class="line">    phone.call()</span><br><span class="line"></span><br><span class="line">    phone = <span class="built_in">new</span>(IPhone)</span><br><span class="line">    phone.call()</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由于<code>NokiaPhone</code>结构体实现了<code>Phone</code>接口中的方法，因此可以将其赋值给<code>phone</code>。</p>
<p>运行结果：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">I am Nokia, I can call you!</span><br><span class="line">I am iPhone, I can call you!</span><br></pre></td></tr></table></figure>

<ul>
<li>interface可以被任意的对象实现</li>
<li>一个对象可以实现任意多个interface</li>
<li>任意的类型都实现了空interface(我们这样定义：interface{})，也就是包含0个method的interface</li>
</ul>
<h2 id="interface值"><a href="#interface值" class="headerlink" title="interface值"></a>interface值</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Human <span class="keyword">struct</span> &#123;</span><br><span class="line">	name  <span class="type">string</span></span><br><span class="line">	age   <span class="type">int</span></span><br><span class="line">	phone <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">	Human  <span class="comment">//匿名字段</span></span><br><span class="line">	school <span class="type">string</span></span><br><span class="line">	loan   <span class="type">float32</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> Employee <span class="keyword">struct</span> &#123;</span><br><span class="line">	Human   <span class="comment">//匿名字段</span></span><br><span class="line">	company <span class="type">string</span></span><br><span class="line">	money   <span class="type">float32</span></span><br><span class="line">&#125; <span class="comment">//Human实现Sayhi方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h Human)</span></span> SayHi() &#123;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;Hi, I am %s you can call me on %s\n&quot;</span>, h.name, h.phone)</span><br><span class="line">&#125; <span class="comment">//Human实现Sing方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h Human)</span></span> Sing(lyrics <span class="type">string</span>) &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;La la la la...&quot;</span>, lyrics)</span><br><span class="line">&#125; <span class="comment">//Employee重写Human的SayHi方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e Employee)</span></span> SayHi() &#123;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;Hi, I am %s, I work at %s. Call me on %s\n&quot;</span>, e.name,</span><br><span class="line">		e.company, e.phone) <span class="comment">//Yes you can split into 2 lines here.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Interface Men被Human,Student和Employee实现</span></span><br><span class="line"><span class="comment">// 因为这三个类型都实现了这两个方法</span></span><br><span class="line"><span class="keyword">type</span> Men <span class="keyword">interface</span> &#123;</span><br><span class="line">	SayHi()</span><br><span class="line">	Sing(lyrics <span class="type">string</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	mike := Student&#123;Human&#123;<span class="string">&quot;Mike&quot;</span>, <span class="number">25</span>, <span class="string">&quot;222-222-XXX&quot;</span>&#125;, <span class="string">&quot;MIT&quot;</span>, <span class="number">0.00</span>&#125;</span><br><span class="line">	paul := Student&#123;Human&#123;<span class="string">&quot;Paul&quot;</span>, <span class="number">26</span>, <span class="string">&quot;111-222-XXX&quot;</span>&#125;, <span class="string">&quot;Harvard&quot;</span>, <span class="number">100</span>&#125;</span><br><span class="line">	sam := Employee&#123;Human&#123;<span class="string">&quot;Sam&quot;</span>, <span class="number">36</span>, <span class="string">&quot;444-222-XXX&quot;</span>&#125;, <span class="string">&quot;Golang Inc.&quot;</span>, <span class="number">1000</span>&#125;</span><br><span class="line">	Tom := Employee&#123;Human&#123;<span class="string">&quot;Sam&quot;</span>, <span class="number">36</span>, <span class="string">&quot;444-222-XXX&quot;</span>&#125;, <span class="string">&quot;Things Ltd.&quot;</span>, <span class="number">5000</span>&#125;</span><br><span class="line">	<span class="comment">//定义Men类型的变量i</span></span><br><span class="line">	<span class="keyword">var</span> i Men</span><br><span class="line">	<span class="comment">//i能存储Student</span></span><br><span class="line">	i = mike</span><br><span class="line">	fmt.Println(<span class="string">&quot;This is Mike, a Student:&quot;</span>)</span><br><span class="line">	i.SayHi()</span><br><span class="line">	i.Sing(<span class="string">&quot;November rain&quot;</span>)</span><br><span class="line">	<span class="comment">//i也能存储Employee</span></span><br><span class="line">	i = Tom</span><br><span class="line">	fmt.Println(<span class="string">&quot;This is Tom, an Employee:&quot;</span>)</span><br><span class="line">	i.SayHi()</span><br><span class="line">	i.Sing(<span class="string">&quot;Born to be wild&quot;</span>)</span><br><span class="line">	<span class="comment">//定义了slice Men</span></span><br><span class="line">	fmt.Println(<span class="string">&quot;Let&#x27;s use a slice of Men and see what happens&quot;</span>)</span><br><span class="line">	x := <span class="built_in">make</span>([]Men, <span class="number">3</span>)</span><br><span class="line">	<span class="comment">//T这三个都是不同类型的元素，但是他们实现了interface同一个接口</span></span><br><span class="line">	x[<span class="number">0</span>], x[<span class="number">1</span>], x[<span class="number">2</span>] = paul, sam, mike</span><br><span class="line">	<span class="keyword">for</span> _, value := <span class="keyword">range</span> x &#123;</span><br><span class="line">		value.SayHi()</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">This is Mike, a Student:</span><br><span class="line">Hi, I am Mike you can call me on 222-222-XXX</span><br><span class="line">La la la la... November rain</span><br><span class="line">This is Tom, an Employee:</span><br><span class="line">Hi, I am Sam, I work at Things Ltd.. Call me on 444-222-XXX</span><br><span class="line">La la la la... Born to be wild</span><br><span class="line">Let&#x27;s use a slice of Men and see what happens</span><br><span class="line">Hi, I am Paul you can call me on 111-222-XXX</span><br><span class="line">Hi, I am Sam, I work at Golang Inc.. Call me on 444-222-XXX</span><br><span class="line">Hi, I am Mike you can call me on 222-222-XXX</span><br></pre></td></tr></table></figure>

<p>那么interface里面到底能存什么值呢？如果我们定义了一个interface的变量，那么这个变量里面可以存实现这个interface的任意类型的对象。例如上面例子中，我们定义了一个Men interface类型的变量m，那么m里面可以存Human、Student或者Employee值</p>
<blockquote>
<p>当然，使用指针的方式，也是可以的</p>
<p>但是，接口对象不能调用实现对象的属性</p>
</blockquote>
<p><strong>interface函数参数</strong></p>
<p>interface的变量可以持有任意实现该interface类型的对象，这给我们编写函数(包括method)提供了一些额外的思考，我们是不是可以通过定义interface参数，让函数接受各种类型的参数</p>
<p><strong>嵌入interface</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Human <span class="keyword">interface</span> &#123;</span><br><span class="line">	Len()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> Student <span class="keyword">interface</span> &#123;</span><br><span class="line">	Human</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Test <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *Test)</span></span> Len() &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;成功&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> s Student</span><br><span class="line">	s = <span class="built_in">new</span>(Test)</span><br><span class="line">	s.Len()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>定义了一个<code>Student</code>接口，它通过嵌套<code>Human</code>接口，继承了<code>Human</code>接口中的方法。在<code>Test</code>结构体上定义了一个指针接收者的<code>Len</code>方法。该方法实现了<code>Human</code>接口中的<code>Len</code>方法。通过<code>s.Len()</code>调用了<code>Test</code>结构体中实现的<code>Len</code>方法，并输出”成功”。这样，通过接口的嵌套，我们可以在一个接口中组合多个其他接口，并且实现了嵌套接口的方法的结构体也被认为是实现了嵌套接口。这样可以实现接口的扩展和复用。</p>
<p>示例代码：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Controller <span class="keyword">struct</span> &#123;</span><br><span class="line">	M <span class="type">int32</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Something <span class="keyword">interface</span> &#123;</span><br><span class="line">	Get()</span><br><span class="line">	Post()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Controller)</span></span> Get() &#123;</span><br><span class="line">	fmt.Print(<span class="string">&quot;GET&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Controller)</span></span> Post() &#123;</span><br><span class="line">	fmt.Print(<span class="string">&quot;POST&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;test&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> T <span class="keyword">struct</span> &#123;</span><br><span class="line">	test.Controller</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *T)</span></span> Get() &#123;</span><br><span class="line">	<span class="comment">//new(test.Controller).Get()</span></span><br><span class="line">	fmt.Print(<span class="string">&quot;T&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *T)</span></span> Post() &#123;</span><br><span class="line">	fmt.Print(<span class="string">&quot;T&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> something test.Something</span><br><span class="line">	something = <span class="built_in">new</span>(T)</span><br><span class="line">	<span class="keyword">var</span> t T</span><br><span class="line">	t.M = <span class="number">1</span></span><br><span class="line">	<span class="comment">//	t.Controller.M = 1</span></span><br><span class="line">	something.Get()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Controller实现了所有的Something接口方法，当结构体T中调用Controller结构体的时候，T就相当于Java中的继承，T继承了Controller，因此，T可以不用重写所有的Something接口中的方法，因为父构造器已经实现了接口。</p>
<p>如果Controller没有实现Something接口方法，则T要调用Something中方法，就要实现其所有方法。</p>
<p>如果<code>something = new(test.Controller)</code>则调用的是Controller中的Get方法，T可以使用Controller结构体中定义的变量</p>
<p>总之，接口对象不能调用接口实现对象的属性</p>
]]></content>
      <categories>
        <category>青训营</category>
      </categories>
      <tags>
        <tag>大二自学</tag>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>go的编码规范</title>
    <url>/2023/06/01/Go/3/</url>
    <content><![CDATA[<h1 id="编码规范"><a href="#编码规范" class="headerlink" title="编码规范"></a>编码规范</h1><p>本规范旨在为日常Go项目开发提供一个代码的规范指导，方便团队形成一个统一的代码风格，提高代码的可读性，规范性和统一性。本规范将从命名规范，注释规范，代码风格和 Go 语言提供的常用的工具这几个方面做一个说明。该规范参考了 go 语言官方代码的风格制定。</p>
<h2 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h2><p>命名是代码规范中很重要的一部分，统一的命名规则有利于提高的代码的可读性，好的命名仅仅通过命名就可以获取到足够多的信息。</p>
<p>Go在命名时以字母a到Z或a到Z或下划线开头，后面跟着零或更多的字母、下划线和数字(0到9)。Go不允许在命名时中使用@、$和%等标点符号。Go是一种区分大小写的编程语言。因此，Manpower和manpower是两个不同的命名。</p>
<blockquote>
<ol>
<li>当命名（包括常量、变量、类型、函数名、结构字段等等）以一个大写字母开头，如：Group1，那么使用这种形式的标识符的对象就<strong>可以被外部包的代码所使用</strong>（客户端程序需要先导入这个包），这被称为导出（像面向对象语言中的 public）；</li>
<li><strong>命名如果以小写字母开头，则对包外是不可见的，但是他们在整个包的内部是可见并且可用的</strong>（像面向对象语言中的 private ）</li>
</ol>
</blockquote>
<h3 id="包命名：package"><a href="#包命名：package" class="headerlink" title="包命名：package"></a>包命名：package</h3><p>保持package的名字和目录保持一致，尽量采取有意义的包名，简短，有意义，尽量和标准库不要冲突。包名应该为<strong>小写</strong>单词，不要使用下划线或者混合大小写。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> demo</span><br><span class="line"><span class="keyword">package</span> main</span><br></pre></td></tr></table></figure>

<h3 id="文件命名"><a href="#文件命名" class="headerlink" title="文件命名"></a>文件命名</h3><p>尽量采取有意义的文件名，简短，有意义，应该为<strong>小写</strong>单词，使用<strong>下划线</strong>分隔各个单词。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">my_test.<span class="keyword">go</span></span><br></pre></td></tr></table></figure>

<h3 id="结构体命名"><a href="#结构体命名" class="headerlink" title="结构体命名"></a>结构体命名</h3><ul>
<li><p>采用驼峰命名法，首字母根据访问控制大写或者小写</p>
</li>
<li><p>struct 申明和初始化格式采用多行，例如下面：</p>
</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 多行申明</span></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span>&#123;</span><br><span class="line">    Username  <span class="type">string</span></span><br><span class="line">    Email     <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 多行初始化</span></span><br><span class="line">u := User&#123;</span><br><span class="line">    Username: <span class="string">&quot;astaxie&quot;</span>,</span><br><span class="line">    Email:    <span class="string">&quot;astaxie@gmail.com&quot;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="接口命名"><a href="#接口命名" class="headerlink" title="接口命名"></a>接口命名</h3><ul>
<li>命名规则基本和上面的结构体类型保持一致。</li>
<li>单个函数的结构名以 “er” 作为后缀，例如 Reader , Writer 。</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Reader <span class="keyword">interface</span> &#123;</span><br><span class="line">        Read(p []<span class="type">byte</span>) (n <span class="type">int</span>, err <span class="type">error</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="变量命名"><a href="#变量命名" class="headerlink" title="变量命名"></a>变量命名</h3><ul>
<li>和结构体类似，变量名称一般遵循驼峰法，首字母根据访问控制原则大写或者小写，但遇到特有名词时，需要遵循以下规则： <ul>
<li>如果变量为私有，且特有名词为首个单词，则使用小写，如 apiClient</li>
<li>其它情况都应当使用该名词原有的写法，如 APIClient、repoID、UserID</li>
<li>错误示例：UrlArray，应该写成 urlArray 或者 URLArray</li>
</ul>
</li>
<li>若变量类型为 bool 类型，则名称应以 has, is, can 或 allow 开头</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> isExist <span class="type">bool</span></span><br><span class="line"><span class="keyword">var</span> hasConflict <span class="type">bool</span></span><br><span class="line"><span class="keyword">var</span> canManage <span class="type">bool</span></span><br><span class="line"><span class="keyword">var</span> allowGitHook <span class="type">bool</span></span><br></pre></td></tr></table></figure>

<h3 id="常量命名"><a href="#常量命名" class="headerlink" title="常量命名"></a>常量命名</h3><p>常量均需使用全部大写字母组成，并使用下划线分词</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> APP_VER = <span class="string">&quot;1.0&quot;</span></span><br></pre></td></tr></table></figure>


<p>如果是枚举类型的常量，需要先创建相应类型：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Scheme <span class="type">string</span></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    HTTP  Scheme = <span class="string">&quot;http&quot;</span></span><br><span class="line">    HTTPS Scheme = <span class="string">&quot;https&quot;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><p>下面的列表显示了Go中的保留字。这些保留字不能用作常量或变量或任何其他标识符名称。</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/24fd930b2dd64516845b351960d1df8b~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="guanjianzi"></p>
<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>Go提供C风格的<code>/* */</code>块注释和C ++风格的<code>//</code>行注释。行注释是常态；块注释主要显示为包注释，但在表达式中很有用或禁用大量代码。</p>
<ul>
<li>单行注释是最常见的注释形式，你可以在任何地方使用以 &#x2F;&#x2F; 开头的单行注释</li>
<li>多行注释也叫块注释，均已以 &#x2F;* 开头，并以 *&#x2F; 结尾，且不可以嵌套使用，多行注释一般用于包的文档描述或注释成块的代码片段</li>
</ul>
<p>go 语言自带的 godoc 工具可以根据注释生成文档，生成可以自动生成对应的网站（ golang.org 就是使用 godoc 工具直接生成的），注释的质量决定了生成的文档的质量。每个包都应该有一个包注释，在package子句之前有一个块注释。对于多文件包，包注释只需要存在于一个文件中，任何一个都可以。包评论应该介绍包，并提供与整个包相关的信息。它将首先出现在<code>godoc</code>页面上，并应设置下面的详细文档。</p>
<p>详细的如何写注释可以<br>参考：<a href="http://golang.org/doc/effective_go.html#commentary">http://golang.org/doc/effective_go.html#commentary</a></p>
<h3 id="包注释"><a href="#包注释" class="headerlink" title="包注释"></a>包注释</h3><p>每个包都应该有一个包注释，一个位于package子句之前的块注释或行注释。包如果有多个go文件，只需要出现在一个go文件中（一般是和包同名的文件）即可。 包注释应该包含下面基本信息(请严格按照这个顺序，简介，创建人，创建时间）：</p>
<ul>
<li>包的基本简介（包名，简介）</li>
<li>创建者，格式： 创建人： rtx 名</li>
<li>创建时间，格式：创建时间： yyyyMMdd</li>
</ul>
<p>例如 util 包的注释示例如下</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// util 包， 该包包含了项目共用的一些常量，封装了项目中一些共用函数。</span></span><br><span class="line"><span class="comment">// 创建人： wxy</span></span><br><span class="line"><span class="comment">// 创建时间： 20230601</span></span><br></pre></td></tr></table></figure>

<h3 id="结构（接口）注释"><a href="#结构（接口）注释" class="headerlink" title="结构（接口）注释"></a>结构（接口）注释</h3><p>每个自定义的结构体或者接口都应该有注释说明，该注释对结构进行简要介绍，放在结构体定义的前一行，格式为： 结构体名， 结构体说明。同时结构体内的每个成员变量都要有说明，该说明放在成员变量的后面（注意对齐），实例如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// User ， 用户对象，定义了用户的基础信息</span></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span>&#123;</span><br><span class="line">    Username  <span class="type">string</span> <span class="comment">// 用户名</span></span><br><span class="line">    Email     <span class="type">string</span> <span class="comment">// 邮箱</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="函数（方法）注释"><a href="#函数（方法）注释" class="headerlink" title="函数（方法）注释"></a>函数（方法）注释</h3><p>每个函数，或者方法（结构体或者接口下的函数称为方法）都应该有注释说明，函数的注释应该包括三个方面（严格按照此顺序撰写）：</p>
<ul>
<li>简要说明，格式说明：以函数名开头，“，”分隔说明部分</li>
<li>参数列表：每行一个参数，参数名开头，“，”分隔说明部分</li>
<li>返回值： 每行一个返回值</li>
</ul>
<p>示例如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// NewtAttrModel ， 属性数据层操作类的工厂方法</span></span><br><span class="line"><span class="comment">// 参数：</span></span><br><span class="line"><span class="comment">//      ctx ： 上下文信息</span></span><br><span class="line"><span class="comment">// 返回值：</span></span><br><span class="line"><span class="comment">//      属性操作类指针</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewAttrModel</span><span class="params">(ctx *common.Context)</span></span> *AttrModel &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="代码逻辑注释"><a href="#代码逻辑注释" class="headerlink" title="代码逻辑注释"></a>代码逻辑注释</h3><p>对于一些关键位置的代码逻辑，或者局部较为复杂的逻辑，需要有相应的逻辑说明，方便其他开发者阅读该段代码，实例如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 从 Redis 中批量读取属性，对于没有读取到的 id ， 记录到一个数组里面，准备从 DB 中读取</span></span><br><span class="line">xxxxx</span><br><span class="line">xxxxxxx</span><br><span class="line">xxxxxxx</span><br></pre></td></tr></table></figure>

<h3 id="注释风格"><a href="#注释风格" class="headerlink" title="注释风格"></a>注释风格</h3><p>统一使用中文注释，对于中英文字符之间严格使用空格分隔， 这个不仅仅是中文和英文之间，英文和中文标点之间也都要使用空格分隔，例如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 从 Redis 中批量读取属性，对于没有读取到的 id ， 记录到一个数组里面，准备从 DB 中读取</span></span><br></pre></td></tr></table></figure>


<p>上面 Redis 、 id 、 DB 和其他中文字符之间都是用了空格分隔。 </p>
<ul>
<li>建议全部使用单行注释</li>
<li>和代码的规范一样，单行注释不要过长，禁止超过 120 字符。</li>
</ul>
<h2 id="代码风格"><a href="#代码风格" class="headerlink" title="代码风格"></a>代码风格</h2><h3 id="缩进和折行"><a href="#缩进和折行" class="headerlink" title="缩进和折行"></a>缩进和折行</h3><ul>
<li>缩进直接使用 gofmt 工具格式化即可（gofmt 是使用 tab 缩进的）；</li>
<li>折行方面，一行最长不超过120个字符，超过的请使用换行展示，尽量保持格式优雅。</li>
</ul>
<p>我们使用Goland开发工具，可以直接使用快捷键：ctrl+alt+L，即可。</p>
<h3 id="语句的结尾"><a href="#语句的结尾" class="headerlink" title="语句的结尾"></a>语句的结尾</h3><p>Go语言中是不需要类似于Java需要冒号结尾，默认一行就是一条数据</p>
<p>如果你打算将多个语句写在同一行，它们则必须使用 <strong>;</strong> </p>
<h3 id="括号和空格"><a href="#括号和空格" class="headerlink" title="括号和空格"></a>括号和空格</h3><p>括号和空格方面，也可以直接使用 gofmt 工具格式化（go 会强制左大括号不换行，换行会报语法错误），所有的运算符和操作数之间要留空格。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 正确的方式</span></span><br><span class="line"><span class="keyword">if</span> a &gt; <span class="number">0</span> &#123;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// 错误的方式</span></span><br><span class="line"><span class="keyword">if</span> a&gt;<span class="number">0</span>  <span class="comment">// a ，0 和 &gt; 之间应该空格</span></span><br><span class="line">&#123;       <span class="comment">// 左大括号不可以换行，会报语法错误</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="import-规范"><a href="#import-规范" class="headerlink" title="import 规范"></a>import 规范</h3><p>import在多行的情况下，goimports会自动帮你格式化，但是我们这里还是规范一下import的一些规范，如果你在一个文件里面引入了一个package，还是建议采用如下格式：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>如果你的包引入了三种类型的包，标准库包，程序内部包，第三方包，建议采用如下方式进行组织你的包：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;encoding/json&quot;</span></span><br><span class="line">    <span class="string">&quot;strings&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;myproject/models&quot;</span></span><br><span class="line">    <span class="string">&quot;myproject/controller&quot;</span></span><br><span class="line">    <span class="string">&quot;myproject/utils&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;github.com/astaxie/beego&quot;</span></span><br><span class="line">    <span class="string">&quot;github.com/go-sql-driver/mysql&quot;</span></span><br><span class="line">)   </span><br></pre></td></tr></table></figure>

<p>有顺序的引入包，不同的类型采用空格分离，第一种是标准库，第二是项目包，第三是第三方包。</p>
<p>在项目中不要使用相对路径引入包：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这是不好的导入</span></span><br><span class="line"><span class="keyword">import</span> “../net”</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这是正确的做法</span></span><br><span class="line"><span class="keyword">import</span> “github.com/repo/proj/src/net”</span><br></pre></td></tr></table></figure>

<p>但是如果是引入本项目中的其他包，最好使用相对路径。</p>
<h3 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h3><ul>
<li>错误处理的原则就是不能丢弃任何有返回err的调用，不要使用 _ 丢弃，必须全部处理。接收到错误，要么返回err，或者使用log记录下来</li>
<li>尽早return：一旦有错误发生，马上返回</li>
<li>尽量不要使用panic，除非你知道你在做什么</li>
<li>错误描述如果是英文必须为小写，不需要标点结尾</li>
<li>采用独立的错误流进行处理</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 错误写法</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="comment">// error handling</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// normal code</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确写法</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="comment">// error handling</span></span><br><span class="line">    <span class="keyword">return</span> <span class="comment">// or continue, etc.</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// normal code</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>单元测试文件名命名规范为 example_test.go<br>测试用例的函数名称必须以 Test 开头，例如：TestExample<br>每个重要的函数都要首先编写测试用例，测试用例和正规代码一起提交方便进行回归测试</p>
<h2 id="常用工具"><a href="#常用工具" class="headerlink" title="常用工具"></a>常用工具</h2><p>上面提到了很过规范， go 语言本身在代码规范性这方面也做了很多努力，很多限制都是强制语法要求，例如左大括号不换行，引用的包或者定义的变量不使用会报错，此外 go 还是提供了很多好用的工具帮助我们进行代码的规范，</p>
<p><strong>gofmt</strong><br>大部分的格式问题可以通过gofmt解决， gofmt 自动格式化代码，保证所有的 go 代码与官方推荐的格式保持一致，于是所有格式有关问题，都以 gofmt 的结果为准。</p>
<p><strong>goimport</strong><br>我们强烈建议使用 goimport ，该工具在 gofmt 的基础上增加了自动删除和引入包.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">go get golang.org/x/tools/cmd/goimports</span></span><br></pre></td></tr></table></figure>

<p><em><strong>以上两种工具上一篇文章已经介绍过怎么配置</strong></em></p>
<p><strong>go vet</strong><br>vet工具可以帮我们静态分析我们的源码存在的各种问题，例如多余的代码，提前return的逻辑，struct的tag是否符合标准等。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">go get golang.org/x/tools/cmd/vet</span></span><br></pre></td></tr></table></figure>


<p>使用如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">go vet .</span></span><br></pre></td></tr></table></figure>















]]></content>
      <categories>
        <category>青训营</category>
      </categories>
      <tags>
        <tag>大二自学</tag>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>go的基本介绍</title>
    <url>/2023/06/01/Go/2/</url>
    <content><![CDATA[<h2 id="Go的特点"><a href="#Go的特点" class="headerlink" title="Go的特点"></a>Go的特点</h2><ul>
<li>高性能，该并发</li>
<li>部署简单，学习简单</li>
<li>丰富的标准库</li>
<li>完善的工具链</li>
<li>静态链接</li>
<li>快速编译</li>
<li>跨平台</li>
<li>垃圾回收</li>
</ul>
<h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  fmt.Println(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Go是一门编译型语言，Go语言的工具链将源代码及其依赖转换成计算机的机器指令（静态编译）。Go语言提供的工具都通过一个单独的命令<code>go</code>调用，<code>go</code>命令有一系列子命令。最简单的一个子命令就是run。这个命令编译一个或多个以.go结尾的源文件，链接库文件，并运行最终生成的可执行文件。要想运行上述程序，命令行进入其目录，执行命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">go run helloworld.go</span></span><br></pre></td></tr></table></figure>

<p>Go语言原生支持Unicode，它可以处理全世界任何语言的文本。</p>
<p>如果不只是一次性实验，并且希望能够编译这个程序，保存编译结果以备将来之用。可以用build子命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">go build helloworld.go</span></span><br></pre></td></tr></table></figure>

<p>这个命令生成一个名为<code>helloworld</code>的<em><strong>可执行的二进制文件（Windows系统下生成的可执行文件是helloworld.exe），之后可以随时运行它</strong></em>（在Windows系统下在命令行直接输入helloworld.exe命令运行），不需任何处理（因为静态编译，所以不用担心在系统库更新的时候冲突，<em><strong>python也有相关的库<code>pyinstaller</code>将程序转为可执行文件</strong></em>）。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./helloworld</span></span><br><span class="line">hello world </span><br></pre></td></tr></table></figure>

<h2 id="Go的简介-挺有意思的，建议看看"><a href="#Go的简介-挺有意思的，建议看看" class="headerlink" title="Go的简介(挺有意思的，建议看看)"></a>Go的简介(挺有意思的，建议看看)</h2><p>​		Go语言的代码通过<em><strong>包</strong></em>（package）组织，包类似于其它语言里的库（libraries）或者模块（modules）。一个包由位于单个目录下的一个或多个.go源代码文件组成，目录定义包的作用。每个源文件都以一条<code>package</code>声明语句开始，上述例子里就是<code>package main</code>，表示该文件属于哪个包，紧跟着一系列导入（import）的包，之后是存储在这个文件里的程序语句。</p>
<p>​		Go的标准库提供了100多个包，以支持常见功能，如输入、输出、排序以及文本处理。比如<code>fmt</code>包，就含有格式化输出、接收输入的函数。<code>Println</code>是其中一个基础函数，可以打印以空格间隔的一个或多个值，并在最后添加一个换行符，从而输出一整行。</p>
<p>​		<strong><code>	main</code>包比较特殊。它定义了一个独立可执行的程序，而不是一个库。在<code>main</code>里的<code>main</code> <em>函数</em> 也很特殊，它是整个程序执行时的入口（C系语言类似）</strong>。<code>main</code>函数所做的事情就是程序做的。当然了，<code>main</code>函数一般调用其它包里的函数完成很多工作（例如：<code>fmt.Println</code>）。</p>
<ul>
<li><p>必须告诉编译器源文件需要哪些包，这就是跟随在<code>package</code>声明后面的<code>import</code>声明扮演的角色。hello world例子只用到了一个包，大多数程序需要导入多个包。</p>
</li>
<li><p>必须恰当导入需要的包，缺少了必要的包或者导入了不需要的包，程序都无法编译通过。<em><strong>这项严格要求避免了程序开发过程中引入未使用的包</strong></em>（<em><strong>Go语言编译过程没有警告信息</strong></em>）。</p>
<p>  <code>import</code>声明必须跟在文件的<code>package</code>声明之后。随后，则是组成程序的函数、变量、常量、类型的声明语句（分别由关键字<code>func</code>、<code>var</code>、<code>const</code>、<code>type</code>定义）。这些内容的声明顺序并不重要（最好按照规范要求自己）。上述例子的程序已经尽可能短了，只声明了一个函数，其中只调用了一个其他函数。为了节省篇幅，有些时候示例程序会省略<code>package</code>和<code>import</code>声明，但是，这些声明在源代码里有，并且必须得有才能编译。</p>
<p>  一个函数的声明由<code>func</code>关键字、函数名、参数列表、返回值列表（上述例子里的<code>main</code>函数参数列表和返回值都是空的）以及包含在大括号里的函数体组成。</p>
<p>  Go语言<em><strong>不需要在语句或者声明的末尾添加分号</strong></em>，除非一行上有多条语句。实际上，编译器<em><strong>会主动把特定符号后的换行符转换为分号</strong></em>，因此<em><strong>换行符添加的位置会影响Go代码的正确解析</strong></em>（比如行末是标识符、整数、浮点数、虚数、字符或字符串文字、关键字<code>break</code>、<code>continue</code>、<code>fallthrough</code>或<code>return</code>中的一个、运算符和分隔符<code>++</code>、<code>--</code>、<code>)</code>、<code>]</code>或<code>&#125;</code>中的一个）。举个例子，函数的左括号<code>&#123;</code>必须和<code>func</code>函数声明在同一行上，且位于末尾，不能独占一行，而在表达式<code>x + y</code>中，可在<code>+</code>后换行，不能在<code>+</code>前换行（以+结尾的话不会被插入分号分隔符，但是以x结尾的话则会被分号分隔符，从而导致编译错误）</p>
</li>
</ul>
<h2 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h2><h3 id="go-clean"><a href="#go-clean" class="headerlink" title="go clean"></a><strong>go clean</strong></h3><p>go clean 命令是用来移除当前源码包里面编译生成的文件，这些文件包括</p>
<ul>
<li>_obj&#x2F; 旧的object目录，由Makefiles遗留</li>
<li>_test&#x2F; 旧的test目录，由Makefiles遗留</li>
<li>_testmain.go 旧的gotest文件，由Makefiles遗留</li>
<li>test.out 旧的test记录，由Makefiles遗留</li>
<li>build.out 旧的test记录，由Makefiles遗留</li>
<li>*.[568ao] object文件，由Makefiles遗留</li>
<li>DIR(.exe) 由 go build 产生</li>
<li>DIR.test(.exe) 由 go test -c 产生</li>
<li>MAINFILE(.exe) 由 go build MAINFILE.go产生</li>
</ul>
<h3 id="go-test"><a href="#go-test" class="headerlink" title="go test"></a><strong>go test</strong></h3><p>go test 命令，会自动读取源码目录下面名为*_test.go的文件，生成并运行测试用的可执行文件。默认的情况下，不需要任何的参数，它会自动把你源码包下面所有test文件测试完毕，当然你也可以带上参数，详情请参考go help testflag</p>
<h3 id="go-doc"><a href="#go-doc" class="headerlink" title="go doc"></a><strong>go doc</strong></h3><p>go doc 命令其实就是一个很强大的文档工具。</p>
<p>如何查看相应package的文档呢？ 例如builtin包，那么执行go doc builtin；如果是http包，那么执行go doc net&#x2F;http；查看某一个包里面的函数，那么执行go doc fmt Printf；也可以查看相应的代码，执行go doc -src fmt Printf；</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看net/http包</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">go doc net/http</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看time包</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">go doc time</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看某个包里的指定函数</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">go doc <span class="built_in">fmt</span> Printf</span></span><br></pre></td></tr></table></figure>

<p>通过命令在命令行执行 go doc -http&#x3D;:端口号，比如godoc -http&#x3D;:8080。然后在浏览器中打开127.0.0.1:8080，你将会看到一个golang.org的本地copy版本，通过它你可以查询pkg文档等其它内容。如果你设置了GOPATH，在pkg分类下，不但会列出标准包的文档，还会列出你本地GOPATH中所有项目的相关文档，这对于经常被限制访问的用户来说是一个不错的选择。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">godoc -http=:9527</span></span><br></pre></td></tr></table></figure>

<hr>
<p>go fix 用来修复以前老版本的代码到新版本，例如go1之前老版本的代码转化到go1</p>
<p>go version 查看go当前的版本</p>
<p>go env 查看当前go的环境变量</p>
<p>go list 列出当前全部安装的package</p>
<h2 id="gofmt和goimports的配置"><a href="#gofmt和goimports的配置" class="headerlink" title="gofmt和goimports的配置"></a><code>gofmt</code>和<code>goimports</code>的配置</h2><p>​		<em><strong>Go语言在代码格式上采取了很强硬的态度</strong></em>。<code>gofmt</code>工具把代码格式化为标准格式（这个格式化工具没有任何可以调整代码格式的参数，Go语言就是这么任性），并且<code>go</code>工具中的<code>fmt</code>子命令会对指定包，否则默认为当前目录中所有.go源文件应用<code>gofmt</code>命令。我们应该养成格式化自己的代码的习惯。以法令方式规定标准的代码格式可以避免无尽的无意义的琐碎争执导致了Go语言的<a href="https://baike.baidu.com/item/Tiobe/2830870?fr=aladdin"><code>TIOBE</code></a>排名较低，争议的话题较少。更重要的是，这样可以做多种自动源码转换，如果放任Go语言代码格式，这些转换就不大可能了。</p>
<p>很多文本编辑器都可以配置为保存文件时自动执行<code>gofmt</code>，这样源代码总会被恰当地格式化，<code>gofmt</code>包含在标准的分发包中。还有个相关的工具，<code>goimports</code>，可以根据代码需要，自动地添加或删除<code>import</code>声明。这个工具并没有包含在标准的分发包中，可以用下面的命令在在<code>goland</code>中在任意一个项目的终端执行：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">$ <span class="keyword">go</span> get -v golang.org/x/tools/cmd/goimports</span><br></pre></td></tr></table></figure>


<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/df0d744ab4bc4f0f9204e4f4d0eb0a90~tplv-k3u1fbpfcp-watermark.image" alt="image-20230513220732135.png"></p>
<p>进入<code>GOPATH</code>(Go语言安装目录)，执行以下命令安装<code>goimports</code>,没有加版本号会报错</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">go</span> install golang.org/x/tools/cmd/goimports@latest</span><br></pre></td></tr></table></figure>

<p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cdc5eae7c83743338f84058f08c881ca~tplv-k3u1fbpfcp-watermark.image" alt="image-20230513221248033.png"></p>
<p>至此，我们可以在 <code>GOPATH/bin </code>目录下看到 <code>goimports.exe</code></p>
<p>然后在<code>goland</code>的设置中点击工具&gt;File Watcher</p>
<p>添加<code>gofmt</code>和<code>goimports</code></p>
<p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2632d630f887491b9370e03f4b43b1ba~tplv-k3u1fbpfcp-watermark.image" alt="image-20230513221553805.png"></p>
<p><code>goimports.exe</code>在<code>GOPATH/bin </code>目录下,其实<code>goland</code>能够自动找到它</p>
<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cc409d417dc34f17a299b7e35691e9d6~tplv-k3u1fbpfcp-watermark.image" alt="image-20230513221658244.png"></p>
<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6c31c5998d814a3f9e30de7b2b7c91af~tplv-k3u1fbpfcp-watermark.image" alt="image-20230513221724453.png"></p>
<p>点击确定，<code>gofmt</code>和<code>goimports</code>配置成功</p>
<p>原文链接：<a href="https://juejin.cn/post/7232689996821495865">Go的基本介绍（附gofmt和goimports配置）|青训营笔记 - 掘金 (juejin.cn)</a></p>
]]></content>
      <categories>
        <category>青训营</category>
      </categories>
      <tags>
        <tag>大二自学</tag>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>学习go的准备工作</title>
    <url>/2023/06/01/Go/1/</url>
    <content><![CDATA[<h2 id="一-golang环境配置"><a href="#一-golang环境配置" class="headerlink" title="一.golang环境配置"></a>一.golang环境配置</h2><ol>
<li><p><strong>下载SDK</strong></p>
<p>由于我用的是goland专业版，可以直接在上面下载Go SDK，很方便也不需要解压</p>
<p>也可以去官网安装，<strong><a href="https://golang.google.cn/dl/">https://golang.google.cn/dl/</a></strong></p>
<p><em><strong>🤡其实sdk和下文Gopath路径简洁一点更加方便~</strong></em></p>
<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2f0639cd12d544b5a19868c934ad34b4~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20230512213759389.png"></p>
</li>
<li><p><strong>将go的bin路径添加至Path环境变量中</strong></p>
<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5390cc87df4744d9950fa570b1b99604~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20230512214558987.png"></p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5e1571d984c048b9bdbcadf2ac0cd68d~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20230512214829533.png"></p>
</li>
<li><p><strong>新建工作目录go_workspace，测试环境</strong></p>
<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2001ee1accac4628b96c8515a23edd46~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20230512215418478.png"></p>
<p>​	在该目录里创建test.txt文件，代码如下</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main </span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123; </span><br><span class="line">    fmt.Println(<span class="string">&quot;Hello, world!&quot;</span>) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e8a01a5064104a60b490755a1b2f0fd2~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20230512215631547"></p>
<p>​	将文件后缀名改为go</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0031456c4f894df5b7e1810e74d56e09~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20230512215705515"></p>
<p>​	打开命令行，进入go_workspace的目录</p>
<p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0af7b34cb1224a6dab550296b0f3ae83~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20230512220156250.png"></p>
<p>​	输入以下命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">go run test.go</span></span><br></pre></td></tr></table></figure>

<p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0af7b34cb1224a6dab550296b0f3ae83~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20230512220740795"></p>
<p>​	输出Hello world!，证明环境配置成功</p>
<ol start="4">
<li><p><strong>设置模块代理</strong></p>
<p>如果访问 github 速度比较慢，建议配置 go mod proxy，下载第三方依赖包的速度可以大大加快</p>
</li>
</ol>
<blockquote>
<ol>
<li>打开“开始”并搜索“env” </li>
<li>选择“编辑系统环境变量” </li>
<li>点击“环境变量…”按钮 </li>
<li>在“&lt;**你的用户名**&gt; 的用户变量”章节下（上半部分）</li>
<li>点击“新建…”按钮</li>
<li>选择“变量名”输入框并输入“GO111MODULE” </li>
<li>选择“变量值”输入框并输入“on” </li>
<li>点击“确定”按钮 </li>
<li>点击“新建…”按钮 </li>
<li>选择“变量名”输入框并输入“GOPROXY” </li>
<li>选择“变量值”输入框并输入“<a href="https://goproxy.cn”/">https://goproxy.cn”</a> </li>
<li>点击“确定”按钮</li>
</ol>
</blockquote>
<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2906b6d25e1743d08166f72c5fb8abdc~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20230513094942468"></p>
<p>或者打开终端并执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">go <span class="built_in">env</span> -w GO111MODULE=on</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">go <span class="built_in">env</span> -w GOPROXY=https://goproxy.cn,direct</span></span><br></pre></td></tr></table></figure>

<p>如果不放心配置是否准确，当然也可以命令行输入go env检验</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7da62670712f41b487dfefbaa7be4a70~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20230513100243945"></p>
<p><em><strong>当然还可以设置自托管go模块代理</strong></em>，参照<a href="https://goproxy.cn/">https://goproxy.cn/</a></p>
<p>​	以下列出自托管go模块代理的一些好处：</p>
<ul>
<li>在没有网络连接的情况下使用代码，因为代码和依赖项都在本地存储。</li>
<li>更好地控制你的代码和依赖项，因为它们都在本地存储。</li>
<li>更好地保护你的代码和依赖项，因为它们不会被外部访问。</li>
<li>更快地构建和测试代码，因为它们不需要从远程服务器下载依赖项。</li>
</ul>
</li>
</ol>
<h2 id="二-goland配置"><a href="#二-goland配置" class="headerlink" title="二.goland配置"></a>二.goland配置</h2><p><strong>系统变量</strong>中新建GOROOT和GOPATH，GOROOT为go的安装路径（Go语言安装目录），GOPATH为go_workspace的路径</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/922f246f49bc482f805f451d9fcd1120~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20230512223852340.png"></p>
<p>并将<strong>用户变量</strong>中的GOPATH改为go_workspace的路径</p>
<p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/98d3ba81f6e9403eadd02764531eb944~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20230512224220984.png"></p>
<p>命令行输入go env，配置成功</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f3da83af8fa14d5e95df99a62efabccf~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20230512224355670.png"></p>
<p>新建go工程，GOROOT为go语言安装目录</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/309a90dc08704cb096f68bd1ba1003fd~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20230513082400448.png"></p>
<p>新建main目录，创建test.go文件，代码如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;Hello, world!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>右键并单击运行</p>
<p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9e97edf2697f44c9ac6989f149b432a6~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20230513084354777.png"></p>
<p>输出Hello world！配置成功</p>
<h2 id="三-goland常用快捷键"><a href="#三-goland常用快捷键" class="headerlink" title="三.goland常用快捷键"></a>三.goland常用快捷键</h2><p>文件相关快捷键：</p>
<blockquote>
<p>CTRL+E，打开最近浏览过的文件。<br>CTRL+SHIFT+E，打开最近更改的文件。<br>CTRL+N，可以快速打开struct结构体。<br>CTRL+SHIFT+N，可以快速打开文件。</p>
</blockquote>
<p>代码格式化：</p>
<blockquote>
<p>CTRL+ALT+T，可以把代码包在一个块内，例如if{…}else{…}。<br>CTRL+ALT+L，格式化代码。<br>CTRL+空格，代码提示。<br>CTRL+&#x2F;，单行注释。CTRL+SHIFT+&#x2F;，进行多行注释。<br>CTRL+B，快速打开光标处的结构体或方法（跳转到定义处）。<br>CTRL+“+&#x2F;-”，可以将当前方法进行展开或折叠。</p>
</blockquote>
<p>查找和定位:</p>
<blockquote>
<p>CTRL+R，替换文本。<br>CTRL+F，查找文本。<br>CTRL+SHIFT+F，进行全局查找。<br>CTRL+G，快速定位到某行。</p>
</blockquote>
<p>代码编辑:</p>
<blockquote>
<p>ALT+Q，可以看到当前方法的声明。<br>CTRL+Backspace，按单词进行删除。<br>SHIFT+ENTER，可以向下插入新行，即使光标在当前行的中间。<br>CTRL+X，删除当前光标所在行。<br>CTRL+D，复制当前光标所在行。<br>ALT+SHIFT+UP&#x2F;DOWN，可以将光标所在行的代码上下移动。<br>CTRL+SHIFT+U，可以将选中内容进行大小写转化。</p>
</blockquote>
<p>原文链接：<a href="https://juejin.cn/post/7232459954580947000">Windows系统下golang和goland详细配置|青训营笔记 - 掘金 (juejin.cn)</a></p>
]]></content>
      <categories>
        <category>青训营</category>
      </categories>
      <tags>
        <tag>大二自学</tag>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>变量与常量</title>
    <url>/2023/06/01/Go/4/</url>
    <content><![CDATA[<h1 id="基本语法——变量var"><a href="#基本语法——变量var" class="headerlink" title="基本语法——变量var"></a>基本语法——变量var</h1><h2 id="变量的使用"><a href="#变量的使用" class="headerlink" title="变量的使用"></a>变量的使用</h2><h3 id="什么是变量"><a href="#什么是变量" class="headerlink" title="什么是变量"></a>什么是变量</h3><p>变量是为存储特定类型的值而提供给内存位置的名称。在go中声明变量有多种语法。</p>
<p>所以变量的本质就是一小块内存，用于存储数据，在程序运行过程中数值可以改变</p>
<h3 id="声明变量"><a href="#声明变量" class="headerlink" title="声明变量"></a>声明变量</h3><p>var名称类型是声明单个变量的语法。</p>
<blockquote>
<p>以字母或下划线开头，由一个或多个字母、数字、下划线组成</p>
</blockquote>
<p>声明一个变量</p>
<p>第一种，指定变量类型，声明后若不赋值，使用<em><strong>默认值</strong></em></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name <span class="keyword">type</span></span><br><span class="line">name = value</span><br></pre></td></tr></table></figure>

<p>第二种，根据值自行判定变量类型(类型推断Type inference)</p>
<p>如果一个变量有一个初始值，Go将自动能够使用初始值来推断该变量的类型。因此，如果变量具有初始值，则可以省略变量声明中的类型。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = value</span><br></pre></td></tr></table></figure>

<p>第三种，省略var, 注意 :&#x3D;左侧的变量不应该是已经声明过的(多个变量同时声明时，至少保证一个是新变量)，否则会导致编译错误(简短声明)</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">name := value</span><br><span class="line"><span class="comment">// 例如</span></span><br><span class="line"><span class="keyword">var</span> a <span class="type">int</span> = <span class="number">10</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="number">10</span></span><br><span class="line">c : = <span class="number">10</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>这种方式它只能被用在函数体内，而不可以用于全局变量的声明与赋值</p>
</blockquote>
<p>示例代码：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="string">&quot;Hello&quot;</span></span><br><span class="line"><span class="keyword">var</span> b <span class="type">string</span> = <span class="string">&quot;World&quot;</span></span><br><span class="line"><span class="keyword">var</span> c <span class="type">bool</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">println</span>(a, b, c)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Hello World false</span><br></pre></td></tr></table></figure>

<h4 id="多变量声明"><a href="#多变量声明" class="headerlink" title="多变量声明"></a>多变量声明</h4><p>第一种，以逗号分隔，声明与赋值分开，若不赋值，存在默认值</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name1, name2, name3 <span class="keyword">type</span></span><br><span class="line">name1, name2, name3 = v1, v2, v3</span><br></pre></td></tr></table></figure>

<p>第二种，直接赋值，下面的变量类型可以是不同的类型</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name1, name2, name3 = v1, v2, v3</span><br></pre></td></tr></table></figure>

<p>第三种，集合类型</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> (</span><br><span class="line">    name1 type1</span><br><span class="line">    name2 type2</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>如果在相同的代码块中，我们不可以再次对于相同名称的变量使用初始化声明，例如：a :&#x3D; 20 就是不被允许的，编译器会提示错误 no new variables on left side of :&#x3D;，但是 a &#x3D; 20 是可以的，因为这是给相同的变量赋予一个新的值。</p>
<p>如果你在定义变量 a 之前使用它，则会得到编译错误 undefined: a。如果你声明了一个局部变量却没有在相同的代码块中使用它，同样会得到编译错误，例如下面这个例子当中的变量 a：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="keyword">var</span> a <span class="type">string</span> = <span class="string">&quot;abc&quot;</span></span><br><span class="line">   fmt.Println(<span class="string">&quot;hello, world&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>尝试编译这段代码将得到错误 a declared and not used</p>
<p>此外，单纯地给 a 赋值也是不够的，这个值必须被使用</p>
<p>在同一个作用域中，已存在同名的变量，则之后的声明初始化，则退化为赋值操作。但这个前提是，最少要有一个新的变量被定义，且在同一作用域，例如，下面的y就是新定义的变量</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	x := <span class="number">140</span></span><br><span class="line">	fmt.Println(&amp;x)</span><br><span class="line">	x, y := <span class="number">200</span>, <span class="string">&quot;abc&quot;</span></span><br><span class="line">	fmt.Println(&amp;x, x)</span><br><span class="line">	fmt.Print(y)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0xc04200a2b0</span><br><span class="line">0xc04200a2b0 200</span><br><span class="line">abc</span><br></pre></td></tr></table></figure>

<h1 id="基本语法——常量constant"><a href="#基本语法——常量constant" class="headerlink" title="基本语法——常量constant"></a>基本语法——常量constant</h1><h2 id="常量的使用"><a href="#常量的使用" class="headerlink" title="常量的使用"></a>常量的使用</h2><h3 id="常量声明"><a href="#常量声明" class="headerlink" title="常量声明"></a>常量声明</h3><p>常量是一个简单值的标识符，在程序运行时，不会被修改的量。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> identifier [<span class="keyword">type</span>] = value</span><br></pre></td></tr></table></figure>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//显式类型定义： </span></span><br><span class="line"><span class="keyword">const</span> b <span class="type">string</span> = <span class="string">&quot;abc&quot;</span></span><br><span class="line"><span class="comment">//隐式类型定义：</span></span><br><span class="line"><span class="keyword">const</span> b = <span class="string">&quot;abc&quot;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="keyword">const</span> LENGTH <span class="type">int</span> = <span class="number">10</span></span><br><span class="line">   <span class="keyword">const</span> WIDTH <span class="type">int</span> = <span class="number">5</span>   </span><br><span class="line">   <span class="keyword">var</span> area <span class="type">int</span></span><br><span class="line">   <span class="keyword">const</span> a, b, c = <span class="number">1</span>, <span class="literal">false</span>, <span class="string">&quot;str&quot;</span> <span class="comment">//多重赋值</span></span><br><span class="line"></span><br><span class="line">   area = LENGTH * WIDTH</span><br><span class="line">   fmt.Printf(<span class="string">&quot;面积为 : %d&quot;</span>, area)</span><br><span class="line">   <span class="built_in">println</span>()</span><br><span class="line">   <span class="built_in">println</span>(a, b, c)   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">面积为 : 50</span><br><span class="line">1 false str</span><br></pre></td></tr></table></figure>

<p>常量可以作为枚举，常量组</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    Unknown = <span class="number">0</span></span><br><span class="line">    Female = <span class="number">1</span></span><br><span class="line">    Male = <span class="number">2</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>常量组中如不指定类型和初始化值，则与上一行非空常量右值相同</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">const</span> (</span><br><span class="line">		x <span class="type">uint16</span> = <span class="number">16</span></span><br><span class="line">		y</span><br><span class="line">		s = <span class="string">&quot;abc&quot;</span></span><br><span class="line">		z</span><br><span class="line">	)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%T,%v\n&quot;</span>, y, y)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%T,%v\n&quot;</span>, z, z)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">uint16,16</span><br><span class="line">string,abc</span><br></pre></td></tr></table></figure>

<p>常量的注意事项：</p>
<ul>
<li><p>常量中的数据类型只可以是布尔型、数字型（整数型、浮点型和复数）和字符串型</p>
</li>
<li><p><em><strong>不曾使用的常量，在编译的时候，是不会报错的</strong></em></p>
</li>
<li><p>显示指定类型的时候，必须确保常量左右值类型一致，需要时可做显示类型转换。这与变量就不一样了，变量是可以是不同的类型值</p>
</li>
</ul>
<h3 id="iota关键字"><a href="#iota关键字" class="headerlink" title="iota关键字"></a>iota关键字</h3><p>iota，特殊常量，可以认为是一个可以被编译器修改的常量</p>
<p>iota 可以被用作枚举值：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    a = <span class="literal">iota</span></span><br><span class="line">    b = <span class="literal">iota</span></span><br><span class="line">    c = <span class="literal">iota</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>第一个 iota 等于 0，每当 iota 在新的一行被使用时，它的值都会自动加 1；所以 a&#x3D;0, b&#x3D;1, c&#x3D;2 可以简写为如下形式：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    a = <span class="literal">iota</span></span><br><span class="line">    b</span><br><span class="line">    c</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p><strong>iota 用法</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">const</span> (</span><br><span class="line">            a = <span class="literal">iota</span>   <span class="comment">//0</span></span><br><span class="line">            b          <span class="comment">//1</span></span><br><span class="line">            c          <span class="comment">//2</span></span><br><span class="line">            d = <span class="string">&quot;ha&quot;</span>   <span class="comment">//独立值，iota += 1</span></span><br><span class="line">            e          <span class="comment">//&quot;ha&quot;   iota += 1</span></span><br><span class="line">            f = <span class="number">100</span>    <span class="comment">//iota +=1</span></span><br><span class="line">            g          <span class="comment">//100  iota +=1</span></span><br><span class="line">            h = <span class="literal">iota</span>   <span class="comment">//7,恢复计数</span></span><br><span class="line">            i          <span class="comment">//8</span></span><br><span class="line">    )</span><br><span class="line">    fmt.Println(a,b,c,d,e,f,g,h,i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0 1 2 ha ha 100 100 7 8</span><br></pre></td></tr></table></figure>

<p>如果中断iota自增，则必须显式恢复。且后续自增值按行序递增</p>
<p>自增默认是int类型，可以自行进行显示指定类型</p>
<p>数字常量不会分配存储空间，无须像变量那样通过内存寻址来取值，因此无法获取地址</p>
<h1 id="变量与常量的示例"><a href="#变量与常量的示例" class="headerlink" title="变量与常量的示例"></a>变量与常量的示例</h1><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;math&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> a = <span class="string">&quot;initial&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> b, c <span class="type">int</span> = <span class="number">1</span>, <span class="number">2</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> d = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> e <span class="type">float64</span></span><br><span class="line"></span><br><span class="line">	f := <span class="type">float32</span>(e)</span><br><span class="line"></span><br><span class="line">	g := a + <span class="string">&quot;foo&quot;</span></span><br><span class="line">	fmt.Println(a, b, c, d, e, f) <span class="comment">// initial 1 2 true 0 0</span></span><br><span class="line">	fmt.Println(g)                <span class="comment">// initialapple</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">const</span> s <span class="type">string</span> = <span class="string">&quot;constant&quot;</span></span><br><span class="line">	<span class="keyword">const</span> h = <span class="number">500000000</span></span><br><span class="line">	<span class="keyword">const</span> i = <span class="number">3e20</span> / h</span><br><span class="line">	fmt.Println(s, h, i, math.Sin(h), math.Sin(i))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">initial 1 2 true 0 0</span><br><span class="line">initialfoo</span><br><span class="line">constant 500000000 6e+11 -0.28470407323754404 0.7591864109375384</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>青训营</category>
      </categories>
      <tags>
        <tag>大二自学</tag>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>数据类型与输入输出</title>
    <url>/2023/06/02/Go/5/</url>
    <content><![CDATA[<h1 id="基本语法——数据类型"><a href="#基本语法——数据类型" class="headerlink" title="基本语法——数据类型"></a>基本语法——数据类型</h1><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><p>以下是go中可用的基本数据类型</p>
<p><a href="https://smms.app/image/mkKRra8JejXWM4V" target="_blank"><img src="https://s2.loli.net/2023/06/02/mkKRra8JejXWM4V.jpg" ></a></p>
<h3 id="布尔型bool"><a href="#布尔型bool" class="headerlink" title="布尔型bool"></a>布尔型bool</h3><p>布尔型的值只可以是常量 true 或者 false。一个简单的例子：var b bool &#x3D; true</p>
<h3 id="数值型"><a href="#数值型" class="headerlink" title="数值型"></a>数值型</h3><p><strong>1、</strong>整数型</p>
<ul>
<li><p>int8<br>有符号 8 位整型 (-128 到 127)<br>长度：8bit</p>
</li>
<li><p>int16<br>有符号 16 位整型 (-32768 到 32767)</p>
</li>
<li><p>int32<br>有符号 32 位整型 (-2147483648 到 2147483647)</p>
</li>
<li><p>int64<br>有符号 64 位整型 (-9223372036854775808 到 9223372036854775807)</p>
</li>
<li><p>uint8<br>无符号 8 位整型 (0 到 255)<br>8位都用于表示数值：</p>
</li>
<li><p>uint16<br>无符号 16 位整型 (0 到 65535)</p>
</li>
<li><p>uint32<br>无符号 32 位整型 (0 到 4294967295)</p>
</li>
<li><p>uint64<br>无符号 64 位整型 (0 到 18446744073709551615)</p>
</li>
</ul>
<blockquote>
<p>int和uint:根据底层平台，表示32或64位整数。除非需要使用特定大小的整数，否则通常应该使用int来表示整数。<br>大小:32位系统32位，64位系统64位。<br>范围:-2147483648到2147483647的32位系统和-9223372036854775808到9223372036854775807的64位系统。</p>
</blockquote>
<p><strong>2、浮点型</strong></p>
<ul>
<li><p>float32</p>
<p>IEEE-754 32位浮点型数</p>
</li>
<li><p>float64</p>
<p>IEEE-754 64位浮点型数</p>
</li>
<li><p>complex64</p>
<p>32 位实数和虚数</p>
</li>
<li><p>complex128</p>
<p>64 位实数和虚数</p>
</li>
</ul>
<p><strong>3、其他</strong></p>
<ul>
<li><p>byte</p>
<p>类似 uint8</p>
</li>
<li><p>rune</p>
<p>类似 int32</p>
</li>
<li><p>uint</p>
<p>32 或 64 位</p>
</li>
<li><p>int</p>
<p>与 uint 一样大小</p>
</li>
<li><p>uintptr</p>
<p>无符号整型，用于存放一个指针</p>
</li>
</ul>
<h3 id="字符串型"><a href="#字符串型" class="headerlink" title="字符串型"></a>字符串型</h3><p>字符串就是一串固定长度的字符连接起来的字符序列。Go的字符串是由单个字节连接起来的。Go语言的字符串的字节使用UTF-8编码标识Unicode文本</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str <span class="type">string</span></span><br><span class="line">str = <span class="string">&quot;Hello World&quot;</span></span><br></pre></td></tr></table></figure>



<h3 id="数据类型转换：Type-Convert"><a href="#数据类型转换：Type-Convert" class="headerlink" title="数据类型转换：Type Convert"></a>数据类型转换：Type Convert</h3><p>语法格式：Type(Value)</p>
<p>常数：在有需要的时候，会自动转型</p>
<p>变量：需要手动转型	T(V)</p>
<p>注意点：兼容类型可以转换</p>
<h2 id="复合类型-派生类型"><a href="#复合类型-派生类型" class="headerlink" title="复合类型(派生类型)"></a>复合类型(派生类型)</h2><p>1、指针类型（Pointer）<br>2、数组类型<br>3、结构化类型(struct)<br>4、Channel 类型<br>5、函数类型<br>6、切片类型<br>7、接口类型（interface）<br>8、Map 类型</p>
<h1 id="键盘输入和打印输出"><a href="#键盘输入和打印输出" class="headerlink" title="键盘输入和打印输出"></a>键盘输入和打印输出</h1><h2 id="打印输出"><a href="#打印输出" class="headerlink" title="打印输出"></a>打印输出</h2><h3 id="fmt包"><a href="#fmt包" class="headerlink" title="fmt包"></a>fmt包</h3><p>fmt包实现了类似C语言printf和scanf的格式化I&#x2F;O。格式化verb（’verb’）源自C语言但更简单。</p>
<p>详见官网fmt的API：<a href="https://golang.google.cn/pkg/fmt/">https://golang.google.cn/pkg/fmt/</a></p>
<h3 id="导入包"><a href="#导入包" class="headerlink" title="导入包"></a>导入包</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="常用打印函数"><a href="#常用打印函数" class="headerlink" title="常用打印函数"></a>常用打印函数</h3><p><strong>打印：</strong></p>
<p><a href="https://golang.google.cn/pkg/fmt/#Print">func Print(a …interface{}) (n int, err error)</a></p>
<p><strong>格式化打印：</strong></p>
<p><a href="https://golang.google.cn/pkg/fmt/#Printf">func Printf(format string, a …interface{}) (n int, err error)</a></p>
<p><strong>打印后换行</strong></p>
<p><a href="https://golang.google.cn/pkg/fmt/#Println">func Println(a …interface{}) (n int, err error)</a></p>
<p>格式化打印中的常用占位符：</p>
<blockquote>
<p>格式化打印占位符：<br>            %v,原样输出<br>            %T，打印类型<br>            %t,bool类型<br>            %s，字符串<br>            %f，浮点<br>            %d，10进制的整数<br>            %b，2进制的整数<br>            %o，8进制<br>            %x，%X，16进制<br>                %x：0-9，a-f<br>                %X：0-9，A-F<br>            %c，打印字符<br>            %p，打印地址</p>
</blockquote>
<p>示例代码：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	a := <span class="number">100</span>           <span class="comment">//int</span></span><br><span class="line">	b := <span class="number">3.14</span>          <span class="comment">//float64</span></span><br><span class="line">	c := <span class="literal">true</span>          <span class="comment">// bool</span></span><br><span class="line">	d := <span class="string">&quot;Hello World&quot;</span> <span class="comment">//string</span></span><br><span class="line">	e := <span class="string">`Ruby`</span>        <span class="comment">//string</span></span><br><span class="line">	f := <span class="string">&#x27;A&#x27;</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;%T,%b\n&quot;</span>, a, a)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%T,%f\n&quot;</span>, b, b)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%T,%t\n&quot;</span>, c, c)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%T,%s\n&quot;</span>, d, d)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%T,%s\n&quot;</span>, e, e)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%T,%d,%c\n&quot;</span>, f, f, f)</span><br><span class="line">	fmt.Println(<span class="string">&quot;-----------------------&quot;</span>)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, a)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, b)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, c)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, d)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, e)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, f)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int,1100100</span><br><span class="line">float64,3.140000</span><br><span class="line">bool,true</span><br><span class="line">string,Hello World</span><br><span class="line">string,Ruby</span><br><span class="line">int32,65,A</span><br><span class="line">-----------------------</span><br><span class="line">100</span><br><span class="line">3.14</span><br><span class="line">true</span><br><span class="line">Hello World</span><br><span class="line">Ruby</span><br><span class="line">65</span><br></pre></td></tr></table></figure>



<h2 id="键盘输入"><a href="#键盘输入" class="headerlink" title="键盘输入"></a>键盘输入</h2><h3 id="fmt包读取键盘输入"><a href="#fmt包读取键盘输入" class="headerlink" title="fmt包读取键盘输入"></a>fmt包读取键盘输入</h3><p>常用方法：</p>
<ul>
<li><a href="https://golang.google.cn/pkg/fmt/#Scan">func Scan(a …interface{}) (n int, err error)</a></li>
</ul>
<p>​		Scan 从标准输入扫描文本，读取由 <strong>空白符</strong> 分隔的值分别保存到本函数的参数中。（换行符也被视为空白符）</p>
<ul>
<li><p><a href="https://golang.google.cn/pkg/fmt/#Scanf">func Scanf(format string, a …interface{}) (n int, err error)</a></p>
<p>Scanf从标准输入扫描文本，按照 format 参数指定的格式去读取由空白符分隔的值保存到传递给本函数的参数中。</p>
</li>
<li><p><a href="https://golang.google.cn/pkg/fmt/#Scanln">func Scanln(a …interface{}) (n int, err error)</a></p>
<p>Scanln类似Scan，它在遇到换行时停止扫描。最后一个数据后面必须有换行或者到达结束位置。</p>
</li>
</ul>
<p>示例代码：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> x <span class="type">int</span></span><br><span class="line">	<span class="keyword">var</span> y <span class="type">float64</span></span><br><span class="line">	fmt.Println(<span class="string">&quot;请输入一个整数，一个浮点类型：&quot;</span>)</span><br><span class="line">	fmt.Scanln(&amp;x,&amp;y)<span class="comment">//读取键盘的输入，通过操作地址，赋值给x和y   阻塞式</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;x的数值：%d，y的数值：%f\n&quot;</span>,x,y)</span><br><span class="line"></span><br><span class="line">	fmt.Scanf(<span class="string">&quot;%d,%f&quot;</span>,&amp;x,&amp;y)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;x:%d,y:%f\n&quot;</span>,x,y)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">请输入一个整数，一个浮点类型：</span><br><span class="line">100 3.14</span><br><span class="line">x的数值：100，y的数值：3.140000</span><br><span class="line">100,5.20</span><br><span class="line">x:100,y:5.200000</span><br></pre></td></tr></table></figure>

<h3 id="bufio包读取"><a href="#bufio包读取" class="headerlink" title="bufio包读取"></a>bufio包读取</h3><p><a href="https://golang.google.cn/pkg/bufio/">https://golang.google.cn/pkg/bufio/</a></p>
<p>bufio包中都是IO操作的方法：</p>
<p>先创建Reader对象,然后就可以各种读取了。</p>
<p>示例代码：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;os&quot;</span></span><br><span class="line">	<span class="string">&quot;bufio&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;请输入一个字符串：&quot;</span>)</span><br><span class="line">	reader := bufio.NewReader(os.Stdin)</span><br><span class="line">	s1, _ := reader.ReadString(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">	fmt.Println(<span class="string">&quot;读到的数据：&quot;</span>, s1)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行效果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">请输入一个字符串：</span><br><span class="line">hello wxy</span><br><span class="line">读到的数据： hello wxy</span><br></pre></td></tr></table></figure>

<p>解释：</p>
<ul>
<li><code>reader := bufio.NewReader(os.Stdin)</code>：这行代码创建了一个用于读取用户输入的读取器。<code>bufio.NewReader</code> 函数接受一个参数 <code>os.Stdin</code>，它表示标准输入（通常是键盘输入）。<code>reader</code> 是一个读取器对象，我们可以使用它来读取用户输入的字符串。</li>
<li><code>s1, _ := reader.ReadString(&#39;\n&#39;)</code>：这行代码使用读取器 <code>reader</code> 从标准输入读取字符串，直到遇到换行符 (<code>&#39;\n&#39;</code>) 为止。它将读取的字符串赋值给变量 <code>s1</code>。注意，这里使用了 <code>_</code>（下划线）来忽略函数的第二个返回值（表示可能的错误），因为我们不关心错误处理。</li>
</ul>
]]></content>
      <categories>
        <category>青训营</category>
      </categories>
      <tags>
        <tag>大二自学</tag>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>条件语句与循环语句</title>
    <url>/2023/06/02/Go/6/</url>
    <content><![CDATA[<h1 id="程序的流程结构"><a href="#程序的流程结构" class="headerlink" title="程序的流程结构"></a>程序的流程结构</h1><p>程序的流程控制结构一共有三种：顺序结构，选择结构，循环结构。</p>
<p>顺序结构：从上向下，逐行执行。</p>
<p>选择结构：条件满足，某些代码才会执行。0-1次</p>
<p>​	分支语句：if，switch，select</p>
<p>循环结构：条件满足，某些代码会被反复的执行多次。0-N次</p>
<p>​	循环语句：for</p>
<h1 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h1><h2 id="If语句"><a href="#If语句" class="headerlink" title="If语句"></a>If语句</h2><p>语法格式：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> 布尔表达式 &#123;</span><br><span class="line">   <span class="comment">/* 在布尔表达式为 true 时执行 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> 布尔表达式 &#123;</span><br><span class="line">   <span class="comment">/* 在布尔表达式为 true 时执行 */</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">/* 在布尔表达式为 false 时执行 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> 布尔表达式<span class="number">1</span> &#123;</span><br><span class="line">   <span class="comment">/* 在布尔表达式1为 true 时执行 */</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> 布尔表达式<span class="number">2</span>&#123;</span><br><span class="line">   <span class="comment">/* 在布尔表达式1为 false ,布尔表达式2为true时执行 */</span></span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">   <span class="comment">/* 在上面两个布尔表达式都为false时，执行*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>示例代码：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="comment">/* 定义局部变量 */</span></span><br><span class="line">   <span class="keyword">var</span> a <span class="type">int</span> = <span class="number">10</span></span><br><span class="line"> </span><br><span class="line">   <span class="comment">/* 使用 if 语句判断布尔表达式 */</span></span><br><span class="line">   <span class="keyword">if</span> a &lt; <span class="number">20</span> &#123;</span><br><span class="line">       <span class="comment">/* 如果条件为 true 则执行以下语句 */</span></span><br><span class="line">       fmt.Printf(<span class="string">&quot;a 小于 20\n&quot;</span> )</span><br><span class="line">   &#125;</span><br><span class="line">   fmt.Printf(<span class="string">&quot;a 的值为 : %d\n&quot;</span>, a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果其中包含一个可选的语句组件(在评估条件之前执行)，则还有一个变体。它的语法是</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> statement; condition &#123;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> condition&#123;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>示例代码：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> <span class="number">7</span>%<span class="number">2</span> == <span class="number">0</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;7 is even&quot;</span>)</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;7 is odd&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> <span class="number">8</span>%<span class="number">4</span> == <span class="number">0</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;8 is divisible by 4&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> num := <span class="number">9</span>; num &lt; <span class="number">0</span> &#123;</span><br><span class="line">		fmt.Println(num, <span class="string">&quot;is negative&quot;</span>)</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> num &lt; <span class="number">10</span> &#123;</span><br><span class="line">		fmt.Println(num, <span class="string">&quot;has 1 digit&quot;</span>)</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		fmt.Println(num, <span class="string">&quot;has multiple digits&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>需要注意的是，num的定义在if里，那么只能够在该if..else语句块中使用，否则编译器会报错的。</p>
</blockquote>
<h2 id="switch语句：“开关”"><a href="#switch语句：“开关”" class="headerlink" title="switch语句：“开关”"></a>switch语句：“开关”</h2><p>switch是一个条件语句，它计算表达式并将其与可能匹配的列表进行比较，并根据匹配执行代码块。它可以被认为是一种惯用的方式来写多个if else子句。</p>
<p>switch 语句用于基于不同条件执行不同动作，每一个 case 分支都是唯一的，从上直下逐一测试，直到匹配为止。<br>switch 语句执行的过程从上至下，直到找到匹配项，匹配项后面也<em><strong>不需要再加break</strong></em>。</p>
<p><em><strong>而如果switch没有表达式，它会匹配true</strong></em></p>
<p><em>Go里面switch默认相当于每个case最后带有break</em>，匹配成功后不会自动向下执行其他case，而是跳出整个switch, 但是可以使用fallthrough强制执行后面的case代码。</p>
<p>变量 var1 可以是任何类型，而 val1 和 val2 则可以是同类型的任意值。类型不被局限于常量或整数，但必须是相同的类型；或者最终结果为相同类型的表达式。<br>可以<strong>同时测试多个可能符合条件的值，使用逗号分割它们</strong>，例如：case val1, val2, val3。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> var1 &#123;</span><br><span class="line">    <span class="keyword">case</span> val1:</span><br><span class="line">        ...</span><br><span class="line">    <span class="keyword">case</span> val2:</span><br><span class="line">        ...</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>示例代码：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">/* 定义局部变量 */</span></span><br><span class="line">	<span class="keyword">var</span> grade = <span class="string">&quot;B&quot;</span></span><br><span class="line">	<span class="keyword">var</span> marks = <span class="number">90</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">switch</span> marks &#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">90</span>:</span><br><span class="line">		grade = <span class="string">&quot;A&quot;</span></span><br><span class="line">	<span class="keyword">case</span> <span class="number">80</span>:</span><br><span class="line">		grade = <span class="string">&quot;B&quot;</span></span><br><span class="line">	<span class="keyword">case</span> <span class="number">50</span>, <span class="number">60</span>, <span class="number">70</span>:</span><br><span class="line">		grade = <span class="string">&quot;C&quot;</span> <span class="comment">//case 后可以由多个数值</span></span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		grade = <span class="string">&quot;D&quot;</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">switch</span> &#123;</span><br><span class="line">	<span class="keyword">case</span> grade == <span class="string">&quot;A&quot;</span>:</span><br><span class="line">		fmt.Printf(<span class="string">&quot;优秀!\n&quot;</span>)</span><br><span class="line">	<span class="keyword">case</span> grade == <span class="string">&quot;B&quot;</span>, grade == <span class="string">&quot;C&quot;</span>:</span><br><span class="line">		fmt.Printf(<span class="string">&quot;良好\n&quot;</span>)</span><br><span class="line">	<span class="keyword">case</span> grade == <span class="string">&quot;D&quot;</span>:</span><br><span class="line">		fmt.Printf(<span class="string">&quot;及格\n&quot;</span>)</span><br><span class="line">	<span class="keyword">case</span> grade == <span class="string">&quot;F&quot;</span>:</span><br><span class="line">		fmt.Printf(<span class="string">&quot;不及格\n&quot;</span>)</span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		fmt.Printf(<span class="string">&quot;差\n&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;你的等级是 %s\n&quot;</span>, grade)</span><br><span class="line">    </span><br><span class="line">    t := time.Now()</span><br><span class="line">	<span class="keyword">switch</span> &#123;</span><br><span class="line">	<span class="keyword">case</span> t.Hour() &lt; <span class="number">12</span>:</span><br><span class="line">		fmt.Println(<span class="string">&quot;It&#x27;s before noon&quot;</span>)</span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		fmt.Println(<span class="string">&quot;It&#x27;s after noon&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">优秀!</span><br><span class="line">你的等级是 A</span><br><span class="line">It&#x27;s before noon</span><br></pre></td></tr></table></figure>



<h3 id="fallthrough"><a href="#fallthrough" class="headerlink" title="fallthrough"></a>fallthrough</h3><p>如需贯通后续的case，就添加fallthrough</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">switch</span> x := <span class="number">5</span>; x &#123;</span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		fmt.Println(x)</span><br><span class="line">	<span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">		x += <span class="number">10</span></span><br><span class="line">		fmt.Println(x)</span><br><span class="line">		<span class="keyword">fallthrough</span></span><br><span class="line">	<span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">		x += <span class="number">20</span></span><br><span class="line">		fmt.Println(x)</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">15</span><br><span class="line">35</span><br></pre></td></tr></table></figure>

<hr>
<p>解释：</p>
<p>根据switch语句的逻辑，首先会执行default分支，但是由于我们没有在default分支中写入任何代码，所以会直接跳过。在case 5分支的最后，我们使用了fallthrough关键字。fallthrough关键字的作用是强制执行下一个case分支的代码，而不进行条件判断。</p>
<p>在<code>switch</code>语句中，<code>default</code>用于处理没有匹配到任何<code>case</code>的情况。当<code>switch</code>表达式的值与所有的<code>case</code>都不匹配时，程序会执行<code>default</code>分支中的代码。</p>
<p><code>default</code>分支是可选的，也就是说可以选择是否在<code>switch</code>语句中包含它。如果没有<code>default</code>分支，而且没有任何一个<code>case</code>匹配到<code>switch</code>表达式的值，那么<code>switch</code>语句将不会执行任何代码。</p>
<p><code>default</code>分支通常被用作最后一个分支，用于处理不常见或者意外的情况。它可以用来提供一个默认的处理逻辑，或者给用户一个错误提示。</p>
<p>以下是一个示例，展示了<code>default</code>的使用：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	num := <span class="number">10</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">switch</span> num &#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>:</span><br><span class="line">		fmt.Println(<span class="string">&quot;小数&quot;</span>)</span><br><span class="line">	<span class="keyword">case</span> <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>:</span><br><span class="line">		fmt.Println(<span class="string">&quot;中数&quot;</span>)</span><br><span class="line">	<span class="keyword">case</span> <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>:</span><br><span class="line">		fmt.Println(<span class="string">&quot;大数&quot;</span>)</span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		fmt.Println(<span class="string">&quot;未知数&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在上面的示例中，如果<code>num</code>的值不属于1到9之间的任何一个数，那么就会执行<code>default</code>分支，并输出”未知数”。<code>default</code>分支可以用来处理一些边缘情况或者未预料到的情况，确保程序的健壮性。</p>
<hr>
<p><em>case中的表达式是可选的，可以省略。如果该表达式被省略，则被认为是switch true，并且每个case表达式都被计算为true，并执行相应的代码块</em>。</p>
<p>示例代码：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (  </span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;  </span><br><span class="line">    num := <span class="number">75</span></span><br><span class="line">    <span class="keyword">switch</span> &#123; <span class="comment">// expression is omitted</span></span><br><span class="line">    <span class="keyword">case</span> num &gt;= <span class="number">0</span> &amp;&amp; num &lt;= <span class="number">50</span>:</span><br><span class="line">        fmt.Println(<span class="string">&quot;num is greater than 0 and less than 50&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> num &gt;= <span class="number">51</span> &amp;&amp; num &lt;= <span class="number">100</span>:</span><br><span class="line">        fmt.Println(<span class="string">&quot;num is greater than 51 and less than 100&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> num &gt;= <span class="number">101</span>:</span><br><span class="line">        fmt.Println(<span class="string">&quot;num is greater than 100&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">num is greater than 51 and less than 100</span><br></pre></td></tr></table></figure>

<blockquote>
<p>switch的注意事项</p>
<ol>
<li>case后的常量值不能重复</li>
<li>case后可以有多个常量值</li>
<li>fallthrough应该是某个case的最后一行。如果它出现在中间的某个地方，编译器就会抛出错误。</li>
</ol>
</blockquote>
<h3 id="Type-Switch"><a href="#Type-Switch" class="headerlink" title="Type Switch"></a>Type Switch</h3><p>switch 语句还可以被用于 type-switch 来判断某个 interface 变量中实际存储的变量类型。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> x.(<span class="keyword">type</span>)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">type</span>:</span><br><span class="line">       statement(s);      </span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">type</span>:</span><br><span class="line">       statement(s); </span><br><span class="line">    <span class="comment">/* 你可以定义任意个数的case */</span></span><br><span class="line">    <span class="keyword">default</span>: <span class="comment">/* 可选 */</span></span><br><span class="line">       statement(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>示例代码：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="keyword">var</span> x <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">     </span><br><span class="line">   <span class="keyword">switch</span> i := x.(<span class="keyword">type</span>) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="literal">nil</span>:	  </span><br><span class="line">         fmt.Printf(<span class="string">&quot; x 的类型 :%T&quot;</span>,i)                </span><br><span class="line">      <span class="keyword">case</span> <span class="type">int</span>:	  </span><br><span class="line">         fmt.Printf(<span class="string">&quot;x 是 int 型&quot;</span>)                       </span><br><span class="line">      <span class="keyword">case</span> <span class="type">float64</span>:</span><br><span class="line">         fmt.Printf(<span class="string">&quot;x 是 float64 型&quot;</span>)           </span><br><span class="line">      <span class="keyword">case</span> <span class="function"><span class="keyword">func</span><span class="params">(<span class="type">int</span>)</span></span> <span class="type">float64</span>:</span><br><span class="line">         fmt.Printf(<span class="string">&quot;x 是 func(int) 型&quot;</span>)                      </span><br><span class="line">      <span class="keyword">case</span> <span class="type">bool</span>, <span class="type">string</span>:</span><br><span class="line">         fmt.Printf(<span class="string">&quot;x 是 bool 或 string 型&quot;</span> )       </span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">         fmt.Printf(<span class="string">&quot;未知型&quot;</span>)     </span><br><span class="line">   &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">x 的类型 :&lt;<span class="literal">nil</span>&gt;</span><br></pre></td></tr></table></figure>

<p>解释：</p>
<p>在这段代码中，变量<code>x</code>的类型被声明为<code>interface&#123;&#125;</code>，它是一个空接口。空接口可以表示任意类型的值，包括<code>nil</code>。当我们使用类型断言<code>x.(type)</code>来获取<code>x</code>的具体类型时，如果<code>x</code>的值是<code>nil</code>，那么<code>case nil</code>分支会匹配成功。这里需要注意的是，<code>nil</code>是一个特殊的值，表示一个指针类型或接口类型的零值，表示该指针或接口不指向任何具体的对象。在这种情况下，我们可以将其视为一种特殊的类型。因此，<code>case nil</code>分支被用来处理<code>x</code>为<code>nil</code>的情况。</p>
<h1 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h1><p>循环语句表示条件满足，可以反复的执行某段代码。</p>
<p>for是唯一的循环语句。(Go没有while循环)</p>
<h2 id="for语句"><a href="#for语句" class="headerlink" title="for语句"></a>for语句</h2><p>语法结构：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for init; condition; post &#123; &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>初始化语句只执行一次。在初始化循环之后，将检查该条件。如果条件计算为true，那么{}中的循环体将被执行，然后是post语句。post语句将在循环的每次成功迭代之后执行。在执行post语句之后，该条件将被重新检查。如果它是正确的，循环将继续执行，否则循环终止。</p>
</blockquote>
<p>示例代码：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (  </span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;  </span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++ &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot; %d&quot;</span>,i)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在for循环中声明的变量仅在循环范围内可用。因此，i不能在外部访问循环。</p>
</blockquote>
<p><strong>所有的三个组成部分，即初始化、条件和post都是可选的。</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> condition &#123; &#125;</span><br></pre></td></tr></table></figure>

<p>效果与while相似</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> &#123; &#125;</span><br></pre></td></tr></table></figure>

<p>效果与for(;;) 一样</p>
<p>for 循环的 range 格式可以对 slice、map、数组、字符串等进行迭代循环</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for key, value := range oldMap &#123;</span><br><span class="line">    newMap[key] = value</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> b <span class="type">int</span> = <span class="number">9</span></span><br><span class="line">   <span class="keyword">var</span> a <span class="type">int</span></span><br><span class="line"></span><br><span class="line">   numbers := [<span class="number">6</span>]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>&#125; </span><br><span class="line"></span><br><span class="line">   <span class="comment">/* for 循环 */</span></span><br><span class="line">   <span class="keyword">for</span> a := <span class="number">0</span>; a &lt; <span class="number">5</span>; a++ &#123;</span><br><span class="line">      fmt.Printf(<span class="string">&quot;a 的值为: %d\n&quot;</span>, a)</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span> a &lt; b &#123;</span><br><span class="line">      a++</span><br><span class="line">      fmt.Printf(<span class="string">&quot;a 的值为: %d\n&quot;</span>, a)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span> i,x:= <span class="keyword">range</span> numbers &#123;</span><br><span class="line">      fmt.Printf(<span class="string">&quot;第 %d 位 x 的值 = %d\n&quot;</span>, i,x)</span><br><span class="line">   &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a 的值为: 0</span><br><span class="line">a 的值为: 1</span><br><span class="line">a 的值为: 2</span><br><span class="line">a 的值为: 3</span><br><span class="line">a 的值为: 4</span><br><span class="line">a 的值为: 1</span><br><span class="line">a 的值为: 2</span><br><span class="line">a 的值为: 3</span><br><span class="line">a 的值为: 4</span><br><span class="line">a 的值为: 5</span><br><span class="line">a 的值为: 6</span><br><span class="line">a 的值为: 7</span><br><span class="line">a 的值为: 8</span><br><span class="line">a 的值为: 9</span><br><span class="line">第 0 位 x 的值 = 1</span><br><span class="line">第 1 位 x 的值 = 2</span><br><span class="line">第 2 位 x 的值 = 3</span><br><span class="line">第 3 位 x 的值 = 5</span><br><span class="line">第 4 位 x 的值 = 0</span><br><span class="line">第 5 位 x 的值 = 0</span><br></pre></td></tr></table></figure>



<h3 id="多层for循环"><a href="#多层for循环" class="headerlink" title="多层for循环"></a>多层for循环</h3><p>for循环中又有循环嵌套，就表示多层循环了。</p>
<h2 id="跳出循环的语句"><a href="#跳出循环的语句" class="headerlink" title="跳出循环的语句"></a>跳出循环的语句</h2><h3 id="break语句"><a href="#break语句" class="headerlink" title="break语句"></a>break语句</h3><p>break：跳出循环体。break语句用于在结束其正常执行之前突然终止for循环</p>
<p>示例代码：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (  </span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;  </span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> i &gt; <span class="number">5</span> &#123;</span><br><span class="line">            <span class="keyword">break</span> <span class="comment">//loop is terminated if i &gt; 5</span></span><br><span class="line">        &#125;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;%d &quot;</span>, i)</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;\nline after for loop&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 2 3 4 5 </span><br><span class="line">line after for loop</span><br></pre></td></tr></table></figure>

<h3 id="continue语句"><a href="#continue语句" class="headerlink" title="continue语句"></a>continue语句</h3><p>continue：跳出一次循环。continue语句用于跳过for循环的当前迭代。在continue语句后面的for循环中的所有代码将不会在当前迭代中执行。循环将继续到下一个迭代。</p>
<p>示例代码：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (  </span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;  </span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> i%<span class="number">2</span> == <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;%d &quot;</span>, i)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 3 5 7 9 </span><br></pre></td></tr></table></figure>

<h3 id="goto语句"><a href="#goto语句" class="headerlink" title="goto语句"></a>goto语句</h3><p>goto：可以无条件地转移到过程中指定的行。</p>
<p>语法结构：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">goto</span> label;</span><br><span class="line">..</span><br><span class="line">..</span><br><span class="line">label: statement;</span><br></pre></td></tr></table></figure>

<p>​												<a href="https://smms.app/image/ZUna3jv2o9h5xgN" target="_blank"><img src="https://s2.loli.net/2023/06/02/ZUna3jv2o9h5xgN.jpg" ></a></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">/* 定义局部变量 */</span></span><br><span class="line">	<span class="keyword">var</span> a = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/* 循环 */</span></span><br><span class="line">LOOP:</span><br><span class="line">	<span class="keyword">for</span> a &lt; <span class="number">20</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> a == <span class="number">15</span> &#123;</span><br><span class="line">			<span class="comment">/* 跳过迭代 */</span></span><br><span class="line">			a = a + <span class="number">1</span></span><br><span class="line">			<span class="keyword">goto</span> LOOP</span><br><span class="line">		&#125;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;a的值为 : %d\n&quot;</span>, a)</span><br><span class="line">		a++</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a的值为 : 10</span><br><span class="line">a的值为 : 11</span><br><span class="line">a的值为 : 12</span><br><span class="line">a的值为 : 13</span><br><span class="line">a的值为 : 14</span><br><span class="line">a的值为 : 16</span><br><span class="line">a的值为 : 17</span><br><span class="line">a的值为 : 18</span><br><span class="line">a的值为 : 19</span><br></pre></td></tr></table></figure>

<p>统一错误处理<br>多处错误处理存在代码重复时是非常棘手的，例如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">	err := firstCheckError()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">goto</span> onExit</span><br><span class="line">    &#125;</span><br><span class="line">    err = secondCheckError()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">goto</span> onExit</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(<span class="string">&quot;done&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">onExit:</span><br><span class="line">    fmt.Println(err)</span><br><span class="line">    exitProcess()</span><br></pre></td></tr></table></figure>

<h2 id="生成随机数"><a href="#生成随机数" class="headerlink" title="生成随机数"></a>生成随机数</h2><p>示例代码：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;math/rand&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	num1 := rand.Int()</span><br><span class="line">	fmt.Println(num1)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">		num := rand.Intn(<span class="number">10</span>)</span><br><span class="line">		fmt.Println(num)</span><br><span class="line">	&#125;</span><br><span class="line">	rand.Seed(<span class="number">1000</span>)</span><br><span class="line">	num2 := rand.Intn(<span class="number">10</span>)</span><br><span class="line">	fmt.Println(<span class="string">&quot;---&gt;&quot;</span>, num2)</span><br><span class="line"></span><br><span class="line">	t1 := time.Now()</span><br><span class="line">	fmt.Println(t1)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%T\n&quot;</span>, t1)</span><br><span class="line"></span><br><span class="line">	timeStamp1 := t1.Unix()</span><br><span class="line">	fmt.Println(timeStamp1)</span><br><span class="line"></span><br><span class="line">	timestamp2 := t1.UnixNano()</span><br><span class="line">	fmt.Println(timestamp2)</span><br><span class="line"></span><br><span class="line">	rand.Seed(time.Now().UnixNano())</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;---&gt;&quot;</span>, rand.Intn(<span class="number">100</span>))</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	num3 := rand.Intn(<span class="number">46</span>) + <span class="number">3</span></span><br><span class="line">	fmt.Println(num3)</span><br><span class="line">	num4 := rand.Intn(<span class="number">62</span>) + <span class="number">15</span></span><br><span class="line">	fmt.Println(num4)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2359980755445512729</span><br><span class="line">6</span><br><span class="line">0</span><br><span class="line">9</span><br><span class="line">3</span><br><span class="line">2</span><br><span class="line">---&gt; 5</span><br><span class="line">2023-06-02 12:00:50.6796224 +0800 CST m=+0.001542201</span><br><span class="line">time.Time</span><br><span class="line">1685678450</span><br><span class="line">1685678450679622400</span><br><span class="line">---&gt; 74</span><br><span class="line">---&gt; 79</span><br><span class="line">---&gt; 18</span><br><span class="line">---&gt; 21</span><br><span class="line">---&gt; 68</span><br><span class="line">---&gt; 41</span><br><span class="line">---&gt; 33</span><br><span class="line">---&gt; 31</span><br><span class="line">---&gt; 26</span><br><span class="line">---&gt; 37</span><br><span class="line">15</span><br></pre></td></tr></table></figure>

<p>解释：</p>
<p>在随机数生成中，种子（seed）是用于初始化随机数生成器的值。种子决定了随机数序列的起始点。在某种程度上，相同种子会生成相同的随机数序列。</p>
<p>在上述代码中，<code>rand.Seed()</code>方法用于设置随机数生成器的种子。如果没有显式地设置种子，Go语言的<code>math/rand</code>包默认使用一个固定的种子，这意味着每次程序运行时都会生成相同的随机数序列。这在某些情况下可能不是我们所期望的。</p>
<p>通过调用<code>rand.Seed()</code>方法并传入一个不同的种子值，我们可以改变随机数生成器的起始点，从而产生不同的随机数序列。通常情况下，我们会使用当前时间的纳秒级时间戳作为种子，以确保每次运行程序时都能生成不同的随机数序列。</p>
<p>在代码中，<code>rand.Seed(1000)</code>将种子设置为固定值1000，因此后续生成的随机数序列将始终相同。而<code>rand.Seed(time.Now().UnixNano())</code>使用当前时间的纳秒级时间戳作为种子，可以产生不同的随机数序列。</p>
<p>但是<em><strong>自从Go 1.2 0以来,rand.Seed就已经被弃用了</strong></em>！</p>
]]></content>
      <categories>
        <category>青训营</category>
      </categories>
      <tags>
        <tag>大二自学</tag>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>函数与defer</title>
    <url>/2023/06/04/Go/8/</url>
    <content><![CDATA[<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="什么是函数"><a href="#什么是函数" class="headerlink" title="什么是函数"></a>什么是函数</h2><p>函数是执行特定任务的代码块。</p>
<h2 id="函数的声明"><a href="#函数的声明" class="headerlink" title="函数的声明"></a>函数的声明</h2><p>go 语言至少有一个 main 函数</p>
<p>语法格式：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">funcName</span><span class="params">(parametername type1, parametername type2)</span></span> (output1 type1, output2 type2) &#123;</span><br><span class="line"><span class="comment">//这里是处理逻辑代码</span></span><br><span class="line"><span class="comment">//返回多个值</span></span><br><span class="line"><span class="keyword">return</span> value1, value2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>func：函数由 func 开始声明</li>
<li>funcName：函数名称，函数名和参数列表一起构成了函数签名。</li>
<li>parametername type：参数列表，参数就像一个占位符，当函数被调用时，你可以将值传递给参数，这个值被称为实际参数。参数列表指定的是参数类型、顺序、及参数个数。参数是可选的，也就是说函数也可以不包含参数。</li>
<li>output1 type1, output2 type2：返回类型，函数返回一列值。return_types 是该列值的数据类型。有些功能不需要返回值，这种情况下 return_types 不是必须的。</li>
<li>上面返回值声明了两个变量 output1 和 output2，如果你不想声明也可以，直接就两个类型。</li>
<li>如果只有一个返回值且不声明返回值变量，那么你可以省略包括返回值的括号（即一个返回值可以不声明返回类型）</li>
<li>函数体：函数定义的代码集合。</li>
</ul>
<h2 id="函数的使用"><a href="#函数的使用" class="headerlink" title="函数的使用"></a>函数的使用</h2><p>示例代码：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(a <span class="type">int</span>, b <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add2</span><span class="params">(a, b <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">exists</span><span class="params">(m <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>, k <span class="type">string</span>)</span></span> (v <span class="type">string</span>, ok <span class="type">bool</span>) &#123;</span><br><span class="line">	v, ok = m[k]</span><br><span class="line">	<span class="keyword">return</span> v, ok</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	res := add(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">	fmt.Println(res) <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line">	v, ok := exists(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>&#123;<span class="string">&quot;a&quot;</span>: <span class="string">&quot;A&quot;</span>&#125;, <span class="string">&quot;a&quot;</span>)</span><br><span class="line">	fmt.Println(v, ok) <span class="comment">// A True</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">A true</span><br></pre></td></tr></table></figure>

<h2 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h2><h3 id="参数的使用"><a href="#参数的使用" class="headerlink" title="参数的使用"></a>参数的使用</h3><p>形式参数：定义函数时，用于接收外部传入的数据，叫做形式参数，简称形参。</p>
<p>实际参数：调用函数时，传给形参的实际的数据，叫做实际参数，简称实参。</p>
<p>函数调用：</p>
<p> A：函数名称必须匹配</p>
<p> B：实参与形参必须一一对应：顺序，个数，类型</p>
<h3 id="可变参"><a href="#可变参" class="headerlink" title="可变参"></a>可变参</h3><p>Go 函数支持变参。接受变参的函数是有着不定数量的参数的。为了做到这点，首先需要定义函数使其接受变参：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">myfunc</span><span class="params">(arg ...<span class="type">int</span>)</span></span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<p><code>arg ...int</code> 告诉 Go 这个函数接受不定数量的参数。注意，这些参数的类型全部是 int。在函数体中，变量 arg 是一个 int 的 slice：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> _, n := <span class="keyword">range</span> arg &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;And the number is: %d\n&quot;</span>, n)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h3><p>go 语言函数的参数也是存在<strong>值传递</strong>和<strong>引用传递</strong></p>
<p>函数运用场景</p>
<p><strong>值传递</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">   <span class="string">&quot;fmt&quot;</span></span><br><span class="line">   <span class="string">&quot;math&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="comment">/* 声明函数变量 */</span></span><br><span class="line">   getSquareRoot := <span class="function"><span class="keyword">func</span><span class="params">(x <span class="type">float64</span>)</span></span> <span class="type">float64</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> math.Sqrt(x)</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* 使用函数 */</span></span><br><span class="line">   fmt.Println(getSquareRoot(<span class="number">9</span>))</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>引用传递</strong></p>
<p>这就牵扯到了所谓的指针。我们知道，变量在内存中是存放于一定地址上的，修改变量实际是修改变量地址处的内存。</p>
<p>只有 add1 函数知道 x 变量所在的地址，才能修改 x 变量的值。所以我们需要将 x 所在地址 &amp; x 传入函数，并将函数的参数的类型由 int 改为 * int，即改为指针类型，才能在函数中修改 x 变量的值。此时参数仍然是按 copy 传递的，只是 copy 的是一个指针。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 简单的一个函数，实现了参数+1的操作</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add1</span><span class="params">(a *<span class="type">int</span>)</span></span> <span class="type">int</span> &#123; <span class="comment">// 请注意，</span></span><br><span class="line">	*a = *a + <span class="number">1</span> <span class="comment">// 修改了a的值</span></span><br><span class="line">	<span class="keyword">return</span> *a   <span class="comment">// 返回新值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	x := <span class="number">3</span></span><br><span class="line">	fmt.Println(<span class="string">&quot;x = &quot;</span>, x)    <span class="comment">// 应该输出 &quot;x = 3&quot;</span></span><br><span class="line">	x1 := add1(&amp;x)            <span class="comment">// 调用 add1(&amp;x) 传x的地址</span></span><br><span class="line">	fmt.Println(<span class="string">&quot;x+1 = &quot;</span>, x1) <span class="comment">// 应该输出 &quot;x+1 = 4&quot;</span></span><br><span class="line">	fmt.Println(<span class="string">&quot;x = &quot;</span>, x)    <span class="comment">// 应该输出 &quot;x = 4&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">x =  3</span><br><span class="line">x+1 =  4</span><br><span class="line">x =  4</span><br></pre></td></tr></table></figure>

<ul>
<li>传指针使得多个函数能操作同一个对象。</li>
<li>传指针比较轻量级 (8bytes), 只是传内存地址，我们可以用指针传递体积大的结构体。如果用参数值传递的话，在每次 copy 上面就会花费相对较多的系统开销（内存和时间）。所以当你要传递大的结构体的时候，用指针是一个明智的选择。</li>
<li><strong>Go 语言中 slice，map 这三种类型的实现机制类似指针</strong>，所以可以直接传递，而不用取地址后传递指针。（注：若函数需改变 slice 的长度，则仍需要取地址传递指针）</li>
</ul>
<h2 id="函数的返回值"><a href="#函数的返回值" class="headerlink" title="函数的返回值"></a>函数的返回值</h2><h3 id="什么是函数的返回值"><a href="#什么是函数的返回值" class="headerlink" title="什么是函数的返回值"></a>什么是函数的返回值</h3><p>一个函数被调用后，返回给调用处的执行结果，叫做函数的返回值。</p>
<p>调用处需要使用变量接收该结果</p>
<h3 id="一个函数可以返回多个值"><a href="#一个函数可以返回多个值" class="headerlink" title="一个函数可以返回多个值"></a>一个函数可以返回多个值</h3><p>一个函数可以没有返回值，也可以有一个返回值，也可以有返回多个值。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">swap</span><span class="params">(x, y <span class="type">string</span>)</span></span> (<span class="type">string</span>, <span class="type">string</span>) &#123;</span><br><span class="line">   <span class="keyword">return</span> y, x</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   a, b := swap(<span class="string">&quot;Mahesh&quot;</span>, <span class="string">&quot;Kumar&quot;</span>)</span><br><span class="line">   fmt.Println(a, b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SumAndProduct</span><span class="params">(A, B <span class="type">int</span>)</span></span> (add <span class="type">int</span>, Multiplied <span class="type">int</span>) &#123;</span><br><span class="line">add = A+B</span><br><span class="line">Multiplied = A*B</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="空白标识符"><a href="#空白标识符" class="headerlink" title="空白标识符"></a>空白标识符</h3><p>_是 Go 中的空白标识符。它可以代替任何类型的任何值。让我们看看这个空白标识符的用法。</p>
<p>比如 rectProps 函数返回的结果是面积和周长，如果我们只要面积，不要周长，就可以使用空白标识符。</p>
<p>示例代码：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (  </span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">rectProps</span><span class="params">(length, width <span class="type">float64</span>)</span></span> (<span class="type">float64</span>, <span class="type">float64</span>) &#123;  </span><br><span class="line">    <span class="keyword">var</span> area = length * width</span><br><span class="line">    <span class="keyword">var</span> perimeter = (length + width) * <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> area, perimeter</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;  </span><br><span class="line">    area, _ := rectProps(<span class="number">10.8</span>, <span class="number">5.6</span>) <span class="comment">// perimeter is discarded</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;Area %f &quot;</span>, area)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h2><p>作用域：变量可以使用的范围。</p>
<h3 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h3><p>一个函数内部定义的变量，就叫做局部变量</p>
<p>变量在哪里定义，就只能在哪个范围使用，超出这个范围，我们认为变量就被销毁了。</p>
<h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><p>一个函数外部定义的变量，就叫做全局变量</p>
<p>所有的函数都可以使用，而且共享这一份数据</p>
<h3 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h3><p>一个函数自己调用自己，就叫做递归调用，一个递归函数一定要有出口，否则会陷入死循环</p>
<h1 id="defer"><a href="#defer" class="headerlink" title="defer"></a>defer</h1><h2 id="延迟是什么？"><a href="#延迟是什么？" class="headerlink" title="延迟是什么？"></a>延迟是什么？</h2><p>即延迟（defer）语句，延迟语句被用于执行一个函数调用，在这个函数之前，延迟语句返回。</p>
<h2 id="延迟函数"><a href="#延迟函数" class="headerlink" title="延迟函数"></a>延迟函数</h2><p>你可以在函数中添加多个 defer 语句。当函数执行到最后时，这些 defer 语句会按照逆序执行，最后该函数返回。特别是当你在进行一些打开资源的操作时，遇到错误需要提前返回，在返回前你需要关闭相应的资源，不然很容易造成资源泄露等问题。</p>
<ul>
<li>如果有很多调用 defer，那么 defer 是采用<code>后进先出</code>模式</li>
<li>在离开所在的方法时，执行（报错的时候也会执行）</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ReadWrite</span><span class="params">()</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    file.Open(<span class="string">&quot;file&quot;</span>)</span><br><span class="line">    <span class="keyword">defer</span> file.Close()</span><br><span class="line">    <span class="keyword">if</span> failureX &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">if</span> failureY &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后才执行 <code>file.Close()</code></p>
<p>示例代码：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	a := <span class="number">1</span></span><br><span class="line">	b := <span class="number">2</span></span><br><span class="line">	<span class="keyword">defer</span> fmt.Println(b)</span><br><span class="line">	fmt.Println(a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td></tr></table></figure>

<p>示例代码：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (  </span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">finished</span><span class="params">()</span></span> &#123;  </span><br><span class="line">    fmt.Println(<span class="string">&quot;Finished finding largest&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">largest</span><span class="params">(nums []<span class="type">int</span>)</span></span> &#123;  </span><br><span class="line">    <span class="keyword">defer</span> finished()    </span><br><span class="line">    fmt.Println(<span class="string">&quot;Started finding largest&quot;</span>)</span><br><span class="line">    max := nums[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> _, v := <span class="keyword">range</span> nums &#123;</span><br><span class="line">        <span class="keyword">if</span> v &gt; max &#123;</span><br><span class="line">            max = v</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(<span class="string">&quot;Largest number in&quot;</span>, nums, <span class="string">&quot;is&quot;</span>, max)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;  </span><br><span class="line">    nums := []<span class="type">int</span>&#123;<span class="number">78</span>, <span class="number">109</span>, <span class="number">2</span>, <span class="number">563</span>, <span class="number">300</span>&#125;</span><br><span class="line">    largest(nums)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Started finding largest  </span><br><span class="line">Largest number in [78 109 2 563 300] is 563  </span><br><span class="line">Finished finding largest </span><br></pre></td></tr></table></figure>

<h2 id="延迟方法"><a href="#延迟方法" class="headerlink" title="延迟方法"></a>延迟方法</h2><p>延迟并不仅仅局限于函数。延迟一个方法调用也是完全合法的。让我们编写一个小程序来测试这个。</p>
<p>示例代码：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> person <span class="keyword">struct</span> &#123;</span><br><span class="line">	firstName <span class="type">string</span></span><br><span class="line">	lastName  <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p person)</span></span> fullName() &#123;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%s %s&quot;</span>, p.firstName, p.lastName)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	p := person&#123;</span><br><span class="line">		firstName: <span class="string">&quot;John&quot;</span>,</span><br><span class="line">		lastName:  <span class="string">&quot;Smith&quot;</span>,</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">defer</span> p.fullName()</span><br><span class="line">	fmt.Printf(<span class="string">&quot;Welcome &quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Welcome John Smith </span><br></pre></td></tr></table></figure>

<h2 id="延迟参数"><a href="#延迟参数" class="headerlink" title="延迟参数"></a>延迟参数</h2><p>延迟函数的参数在执行延迟语句时被执行，而不是在执行实际的函数调用时执行。</p>
<p>让我们通过一个例子来理解这个问题。</p>
<p>示例代码：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (  </span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printA</span><span class="params">(a <span class="type">int</span>)</span></span> &#123;  </span><br><span class="line">    fmt.Println(<span class="string">&quot;value of a in deferred function&quot;</span>, a)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;  </span><br><span class="line">    a := <span class="number">5</span></span><br><span class="line">    <span class="keyword">defer</span> printA(a)</span><br><span class="line">    a = <span class="number">10</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;value of a before deferred function call&quot;</span>, a)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">value of a before deferred function call 10 </span><br><span class="line">value of a in deferred function 5 </span><br></pre></td></tr></table></figure>

<h2 id="堆栈的推迟"><a href="#堆栈的推迟" class="headerlink" title="堆栈的推迟"></a>堆栈的推迟</h2><p>当一个函数有多个延迟调用时，它们被添加到一个堆栈中，并在 Last In First Out（LIFO）后进先出的顺序中执行。</p>
<p>编写一个小程序，它使用一堆 defers 打印一个字符串。示例代码：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (  </span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;  </span><br><span class="line">    name := <span class="string">&quot;Naveen&quot;</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;Orignal String: %s\n&quot;</span>, <span class="type">string</span>(name))</span><br><span class="line">    fmt.Printf(<span class="string">&quot;Reversed String: &quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> _, v := <span class="keyword">range</span> []<span class="type">rune</span>(name) &#123;</span><br><span class="line">        <span class="keyword">defer</span> fmt.Printf(<span class="string">&quot;%c&quot;</span>, v)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解释：</p>
<p>在 Go 语言中，<code>rune</code> 是一个整数类型别名，用于表示 Unicode 字符。它实际上是一个 32 位的整数，可以存储任何 Unicode 码点的值。在 Go 中，字符串是由一系列的 Unicode 字符组成的。每个 Unicode 字符可以由一个或多个字节表示。使用 <code>rune </code>类型，我们可以按字符而不是字节来处理字符串。<code>rune </code>类型的主要作用是允许我们在字符串中按字符进行迭代、索引和操作。当我们需要遍历字符串中的每个字符时，特别是在涉及多字节字符（如中文、日文或特殊符号）的情况下，使用<code>rune</code> 类型可以确保正确处理每个字符。在上面的代码示例中，我们使用 <code>[]rune(name)</code> 将字符串 <code>name</code> 转换为一个 <code>rune</code> 切片，以便我们可以按字符迭代处理它。这样可以确保逆序打印字符串中的每个字符，而不仅仅是按字节逆序打印。</p>
<p>运行结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Orignal String: Naveen </span><br><span class="line">Reversed String: neevaN </span><br></pre></td></tr></table></figure>

<h2 id="defer-注意点"><a href="#defer-注意点" class="headerlink" title="defer 注意点"></a>defer 注意点</h2><p>defer 函数：<br>当外围函数中的语句正常执行完毕时，只有其中所有的延迟函数都执行完毕，外围函数才会真正的结束执行。<br>当执行外围函数中的 return 语句时，只有其中所有的延迟函数都执行完毕后，外围函数才会真正返回。<br>当外围函数中的代码引发运行恐慌时，只有其中所有的延迟函数都执行完毕后，该运行时恐慌才会真正被扩展至调用函数。</p>
]]></content>
      <categories>
        <category>青训营</category>
      </categories>
      <tags>
        <tag>大二自学</tag>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>电大软件测试～第一次作业</title>
    <url>/2023/05/31/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/test1/</url>
    <content><![CDATA[<h2 id="第一次作业及参考答案"><a href="#第一次作业及参考答案" class="headerlink" title="第一次作业及参考答案"></a>第一次作业及参考答案</h2><h3 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h3><p>针对电子科技大学信息门户的“密码找回”界面的邮箱输入域进行验证， 采用等价划分法设计相应的测试用例，包括尽量多的无效等价类。</p>
<p>答:</p>
<p>有效等价类如下：</p>
<blockquote>
<p>(1)邮箱输入学符串格式<u>***@uestc.edu.cn</u>或<u>***@UESTC.EDU.CN</u>(*为字母或数字)</p>
</blockquote>
<p>无效等价类:</p>
<blockquote>
<p>(2)*中带有非字母或数字的其它字符</p>
<p>(3)邮箱输入的字符串中缺少‘@’字符</p>
<p>(4)邮箱输入的字符串中有两个或多个‘@’字符</p>
<p>(5)邮箱输入字符串中‘@’字符后不是标准的域名字段</p>
</blockquote>
<p>测试用例：</p>
<table>
<thead>
<tr>
<th align="left">测试用例编号</th>
<th>测试用例</th>
<th>覆盖等价类</th>
</tr>
</thead>
<tbody><tr>
<td align="left">1</td>
<td><a href="mailto:&#101;&#x78;&#x61;&#x6d;&#112;&#108;&#x65;&#64;&#117;&#x65;&#x73;&#116;&#99;&#46;&#x65;&#x64;&#x75;&#46;&#x63;&#110;">&#101;&#x78;&#x61;&#x6d;&#112;&#108;&#x65;&#64;&#117;&#x65;&#x73;&#116;&#99;&#46;&#x65;&#x64;&#x75;&#46;&#x63;&#110;</a></td>
<td>(1)</td>
</tr>
<tr>
<td align="left">2</td>
<td>#<a href="mailto:&#x65;&#120;&#97;&#x6d;&#112;&#108;&#101;&#x40;&#117;&#x65;&#115;&#x74;&#x63;&#x2e;&#x65;&#100;&#117;&#46;&#x63;&#110;">&#x65;&#120;&#97;&#x6d;&#112;&#108;&#101;&#x40;&#117;&#x65;&#115;&#x74;&#x63;&#x2e;&#x65;&#100;&#117;&#46;&#x63;&#110;</a></td>
<td>(2)</td>
</tr>
<tr>
<td align="left">3</td>
<td>exampleuestc.edu.cn</td>
<td>(3)</td>
</tr>
<tr>
<td align="left">4</td>
<td>example@@uestc.edu.cn</td>
<td>(4)</td>
</tr>
<tr>
<td align="left">5</td>
<td>example@domaincom</td>
<td>(5)</td>
</tr>
</tbody></table>
<h3 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h3><p>综合运用边界值方法和等价类方法，针对三角形问题设计相应的测试用例。假定输入三个整数（a、b、c）作为边，分别满足一般三角形、等腰三角形和等边三角形。</p>
<p>1）判断一般三角形的有效等价类是什么? 判断一般三角形的无效等价类是什么?</p>
<p>2）判断等腰三角形的有效等价类是什么? 判断等腰三角形的无效等价类是什么?</p>
<p>3）判断等边三角形的有效等价类是什么? 判断等边三角形的无效等价类是什么?</p>
<p>答：</p>
<p>三角形判断条件如下：</p>
<blockquote>
<p>1)三角形的边长均大于0</p>
<p>2)构成一般三角形的条件：任意两边之和大于第三边</p>
<p>3)构成等腰三角形的条件：任意两边相等</p>
<p>4)构成等腰三角形的条件：三条边都相等</p>
</blockquote>
<p>(1)判断一般三角形的有效等价类与边界值规则设计：</p>
<blockquote>
<p>(a≥0)∧(b≥0)∧(c≥0)∧((a+b)&gt;c)∧((a+c)&gt;b)∧((b+c)&gt;a)</p>
</blockquote>
<p>判断一般三角形的无效等价类与边界值规则设计：</p>
<blockquote>
<p>①(a≥0)∧(b≥0)∧(c≥0)∧(((a+b)≤c)∨((a+c)≤b)∨((b+c)≤a))</p>
<p>②(a≤0)∨(b≤0)∨(c≤0)</p>
</blockquote>
<p>(2)判断等腰三角形的有效等价类与边界值规则设计：</p>
<blockquote>
<p>(a≥0)∧(b≥0)∧(c≥0)∧((a+b)&gt;c)∧((a+c)&gt;b)∧((b+c)&gt;a)∧((a&#x3D;b)∨(b&#x3D;c)∨(a&#x3D;c))</p>
</blockquote>
<p>判断等腰三角形的无效等价类与边界值规则设计：</p>
<blockquote>
<p>①(a!&#x3D;b)∧(b!&#x3D;c)∧(c!&#x3D;a) </p>
<p>②(a≤0)∨(b≤0)∨(c≤0)</p>
</blockquote>
<p>(3)判断等边三角形的有效等价类与边界值规则设计：</p>
<blockquote>
<p>(a≥0)∧(b≥0)∧(c≥0)∧((a+b)&gt;c)∧((a+c)&gt;b)∧((b+c)&gt;a)∧(a&#x3D;b&#x3D;c)</p>
</blockquote>
<p>判断等边三角形的无效等价类与边界值规则设计：</p>
<blockquote>
<p>①(a!&#x3D;b)</p>
<p>②(a≤0)∨(b≤0)∨(c≤0)</p>
</blockquote>
<p>测试用例</p>
<table>
<thead>
<tr>
<th>测试用例编号</th>
<th>测试用例输入(a,b,c)</th>
<th>预期结果</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>(5,6,8)</td>
<td>一般三角形</td>
</tr>
<tr>
<td>2</td>
<td>(5,6,5)</td>
<td>等腰三角形</td>
</tr>
<tr>
<td>3</td>
<td>(5,5,5)</td>
<td>等边三角形</td>
</tr>
<tr>
<td>4</td>
<td>(5,0,5)</td>
<td>非三角形</td>
</tr>
<tr>
<td>5</td>
<td>(2,2,5)</td>
<td>非三角形</td>
</tr>
</tbody></table>
<h3 id="第三题"><a href="#第三题" class="headerlink" title="第三题"></a>第三题</h3><p>系统的年、月、日数据由Y、M、D单元来存储相应值，若要测试NextData（Y,M,D）函数，采用判定表方法设计相应的测试用例。</p>
<p>答：</p>
<p>被测函数功能：该程序输出为输入日期的下一个日期。</p>
<p>例如：输入为2023年4月2日，函数输出为2023年4月3日。</p>
<p>函数输入变量Y，M，D，均为正整数，并满足如下条件：</p>
<p>1）1900≤Y≤2100</p>
<p>2）1≤M≤12</p>
<p>3）1≤D≤31</p>
<p>4）能被 400 整除，或者能被4整除但不能 100 整除的部是闰年(366 天)，其余的年份均为平年(365 天)</p>
<table>
<thead>
<tr>
<th>输入参数</th>
<th>有效等价类</th>
<th>无效等价类</th>
</tr>
</thead>
<tbody><tr>
<td>Y</td>
<td>1900≤Y≤2100，Y1闰年，Y2平年</td>
<td>＜1900，＞2100，非正整数，其他符号</td>
</tr>
<tr>
<td>M</td>
<td>1≤M≤12，M1{1,3,5,7,8,10}，M2{4,6,9,11}，M3{2}，M4{12}</td>
<td>&lt;1，&gt;12，非正整数，其他符号</td>
</tr>
<tr>
<td>D</td>
<td>1≤D≤31，D1{1,27}，D2{28}，D3{29}，D4{30}，D5{31}</td>
<td>&lt;1，&gt;31，D6，非正整数，其他符号</td>
</tr>
</tbody></table>
<p><em><strong>判定表设计：</strong></em></p>
<p>结果：</p>
<p>1、year,month不变,day+1</p>
<p>2、year不变,month+1,day&#x3D;1</p>
<p>3、year+1,month&#x3D;1,day&#x3D;1</p>
<p>4、错误的输入</p>
<table>
<thead>
<tr>
<th>用例</th>
<th>1</th>
<th>2</th>
<th>3</th>
<th>4</th>
<th>5</th>
<th>6</th>
<th>7</th>
<th>8</th>
<th>9</th>
<th>10</th>
<th>11</th>
<th>12</th>
</tr>
</thead>
<tbody><tr>
<td>Y</td>
<td>Y1</td>
<td>Y1</td>
<td>Y1</td>
<td>Y1</td>
<td>Y1</td>
<td>Y1</td>
<td>Y1</td>
<td>Y1</td>
<td>Y1</td>
<td>Y1</td>
<td>Y1</td>
<td>Y1</td>
</tr>
<tr>
<td>M</td>
<td>M3</td>
<td>M3</td>
<td>M3</td>
<td>M1</td>
<td>M1</td>
<td>M1</td>
<td>M2</td>
<td>M2</td>
<td>M2</td>
<td>M4</td>
<td>M4</td>
<td>M4</td>
</tr>
<tr>
<td>D</td>
<td>D3</td>
<td>D2,D1</td>
<td>D4,D5</td>
<td>D5</td>
<td>D1,D2,D3,D4</td>
<td>D6</td>
<td>D4</td>
<td>D5,D6</td>
<td>D1,D2,D3</td>
<td>D5</td>
<td>D1,D2,D3,D4</td>
<td>D6</td>
</tr>
<tr>
<td>1</td>
<td></td>
<td>√</td>
<td></td>
<td></td>
<td>√</td>
<td></td>
<td></td>
<td></td>
<td>√</td>
<td></td>
<td>√</td>
<td></td>
</tr>
<tr>
<td>2</td>
<td>√</td>
<td></td>
<td></td>
<td>√</td>
<td></td>
<td></td>
<td>√</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>3</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>√</td>
<td></td>
<td></td>
</tr>
<tr>
<td>4</td>
<td></td>
<td></td>
<td>√</td>
<td></td>
<td></td>
<td>√</td>
<td></td>
<td>√</td>
<td></td>
<td></td>
<td></td>
<td>√</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>用例</th>
<th>13</th>
<th>14</th>
<th>15</th>
<th>16</th>
<th>17</th>
<th>18</th>
<th>19</th>
<th>20</th>
<th>21</th>
<th>22</th>
<th>23</th>
<th>24</th>
</tr>
</thead>
<tbody><tr>
<td>Y</td>
<td>Y2</td>
<td>Y2</td>
<td>Y2</td>
<td>Y2</td>
<td>Y2</td>
<td>Y2</td>
<td>Y2</td>
<td>Y2</td>
<td>Y2</td>
<td>Y2</td>
<td>Y2</td>
<td>Y2</td>
</tr>
<tr>
<td>M</td>
<td>M3</td>
<td>M3</td>
<td>M3</td>
<td>M1</td>
<td>M1</td>
<td>M1</td>
<td>M2</td>
<td>M2</td>
<td>M2</td>
<td>M4</td>
<td>M4</td>
<td>M4</td>
</tr>
<tr>
<td>D</td>
<td>D2</td>
<td>D1</td>
<td>D3,D4,D5</td>
<td>D5</td>
<td>D1,D2,D3,D4</td>
<td>D6</td>
<td>D4</td>
<td>D5,D6</td>
<td>D1,D2,D3</td>
<td>D5</td>
<td>D5</td>
<td>D6</td>
</tr>
<tr>
<td>1</td>
<td></td>
<td>√</td>
<td></td>
<td></td>
<td>√</td>
<td></td>
<td></td>
<td></td>
<td>√</td>
<td></td>
<td>√</td>
<td></td>
</tr>
<tr>
<td>2</td>
<td>√</td>
<td></td>
<td></td>
<td>√</td>
<td></td>
<td></td>
<td>√</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>3</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>√</td>
<td></td>
<td></td>
</tr>
<tr>
<td>4</td>
<td></td>
<td></td>
<td>√</td>
<td></td>
<td></td>
<td>√</td>
<td></td>
<td>√</td>
<td></td>
<td></td>
<td></td>
<td>√</td>
</tr>
</tbody></table>
<p>测试用例如下：</p>
<table>
<thead>
<tr>
<th>用例序号</th>
<th>Y</th>
<th>M</th>
<th>D</th>
<th>预期输出</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>2023</td>
<td>4</td>
<td>1</td>
<td>2023,4,2</td>
</tr>
<tr>
<td>2</td>
<td>2023</td>
<td>3</td>
<td>28</td>
<td>2023,3,29</td>
</tr>
<tr>
<td>3</td>
<td>2023</td>
<td>3</td>
<td>29</td>
<td>2023,3,30</td>
</tr>
<tr>
<td>4</td>
<td>2023</td>
<td>3</td>
<td>30</td>
<td>2023,3,31</td>
</tr>
<tr>
<td>5</td>
<td>2023</td>
<td>3</td>
<td>31</td>
<td>2023,4,1</td>
</tr>
<tr>
<td>6</td>
<td>2023</td>
<td>11</td>
<td>28</td>
<td>2023,11,29</td>
</tr>
<tr>
<td>7</td>
<td>2023</td>
<td>11</td>
<td>29</td>
<td>2023,11,30</td>
</tr>
<tr>
<td>8</td>
<td>2023</td>
<td>11</td>
<td>30</td>
<td>2023,12,1</td>
</tr>
<tr>
<td>9</td>
<td>2023</td>
<td>11</td>
<td>31</td>
<td>错误</td>
</tr>
<tr>
<td>10</td>
<td>2023</td>
<td>2</td>
<td>28</td>
<td>2023,3,1</td>
</tr>
<tr>
<td>11</td>
<td>2023</td>
<td>2</td>
<td>29</td>
<td>错误</td>
</tr>
<tr>
<td>12</td>
<td>2023</td>
<td>2</td>
<td>30</td>
<td>错误</td>
</tr>
<tr>
<td>13</td>
<td>2023</td>
<td>2</td>
<td>31</td>
<td>错误</td>
</tr>
<tr>
<td>14</td>
<td>2020</td>
<td>2</td>
<td>28</td>
<td>2020,2,29</td>
</tr>
<tr>
<td>15</td>
<td>2020</td>
<td>2</td>
<td>29</td>
<td>2020,3,1</td>
</tr>
<tr>
<td>16</td>
<td>2020</td>
<td>2</td>
<td>30</td>
<td>错误</td>
</tr>
<tr>
<td>17</td>
<td>2020</td>
<td>2</td>
<td>31</td>
<td>错误</td>
</tr>
<tr>
<td>18</td>
<td>2020</td>
<td>12</td>
<td>28</td>
<td>2020,12,29</td>
</tr>
<tr>
<td>19</td>
<td>2020</td>
<td>12</td>
<td>29</td>
<td>2020,12,30</td>
</tr>
<tr>
<td>20</td>
<td>2020</td>
<td>12</td>
<td>30</td>
<td>2020,12,31</td>
</tr>
<tr>
<td>21</td>
<td>2020</td>
<td>12</td>
<td>31</td>
<td>2021,1,1</td>
</tr>
</tbody></table>
<hr>
<p>个人觉得以上判定表的设计比较复杂🥺，一般很难想到这么详细，我认为下面的判定表比较容易想到🤡</p>
<table>
<thead>
<tr>
<th></th>
<th>序号</th>
<th>1</th>
<th>2</th>
<th>3</th>
<th>4</th>
<th>5</th>
<th>6</th>
<th>7</th>
<th>8</th>
</tr>
</thead>
<tbody><tr>
<td>条件</td>
<td>正确输入年Y</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
<td>N</td>
<td>N</td>
<td>N</td>
<td>N</td>
</tr>
<tr>
<td>条件</td>
<td>正确输入月M</td>
<td>Y</td>
<td>Y</td>
<td>N</td>
<td>N</td>
<td>Y</td>
<td>Y</td>
<td>N</td>
<td>N</td>
</tr>
<tr>
<td>条件</td>
<td>正确输入日D</td>
<td>Y</td>
<td>N</td>
<td>Y</td>
<td>N</td>
<td>Y</td>
<td>N</td>
<td>Y</td>
<td>N</td>
</tr>
<tr>
<td>动作</td>
<td>函数运行成功</td>
<td>√</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>动作</td>
<td>函数运行失败</td>
<td></td>
<td>√</td>
<td>√</td>
<td>√</td>
<td>√</td>
<td>√</td>
<td>√</td>
<td>√</td>
</tr>
</tbody></table>
<p>测试用例表的话可以模仿参考答案书写✍</p>
<h3 id="第四题"><a href="#第四题" class="headerlink" title="第四题"></a>第四题</h3><p>针对某机构人员管理的业务规则需求：</p>
<p>1）年薪制员工：严重过失，扣年终风险金的4%；过失，扣年终风险金的2%。</p>
<p>2）非年薪制员工：严重过失，扣当月薪资的8%；过失，扣当月薪资的4%。</p>
<p>请绘制出因果图和判定表，并给出相应的测试用例。</p>
<p>答：</p>
<ul>
<li><p>因果分析</p>
<p>原因：</p>
<blockquote>
<p>C1：年薪制员工</p>
<p>C3：严重过失</p>
<p>C3：过失</p>
</blockquote>
<p>结果：</p>
<blockquote>
<p>e1：扣年终风险金的4%</p>
<p>e2：扣年终风险金的2%</p>
<p>e3：扣月薪资的8%</p>
<p>e4：扣月薪资的4%</p>
</blockquote>
</li>
<li><p>因果图设计</p>
<p><img src="https://s2.loli.net/2023/05/31/7xV4hjUMqRTa3ky.png" alt="3HA4ZSM3_6U1BEFKKP_2H5U.png"></p>
</li>
<li><p>判定表设计</p>
<table>
<thead>
<tr>
<th></th>
<th>序号</th>
<th>1</th>
<th>2</th>
<th>3</th>
<th>4</th>
<th>5</th>
<th>6</th>
<th>7</th>
<th>8</th>
</tr>
</thead>
<tbody><tr>
<td>条件</td>
<td>C1：年薪制员工</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>条件</td>
<td>C3：严重过失</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>条件</td>
<td>C3：过失</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
</tr>
<tr>
<td>结果</td>
<td>e1：扣年终风险金的4%</td>
<td></td>
<td>√</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>结果</td>
<td>e2：扣年终风险金的2%</td>
<td></td>
<td></td>
<td>√</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>结果</td>
<td>e3：扣月薪资的8%</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>√</td>
<td></td>
<td></td>
</tr>
<tr>
<td>结果</td>
<td>e4：扣月薪资的4%</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>√</td>
<td></td>
</tr>
<tr>
<td>结果</td>
<td>不操作</td>
<td></td>
<td></td>
<td></td>
<td>√</td>
<td></td>
<td></td>
<td></td>
<td>√</td>
</tr>
<tr>
<td>结果</td>
<td>不可能</td>
<td>√</td>
<td></td>
<td></td>
<td></td>
<td>√</td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
</li>
<li><p>有效等价类测试用例</p>
<table>
<thead>
<tr>
<th>用例</th>
<th>输入数据</th>
<th>预期输出</th>
</tr>
</thead>
<tbody><tr>
<td>TC1</td>
<td>年薪制员工，严重过失</td>
<td>扣年终风险金的4%</td>
</tr>
<tr>
<td>TC2</td>
<td>年薪制员工，过失</td>
<td>扣年终风险金的2%</td>
</tr>
<tr>
<td>TC3</td>
<td>非年薪制员工，严重过失</td>
<td>扣月薪资的8%</td>
</tr>
<tr>
<td>TC4</td>
<td>非年薪制员工，过失</td>
<td>扣月薪资的4%</td>
</tr>
</tbody></table>
</li>
</ul>
<h3 id="第五题"><a href="#第五题" class="headerlink" title="第五题"></a>第五题</h3><p>测试一个登录页面在不同浏览器和语言下的功能正确性，其输入条件如下:</p>
<p>1）输入项（账号、密码）</p>
<p>2）浏览器（IE、chrome、FireFox、360）</p>
<p>3）语言（中文、英文）</p>
<p>请问进行完整组合的兼容性测试需要多少个测试用例？采用成对组合的兼容性测试需要多少个测试用例？给出成对组合测试用例表。</p>
<p>答：</p>
<p>完整组合测试有2x2X4x2&#x3D;32 个，成对组合测试需要8个测试用例</p>
<p>成对组合测试用例表</p>
<table>
<thead>
<tr>
<th>用例</th>
<th>账号</th>
<th>密码</th>
<th>浏览器</th>
<th>语言</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>空值</td>
<td>空值</td>
<td>IE</td>
<td>中文</td>
</tr>
<tr>
<td>2</td>
<td>空值</td>
<td>有值</td>
<td>chrome</td>
<td>英文</td>
</tr>
<tr>
<td>3</td>
<td>有值</td>
<td>空值</td>
<td>FireFox</td>
<td>中文</td>
</tr>
<tr>
<td>4</td>
<td>有值</td>
<td>有值</td>
<td>360</td>
<td>英文</td>
</tr>
<tr>
<td>5</td>
<td>空值</td>
<td>空值</td>
<td>360</td>
<td>中文</td>
</tr>
<tr>
<td>6</td>
<td>空值</td>
<td>有值</td>
<td>FireFox</td>
<td>英文</td>
</tr>
<tr>
<td>7</td>
<td>有值</td>
<td>空值</td>
<td>chrome</td>
<td>中文</td>
</tr>
<tr>
<td>8</td>
<td>有值</td>
<td>有值</td>
<td>IE</td>
<td>英文</td>
</tr>
</tbody></table>
<p><em><strong>以上内容来自老师提供的原版答案，如有错误，欢迎批评指正</strong></em>😆</p>
]]></content>
      <categories>
        <category>大二下期末复习</category>
      </categories>
      <tags>
        <tag>软件测试</tag>
      </tags>
  </entry>
  <entry>
    <title>数组&amp;切片&amp;集合&amp;字符串</title>
    <url>/2023/06/03/Go/7/</url>
    <content><![CDATA[<h1 id="数组-Array"><a href="#数组-Array" class="headerlink" title="数组(Array)"></a>数组(Array)</h1><h2 id="什么是数组"><a href="#什么是数组" class="headerlink" title="什么是数组"></a>什么是数组</h2><p>Go 语言提供了数组类型的数据结构。<br>数组是具有相同唯一类型的一组已编号且长度固定的数据项序列，这种类型可以是任意的原始类型例如整形、字符串或者自定义类型。</p>
<p>数组元素可以通过索引（位置）来读取（或者修改），索引从0开始，第一个元素索引为 0，第二个索引为 1，以此类推。数组的下标取值范围是从0开始，到长度减1。</p>
<p>数组一旦定义后，大小不能更改。</p>
<h2 id="数组的语法"><a href="#数组的语法" class="headerlink" title="数组的语法"></a>数组的语法</h2><p><strong>声明和初始化数组</strong></p>
<p>需要指明数组的大小和存储的数据类型。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> variable_name [SIZE] variable_type</span><br></pre></td></tr></table></figure>

<p>示例代码：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> balance [<span class="number">10</span>] <span class="type">float32</span></span><br><span class="line"><span class="keyword">var</span> balance = [<span class="number">5</span>]<span class="type">float32</span>&#123;<span class="number">1000.0</span>, <span class="number">2.0</span>, <span class="number">3.4</span>, <span class="number">7.0</span>, <span class="number">50.0</span>&#125;</span><br></pre></td></tr></table></figure>

<p>初始化数组中 {} 中的元素个数不能大于 [] 中的数字。<br>如果忽略 [] 中的数字不设置数组大小，Go 语言会根据元素的个数来设置数组的大小：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> balance = []<span class="type">float32</span>&#123;<span class="number">1000.0</span>, <span class="number">2.0</span>, <span class="number">3.4</span>, <span class="number">7.0</span>, <span class="number">50.0</span>&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">balance[<span class="number">4</span>] = <span class="number">50.0</span></span><br></pre></td></tr></table></figure>

<p>数组的其他创建方式：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a [<span class="number">4</span>] <span class="type">float32</span> <span class="comment">// 等价于：var arr2 = [4]float32&#123;&#125;</span></span><br><span class="line">fmt.Println(a) <span class="comment">// [0 0 0 0]</span></span><br><span class="line"><span class="keyword">var</span> b = [<span class="number">5</span>] <span class="type">string</span>&#123;<span class="string">&quot;ruby&quot;</span>, <span class="string">&quot;王二狗&quot;</span>, <span class="string">&quot;rose&quot;</span>&#125;</span><br><span class="line">fmt.Println(b) <span class="comment">// [ruby 王二狗 rose  ]</span></span><br><span class="line"><span class="keyword">var</span> c = [<span class="number">5</span>] <span class="type">int</span>&#123;<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;E&#x27;</span>&#125; <span class="comment">// byte</span></span><br><span class="line">fmt.Println(c) <span class="comment">// [65 66 67 68 69]</span></span><br><span class="line">d := [...] <span class="type">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;<span class="comment">// 根据元素的个数，设置数组的大小</span></span><br><span class="line">fmt.Println(d)<span class="comment">//[1 2 3 4 5]</span></span><br><span class="line">e := [<span class="number">5</span>] <span class="type">int</span>&#123;<span class="number">4</span>: <span class="number">100</span>&#125; <span class="comment">// [0 0 0 0 100]</span></span><br><span class="line">fmt.Println(e)</span><br><span class="line">f := [...] <span class="type">int</span>&#123;<span class="number">0</span>: <span class="number">1</span>, <span class="number">4</span>: <span class="number">1</span>, <span class="number">9</span>: <span class="number">1</span>&#125; <span class="comment">// [1 0 0 0 1 0 0 0 0 1]</span></span><br><span class="line">fmt.Println(f)</span><br></pre></td></tr></table></figure>

<p>解释：</p>
<p><code>0: 1</code> 表示将索引为 0 的位置的元素初始化为 1，<code>4: 1</code> 表示将索引为 4 的位置的元素初始化为 1，<code>9: 1</code> 表示将索引为 9 的位置的元素初始化为 1。其余位置的元素将使用默认值进行初始化，对于整数数组，默认值为 0。</p>
<p><strong>访问数组元素</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="type">float32</span> salary = balance[<span class="number">9</span>]</span><br></pre></td></tr></table></figure>

<p>示例代码：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="keyword">var</span> n [<span class="number">10</span>]<span class="type">int</span> <span class="comment">/* n 是一个长度为 10 的数组 */</span></span><br><span class="line">   <span class="keyword">var</span> i,j <span class="type">int</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">/* 为数组 n 初始化元素 */</span>         </span><br><span class="line">   <span class="keyword">for</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">      n[i] = i + <span class="number">100</span> <span class="comment">/* 设置元素为 i + 100 */</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* 输出每个数组元素的值 */</span></span><br><span class="line">   <span class="keyword">for</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++ &#123;</span><br><span class="line">      fmt.Printf(<span class="string">&quot;Element[%d] = %d\n&quot;</span>, j, n[j] )</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">Element[<span class="number">0</span>] = <span class="number">100</span></span><br><span class="line">Element[<span class="number">1</span>] = <span class="number">101</span></span><br><span class="line">Element[<span class="number">2</span>] = <span class="number">102</span></span><br><span class="line">Element[<span class="number">3</span>] = <span class="number">103</span></span><br><span class="line">Element[<span class="number">4</span>] = <span class="number">104</span></span><br><span class="line">Element[<span class="number">5</span>] = <span class="number">105</span></span><br><span class="line">Element[<span class="number">6</span>] = <span class="number">106</span></span><br><span class="line">Element[<span class="number">7</span>] = <span class="number">107</span></span><br><span class="line">Element[<span class="number">8</span>] = <span class="number">108</span></span><br><span class="line">Element[<span class="number">9</span>] = <span class="number">109</span></span><br></pre></td></tr></table></figure>

<p><strong>数组的长度</strong></p>
<p>通过将数组作为参数传递给len函数，可以获得数组的长度。</p>
<p>示例代码：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;  </span><br><span class="line">    a := [...]<span class="type">float64</span>&#123;<span class="number">67.7</span>, <span class="number">89.8</span>, <span class="number">21</span>, <span class="number">78</span>&#125;</span><br><span class="line">    fmt.Println(<span class="string">&quot;length of a is&quot;</span>,<span class="built_in">len</span>(a))</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">length of a is 4</span><br></pre></td></tr></table></figure>

<p>您甚至可以忽略声明中数组的长度并将其替换为…让编译器为你找到长度。这是在下面的程序中完成的。</p>
<p>示例代码：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (  </span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;  </span><br><span class="line">    a := [...]<span class="type">int</span>&#123;<span class="number">12</span>, <span class="number">78</span>, <span class="number">50</span>&#125; <span class="comment">// ... makes the compiler determine the length</span></span><br><span class="line">    fmt.Println(a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[12 78 50]</span><br></pre></td></tr></table></figure>

<p>遍历数组：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;  </span><br><span class="line">    a := [...]<span class="type">float64</span>&#123;<span class="number">67.7</span>, <span class="number">89.8</span>, <span class="number">21</span>, <span class="number">78</span>&#125;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(a); i++ &#123; <span class="comment">//looping from 0 to the length of the array</span></span><br><span class="line">        fmt.Printf(<span class="string">&quot;%d th element of a is %.2f\n&quot;</span>, i, a[i])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0 th element of a is 67.70</span><br><span class="line">1 th element of a is 89.80</span><br><span class="line">2 th element of a is 21.00</span><br><span class="line">3 th element of a is 78.00</span><br></pre></td></tr></table></figure>

<p>使用range遍历数组：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;  </span><br><span class="line">    a := [...]<span class="type">float64</span>&#123;<span class="number">67.7</span>, <span class="number">89.8</span>, <span class="number">21</span>, <span class="number">78</span>&#125;</span><br><span class="line">    sum := <span class="type">float64</span>(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">for</span> i, v := <span class="keyword">range</span> a &#123;<span class="comment">//range returns both the index and value</span></span><br><span class="line">        fmt.Printf(<span class="string">&quot;%d the element of a is %.2f\n&quot;</span>, i, v)</span><br><span class="line">        sum += v</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(<span class="string">&quot;\nsum of all elements of a&quot;</span>,sum)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0 the element of a is 67.70</span><br><span class="line">1 the element of a is 89.80</span><br><span class="line">2 the element of a is 21.00</span><br><span class="line">3 the element of a is 78.00</span><br><span class="line"></span><br><span class="line">sum of all elements of a 256.5</span><br></pre></td></tr></table></figure>

<p>如果您只需要值并希望忽略索引，那么可以通过使用_ blank标识符替换索引来实现这一点。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> a &#123; <span class="comment">//ignores index  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h2><p>Go 语言支持多维数组，以下为常用的多维数组声明语法方式：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> variable_name [SIZE1][SIZE2]...[SIZEN] variable_type</span><br></pre></td></tr></table></figure>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> threedim [<span class="number">5</span>][<span class="number">10</span>][<span class="number">4</span>]<span class="type">int</span></span><br></pre></td></tr></table></figure>

<p>三维数组</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">3</span>][<span class="number">4</span>]<span class="type">int</span>&#123;  </span><br><span class="line"> &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125; ,   <span class="comment">/*  第一行索引为 0 */</span></span><br><span class="line"> &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>&#125; ,   <span class="comment">/*  第二行索引为 1 */</span></span><br><span class="line"> &#123;<span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>&#125;   <span class="comment">/*  第三行索引为 2 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> twoD [<span class="number">2</span>][<span class="number">3</span>]<span class="type">int</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">2</span>; i++ &#123;</span><br><span class="line">		<span class="keyword">for</span> j := <span class="number">0</span>; j &lt; <span class="number">3</span>; j++ &#123;</span><br><span class="line">			twoD[i][j] = i + j</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(<span class="string">&quot;2d: &quot;</span>, twoD)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2d:  [[0 1 2] [1 2 3]]</span><br></pre></td></tr></table></figure>

<h2 id="数组是值类型"><a href="#数组是值类型" class="headerlink" title="数组是值类型"></a>数组是值类型</h2><p>Go中的数组是值类型，而不是引用类型。这意味着当它们被分配给一个新变量时，将把原始数组的副本分配给新变量。如果对新变量进行了更改，则不会在原始数组中反映。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;  </span><br><span class="line">    a := [...]<span class="type">string</span>&#123;<span class="string">&quot;USA&quot;</span>, <span class="string">&quot;China&quot;</span>, <span class="string">&quot;India&quot;</span>, <span class="string">&quot;Germany&quot;</span>, <span class="string">&quot;France&quot;</span>&#125;</span><br><span class="line">    b := a <span class="comment">// a copy of a is assigned to b</span></span><br><span class="line">    b[<span class="number">0</span>] = <span class="string">&quot;Singapore&quot;</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;a is &quot;</span>, a)</span><br><span class="line">    fmt.Println(<span class="string">&quot;b is &quot;</span>, b) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a is [USA China India Germany France]  </span><br><span class="line">b is [Singapore China India Germany France] </span><br></pre></td></tr></table></figure>

<p>数组的大小是类型的一部分。因此[5]int和[25]int是不同的类型。因此，数组不能被调整大小。不要担心这个限制，因为切片的存在是为了解决这个问题。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;  </span><br><span class="line">    a := [<span class="number">3</span>]<span class="type">int</span>&#123;<span class="number">5</span>, <span class="number">78</span>, <span class="number">8</span>&#125;</span><br><span class="line">    <span class="keyword">var</span> b [<span class="number">5</span>]<span class="type">int</span></span><br><span class="line">    b = a <span class="comment">//not possible since [3]int and [5]int are distinct types</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="切片-Slice"><a href="#切片-Slice" class="headerlink" title="切片(Slice)"></a>切片(Slice)</h1><h2 id="什么是切片"><a href="#什么是切片" class="headerlink" title="什么是切片"></a>什么是切片</h2><p><em><strong>Go 语言切片是对数组的抽象</strong></em>。<br>Go 数组的长度不可改变，在特定场景中这样的集合就不太适用，Go中提供了一种灵活，功能强悍的内置类型切片(“动态数组”),与数组相比切片的长度是不固定的，可以追加元素，在追加时可能使切片的容量增大<br>切片是一种方便、灵活且强大的包装器。切片本身没有任何数据。它们只是对现有数组的引用。<br>切片与数组相比，不需要设定长度，在[]中不用设定值，相对来说比较自由<br>从概念上面来说slice像一个结构体，这个结构体包含了三个元素： </p>
<blockquote>
<ol>
<li>指针，指向数组中slice指定的开始位置</li>
<li>长度，即slice的长度</li>
<li>最大长度，也就是slice开始位置到数组的最后位置的长度</li>
</ol>
</blockquote>
<h2 id="切片的语法"><a href="#切片的语法" class="headerlink" title="切片的语法"></a>切片的语法</h2><p><strong>定义切片</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> identifier []<span class="keyword">type</span></span><br></pre></td></tr></table></figure>

<p>切片不需要说明长度。<br>或使用make()函数来创建切片:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> slice1 []<span class="keyword">type</span> = <span class="built_in">make</span>([]<span class="keyword">type</span>, <span class="built_in">len</span>)</span><br><span class="line"><span class="comment">//也可以简写为</span></span><br><span class="line">slice1 := <span class="built_in">make</span>([]<span class="keyword">type</span>, <span class="built_in">len</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="built_in">make</span>([]T, length, capacity)</span><br></pre></td></tr></table></figure>

<p><strong>初始化</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">s[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">s[<span class="number">1</span>] = <span class="number">2</span></span><br><span class="line">s[<span class="number">2</span>] = <span class="number">3</span></span><br></pre></td></tr></table></figure>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">s :=[] <span class="type">int</span> &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span> &#125; </span><br></pre></td></tr></table></figure>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">s := arr[startIndex:endIndex] </span><br></pre></td></tr></table></figure>

<p>将arr中从下标startIndex到endIndex-1 下的元素创建为一个新的切片（<strong>前闭后开</strong>），长度为endIndex-startIndex</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">s := arr[startIndex:] </span><br></pre></td></tr></table></figure>

<p>缺省endIndex时将表示一直到arr的最后一个元素</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">s := arr[:endIndex] </span><br></pre></td></tr></table></figure>

<p>缺省startIndex时将表示从arr的第一个元素开始</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (  </span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;  </span><br><span class="line">    a := [<span class="number">5</span>]<span class="type">int</span>&#123;<span class="number">76</span>, <span class="number">77</span>, <span class="number">78</span>, <span class="number">79</span>, <span class="number">80</span>&#125;</span><br><span class="line">    <span class="keyword">var</span> b []<span class="type">int</span> = a[<span class="number">1</span>:<span class="number">4</span>] <span class="comment">//creates a slice from a[1] to a[3]</span></span><br><span class="line">    fmt.Println(b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="修改切片"><a href="#修改切片" class="headerlink" title="修改切片"></a>修改切片</h2><p>slice没有自己的任何数据。它只是底层数组的一个表示。对slice所做的任何修改都将反映在底层数组中。</p>
<p>示例代码：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (  </span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;  </span><br><span class="line">    darr := [...]<span class="type">int</span>&#123;<span class="number">57</span>, <span class="number">89</span>, <span class="number">90</span>, <span class="number">82</span>, <span class="number">100</span>, <span class="number">78</span>, <span class="number">67</span>, <span class="number">69</span>, <span class="number">59</span>&#125;</span><br><span class="line">    dslice := darr[<span class="number">2</span>:<span class="number">5</span>]</span><br><span class="line">    fmt.Println(<span class="string">&quot;array before&quot;</span>,darr)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="keyword">range</span> dslice &#123;</span><br><span class="line">        dslice[i]++</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(<span class="string">&quot;array after&quot;</span>,darr) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这段代码中，<code>range</code> 遍历 <code>dslice</code> 时返回的是索引，而不是值。切片是对数组的引用，因此<em><strong>修改切片的值也会影响到原始数组</strong></em>。</p>
<p>运行结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">array before [57 89 90 82 100 78 67 69 59]  </span><br><span class="line">array after [57 89 91 83 101 78 67 69 59]  </span><br></pre></td></tr></table></figure>

<p>当多个片共享相同的底层数组时，每个元素所做的更改将在数组中反映出来。</p>
<p>示例代码：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (  </span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;  </span><br><span class="line">    numa := [<span class="number">3</span>]<span class="type">int</span>&#123;<span class="number">78</span>, <span class="number">79</span> ,<span class="number">80</span>&#125;</span><br><span class="line">    nums1 := numa[:] <span class="comment">//creates a slice which contains all elements of the array</span></span><br><span class="line">    nums2 := numa[:]</span><br><span class="line">    fmt.Println(<span class="string">&quot;array before change 1&quot;</span>,numa)</span><br><span class="line">    nums1[<span class="number">0</span>] = <span class="number">100</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;array after modification to slice nums1&quot;</span>, numa)</span><br><span class="line">    nums2[<span class="number">1</span>] = <span class="number">101</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;array after modification to slice nums2&quot;</span>, numa)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">array before change 1 [78 79 80]  </span><br><span class="line">array after modification to slice nums1 [100 79 80]  </span><br><span class="line">array after modification to slice nums2 [100 101 80]  </span><br></pre></td></tr></table></figure>

<h2 id="len-和-cap"><a href="#len-和-cap" class="headerlink" title="len() 和 cap()"></a>len() 和 cap()</h2><p>切片的长度是切片中元素的数量。切片的容量是从创建切片的索引开始的底层数组中元素的数量。</p>
<p>切片是可索引的，并且可以由 len() 方法获取长度<br>切片提供了计算容量的方法 cap() 可以测量切片最长可以达到多少</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="keyword">var</span> numbers = <span class="built_in">make</span>([]<span class="type">int</span>,<span class="number">3</span>,<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">   printSlice(numbers)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printSlice</span><span class="params">(x []<span class="type">int</span>)</span></span>&#123;</span><br><span class="line">   fmt.Printf(<span class="string">&quot;len=%d cap=%d slice=%v\n&quot;</span>,<span class="built_in">len</span>(x),<span class="built_in">cap</span>(x),x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>make([]int, 3, 5)</code> 创建了一个切片 <code>numbers</code>，长度为 3，容量为 5。<code>make</code> 函数用于创建切片、映射和通道，并指定它们的长度和容量。</p>
<p>运行结果:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="built_in">len</span>=<span class="number">3</span> <span class="built_in">cap</span>=<span class="number">5</span> slice=[<span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]</span><br></pre></td></tr></table></figure>

<p><strong>空切片</strong></p>
<p>一个切片在未初始化之前默认为 nil，长度为 0</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="keyword">var</span> numbers []<span class="type">int</span></span><br><span class="line"></span><br><span class="line">   printSlice(numbers)</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span>(numbers == <span class="literal">nil</span>)&#123;</span><br><span class="line">      fmt.Printf(<span class="string">&quot;切片是空的&quot;</span>)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printSlice</span><span class="params">(x []<span class="type">int</span>)</span></span>&#123;</span><br><span class="line">   fmt.Printf(<span class="string">&quot;len=%d cap=%d slice=%v\n&quot;</span>,<span class="built_in">len</span>(x),<span class="built_in">cap</span>(x),x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">len=0 cap=0 slice=[]</span><br><span class="line">切片是空的</span><br></pre></td></tr></table></figure>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="comment">/* 创建切片 */</span></span><br><span class="line">   numbers := []<span class="type">int</span>&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;   </span><br><span class="line">   printSlice(numbers)</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* 打印原始切片 */</span></span><br><span class="line">   fmt.Println(<span class="string">&quot;numbers ==&quot;</span>, numbers)</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* 打印子切片从索引1(包含) 到索引4(不包含)*/</span></span><br><span class="line">   fmt.Println(<span class="string">&quot;numbers[1:4] ==&quot;</span>, numbers[<span class="number">1</span>:<span class="number">4</span>])</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* 默认下限为 0*/</span></span><br><span class="line">   fmt.Println(<span class="string">&quot;numbers[:3] ==&quot;</span>, numbers[:<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* 默认上限为 len(s)*/</span></span><br><span class="line">   fmt.Println(<span class="string">&quot;numbers[4:] ==&quot;</span>, numbers[<span class="number">4</span>:])</span><br><span class="line"></span><br><span class="line">   numbers1 := <span class="built_in">make</span>([]<span class="type">int</span>,<span class="number">0</span>,<span class="number">5</span>)</span><br><span class="line">   printSlice(numbers1)</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* 打印子切片从索引  0(包含) 到索引 2(不包含) */</span></span><br><span class="line">   number2 := numbers[:<span class="number">2</span>]</span><br><span class="line">   printSlice(number2)</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* 打印子切片从索引 2(包含) 到索引 5(不包含) */</span></span><br><span class="line">   number3 := numbers[<span class="number">2</span>:<span class="number">5</span>]</span><br><span class="line">   printSlice(number3)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printSlice</span><span class="params">(x []<span class="type">int</span>)</span></span>&#123;</span><br><span class="line">   fmt.Printf(<span class="string">&quot;len=%d cap=%d slice=%v\n&quot;</span>,<span class="built_in">len</span>(x),<span class="built_in">cap</span>(x),x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="built_in">len</span>=<span class="number">9</span> <span class="built_in">cap</span>=<span class="number">9</span> slice=[<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span>]</span><br><span class="line">numbers == [<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span>]</span><br><span class="line">numbers[<span class="number">1</span>:<span class="number">4</span>] == [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span><br><span class="line">numbers[:<span class="number">3</span>] == [<span class="number">0</span> <span class="number">1</span> <span class="number">2</span>]</span><br><span class="line">numbers[<span class="number">4</span>:] == [<span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span>]</span><br><span class="line"><span class="built_in">len</span>=<span class="number">0</span> <span class="built_in">cap</span>=<span class="number">5</span> slice=[]</span><br><span class="line"><span class="built_in">len</span>=<span class="number">2</span> <span class="built_in">cap</span>=<span class="number">9</span> slice=[<span class="number">0</span> <span class="number">1</span>]</span><br><span class="line"><span class="built_in">len</span>=<span class="number">3</span> <span class="built_in">cap</span>=<span class="number">7</span> slice=[<span class="number">2</span> <span class="number">3</span> <span class="number">4</span>]</span><br></pre></td></tr></table></figure>

<p>解释：</p>
<p>切片的容量（<code>cap</code>）是指切片的底层数组中从切片的起始位置到数组末尾的元素数量。在这个例子中，切片 <code>numbers</code> 的容量与底层数组的容量相同，都是 9。这是因为我们没有指定切片的容量，Go语言会默认将切片的容量设置为底层数组中剩余的元素数量。<code>number2</code> 的容量是从切片的起始位置到底层数组的末尾，即剩余的元素数量。<code>number2</code> 的容量是 9，与底层数组的容量相同。<code>number3</code> 的容量是 7，因为从索引 2 开始，底层数组中还有 7 个元素。</p>
<h2 id="append-和-copy"><a href="#append-和-copy" class="headerlink" title="append() 和 copy()"></a>append() 和 copy()</h2><p>append 向slice里面追加一个或者多个元素，然后返回一个和slice一样类型的slice<br>copy 函数copy从源slice的src中复制元素到目标dst，并且返回复制的元素的个数</p>
<p>append函数会改变slice所引用的数组的内容，从而影响到引用同一数组的其它slice。 但当slice中没有剩余空间（即(cap-len) &#x3D;&#x3D; 0）时，此时将动态分配新的数组空间。返回的slice数组指针将指向这个空间，而原数组的内容将保持不变；其它引用此数组的slice则不受影响</p>
<p>下面的代码描述了从拷贝切片的 copy 方法和向切片追加新元素的 append 方法</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="keyword">var</span> numbers []<span class="type">int</span></span><br><span class="line">   printSlice(numbers)</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* 允许追加空切片 */</span></span><br><span class="line">   numbers = <span class="built_in">append</span>(numbers, <span class="number">0</span>)</span><br><span class="line">   printSlice(numbers)</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* 向切片添加一个元素 */</span></span><br><span class="line">   numbers = <span class="built_in">append</span>(numbers, <span class="number">1</span>)</span><br><span class="line">   printSlice(numbers)</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* 同时添加多个元素 */</span></span><br><span class="line">   numbers = <span class="built_in">append</span>(numbers, <span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">   printSlice(numbers)</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* 创建切片 numbers1 是之前切片的两倍容量*/</span></span><br><span class="line">   numbers1 := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="built_in">len</span>(numbers), (<span class="built_in">cap</span>(numbers))*<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* 拷贝 numbers 的内容到 numbers1 */</span></span><br><span class="line">   <span class="built_in">copy</span>(numbers1,numbers)</span><br><span class="line">   printSlice(numbers1)   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printSlice</span><span class="params">(x []<span class="type">int</span>)</span></span>&#123;</span><br><span class="line">   fmt.Printf(<span class="string">&quot;len=%d cap=%d slice=%v\n&quot;</span>,<span class="built_in">len</span>(x),<span class="built_in">cap</span>(x),x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">len=0 cap=0 slice=[]</span><br><span class="line">len=1 cap=1 slice=[0]</span><br><span class="line">len=2 cap=2 slice=[0 1]</span><br><span class="line">len=5 cap=6 slice=[0 1 2 3 4]</span><br><span class="line">len=5 cap=12 slice=[0 1 2 3 4]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>numbers容量为6是因为在分配底层数组时，系统会根据策略进行内存分配，通常是分配比所需容量稍微多一点的容量。所以，在这个例子中，底层数组的容量被分配为了6。</p>
<p>numbers1与numbers两者不存在联系，numbers发生变化时，numbers1是不会随着变化的。也就是说copy方法是不会建立两个切片的联系的</p>
</blockquote>
<h1 id="集合-Map"><a href="#集合-Map" class="headerlink" title="集合(Map)"></a>集合(Map)</h1><h2 id="什么是Map"><a href="#什么是Map" class="headerlink" title="什么是Map"></a>什么是Map</h2><p>map是Go中的内置类型，它将一个值与一个键关联起来。可以使用相应的键检索值。</p>
<p>Map 是一种无序的键值对的集合。Map 最重要的一点是通过 key 来快速检索数据，key 类似于索引，指向数据的值<br>Map 是一种集合，所以我们可以像迭代数组和切片那样迭代它。不过，Map 是无序的，我们无法决定它的返回顺序，这是因为 Map 是使用 hash 表来实现的，也是引用类型</p>
<p>使用map过程中需要注意的几点： </p>
<ul>
<li>map是无序的，每次打印出来的map都会不一样，它不能通过index获取，而必须通过key获取</li>
<li>map的长度是不固定的，也就是和slice一样，也是一种引用类型</li>
<li>内置的len函数同样适用于map，返回map拥有的key的数量 </li>
<li>map的key可以是所有可比较的类型，如布尔型、整数型、浮点型、复杂型、字符串型……也可以键。</li>
</ul>
<h2 id="Map的使用"><a href="#Map的使用" class="headerlink" title="Map的使用"></a>Map的使用</h2><h3 id="使用make-创建map"><a href="#使用make-创建map" class="headerlink" title="使用make()创建map"></a>使用make()创建map</h3><p>可以使用内建函数 make 也可以使用 map 关键字来定义 Map:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 声明变量，默认 map 是 nil */</span></span><br><span class="line"><span class="keyword">var</span> map_variable <span class="keyword">map</span>[key_data_type]value_data_type</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 使用 make 函数 */</span></span><br><span class="line">map_variable = <span class="built_in">make</span>(<span class="keyword">map</span>[key_data_type]value_data_type)</span><br></pre></td></tr></table></figure>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">rating := <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">float32</span> &#123;<span class="string">&quot;C&quot;</span>:<span class="number">5</span>, <span class="string">&quot;Go&quot;</span>:<span class="number">4.5</span>, <span class="string">&quot;Python&quot;</span>:<span class="number">4.5</span>, <span class="string">&quot;C++&quot;</span>:<span class="number">2</span> &#125;</span><br></pre></td></tr></table></figure>

<p>如果不初始化 map，那么就会创建一个 nil map。nil map 不能用来存放键值对</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="keyword">var</span> countryCapitalMap <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span></span><br><span class="line">   <span class="comment">/* 创建集合 */</span></span><br><span class="line">   countryCapitalMap = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>)</span><br><span class="line">   </span><br><span class="line">   <span class="comment">/* map 插入 key-value 对，各个国家对应的首都 */</span></span><br><span class="line">   countryCapitalMap[<span class="string">&quot;France&quot;</span>] = <span class="string">&quot;Paris&quot;</span></span><br><span class="line">   countryCapitalMap[<span class="string">&quot;Italy&quot;</span>] = <span class="string">&quot;Rome&quot;</span></span><br><span class="line">   countryCapitalMap[<span class="string">&quot;Japan&quot;</span>] = <span class="string">&quot;Tokyo&quot;</span></span><br><span class="line">   countryCapitalMap[<span class="string">&quot;India&quot;</span>] = <span class="string">&quot;New Delhi&quot;</span></span><br><span class="line">   </span><br><span class="line">   <span class="comment">/* 使用 key 输出 map 值 */</span></span><br><span class="line">   <span class="keyword">for</span> country := <span class="keyword">range</span> countryCapitalMap &#123;</span><br><span class="line">      fmt.Println(<span class="string">&quot;Capital of&quot;</span>,country,<span class="string">&quot;is&quot;</span>,countryCapitalMap[country])</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">/* 查看元素在集合中是否存在 */</span></span><br><span class="line">   captial, ok := countryCapitalMap[<span class="string">&quot;United States&quot;</span>]</span><br><span class="line">   <span class="comment">/* 如果 ok 是 true, 则存在，否则不存在 */</span></span><br><span class="line">   <span class="keyword">if</span>(ok)&#123;</span><br><span class="line">      fmt.Println(<span class="string">&quot;Capital of United States is&quot;</span>, captial)  </span><br><span class="line">   &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">      fmt.Println(<span class="string">&quot;Capital of United States is not present&quot;</span>) </span><br><span class="line">   &#125;</span><br><span class="line">    </span><br><span class="line">    m := <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>&#123;<span class="string">&quot;a&quot;</span>: <span class="string">&quot;A&quot;</span>, <span class="string">&quot;b&quot;</span>: <span class="string">&quot;B&quot;</span>&#125;</span><br><span class="line">	<span class="keyword">for</span> k, v := <span class="keyword">range</span> m &#123;</span><br><span class="line">		fmt.Println(k, v) <span class="comment">// b 8; a A</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> k := <span class="keyword">range</span> m &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;key&quot;</span>, k) <span class="comment">// key a; key b</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">Capital of France is Paris</span><br><span class="line">Capital of Italy is Rome</span><br><span class="line">Capital of Japan is Tokyo</span><br><span class="line">Capital of India is New Delhi</span><br><span class="line">Capital of United States is not present</span><br><span class="line">a A</span><br><span class="line">b B</span><br><span class="line">key a</span><br><span class="line">key b</span><br></pre></td></tr></table></figure>

<h3 id="delete-函数"><a href="#delete-函数" class="headerlink" title="delete() 函数"></a>delete() 函数</h3><p>delete(map, key) 函数用于删除集合的元素, 参数为 map 和其对应的 key。删除函数不返回任何值。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;   </span><br><span class="line">   <span class="comment">/* 创建 map */</span></span><br><span class="line">   countryCapitalMap := <span class="keyword">map</span>[<span class="type">string</span>] <span class="type">string</span> &#123;<span class="string">&quot;France&quot;</span>:<span class="string">&quot;Paris&quot;</span>,<span class="string">&quot;Italy&quot;</span>:<span class="string">&quot;Rome&quot;</span>,<span class="string">&quot;Japan&quot;</span>:<span class="string">&quot;Tokyo&quot;</span>,<span class="string">&quot;India&quot;</span>:<span class="string">&quot;New Delhi&quot;</span>&#125;</span><br><span class="line">   </span><br><span class="line">   fmt.Println(<span class="string">&quot;原始 map&quot;</span>)   </span><br><span class="line">   </span><br><span class="line">   <span class="comment">/* 打印 map */</span></span><br><span class="line">   <span class="keyword">for</span> country := <span class="keyword">range</span> countryCapitalMap &#123;</span><br><span class="line">      fmt.Println(<span class="string">&quot;Capital of&quot;</span>,country,<span class="string">&quot;is&quot;</span>,countryCapitalMap[country])</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">/* 删除元素 */</span></span><br><span class="line">   <span class="built_in">delete</span>(countryCapitalMap,<span class="string">&quot;France&quot;</span>);</span><br><span class="line">   fmt.Println(<span class="string">&quot;Entry for France is deleted&quot;</span>)  </span><br><span class="line">   </span><br><span class="line">   fmt.Println(<span class="string">&quot;删除元素后 map&quot;</span>)   </span><br><span class="line">   </span><br><span class="line">   <span class="comment">/* 打印 map */</span></span><br><span class="line">   <span class="keyword">for</span> country := <span class="keyword">range</span> countryCapitalMap &#123;</span><br><span class="line">      fmt.Println(<span class="string">&quot;Capital of&quot;</span>,country,<span class="string">&quot;is&quot;</span>,countryCapitalMap[country])</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">原始 map</span><br><span class="line">Capital of France is Paris</span><br><span class="line">Capital of Italy is Rome</span><br><span class="line">Capital of Japan is Tokyo</span><br><span class="line">Capital of India is New Delhi</span><br><span class="line">Entry for France is deleted</span><br><span class="line">删除元素后 map</span><br><span class="line">Capital of Italy is Rome</span><br><span class="line">Capital of Japan is Tokyo</span><br><span class="line">Capital of India is New Delhi</span><br></pre></td></tr></table></figure>

<h3 id="ok-idiom"><a href="#ok-idiom" class="headerlink" title="ok-idiom"></a>ok-idiom</h3><p>我们可以通过key获取map中对应的value值。语法为：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">map</span>[key] </span><br></pre></td></tr></table></figure>

<p>但是当key如果不存在的时候，我们会得到该value值类型的默认值，比如string类型得到空字符串，int类型得到0。但是程序不会报错。</p>
<p>所以我们可以使用ok-idiom获取值，可知道key&#x2F;value是否存在</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">value, ok := <span class="keyword">map</span>[key] </span><br></pre></td></tr></table></figure>

<p>示例代码：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>)</span><br><span class="line">	m[<span class="string">&quot;a&quot;</span>] = <span class="number">1</span></span><br><span class="line">	x, ok := m[<span class="string">&quot;b&quot;</span>]</span><br><span class="line">	fmt.Println(x, ok)</span><br><span class="line">	x, ok = m[<span class="string">&quot;a&quot;</span>]</span><br><span class="line">	fmt.Println(x, ok)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span> <span class="literal">false</span></span><br><span class="line"><span class="number">1</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h3 id="map的长度"><a href="#map的长度" class="headerlink" title="map的长度"></a>map的长度</h3><p>使用len函数可以确定map的长度。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="built_in">len</span>(<span class="keyword">map</span>)  <span class="comment">// 可以得到map的长度</span></span><br></pre></td></tr></table></figure>

<h3 id="map是引用类型"><a href="#map是引用类型" class="headerlink" title="map是引用类型"></a>map是引用类型</h3><p>与切片相似，映射是引用类型。当将映射分配给一个新变量时，它们都指向相同的内部数据结构。因此，一个的变化会反映另一个。</p>
<p>示例代码：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (  </span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;  </span><br><span class="line">    personSalary := <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>&#123;</span><br><span class="line">        <span class="string">&quot;steve&quot;</span>: <span class="number">12000</span>,</span><br><span class="line">        <span class="string">&quot;jamie&quot;</span>: <span class="number">15000</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    personSalary[<span class="string">&quot;mike&quot;</span>] = <span class="number">9000</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;Original person salary&quot;</span>, personSalary)</span><br><span class="line">    newPersonSalary := personSalary</span><br><span class="line">    newPersonSalary[<span class="string">&quot;mike&quot;</span>] = <span class="number">18000</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;Person salary changed&quot;</span>, personSalary)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Original person salary map[steve:12000 jamie:15000 mike:9000]  </span><br><span class="line">Person salary changed map[steve:12000 jamie:15000 mike:18000] </span><br></pre></td></tr></table></figure>

<blockquote>
<p>map不能使用&#x3D;&#x3D;操作符进行比较。&#x3D;&#x3D;只能用来检查map是否为空。否则会报错：invalid operation: map1 &#x3D;&#x3D; map2 (map can only be comparedto nil)</p>
</blockquote>
<h1 id="字符串-string"><a href="#字符串-string" class="headerlink" title="字符串(string)"></a>字符串(string)</h1><h2 id="什么是string"><a href="#什么是string" class="headerlink" title="什么是string"></a>什么是string</h2><p>Go中的字符串是一个字节的切片。可以通过将其内容封装在“”中来创建字符串。Go中的字符串是Unicode兼容的，并且是UTF-8编码的。</p>
<p>示例代码：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (  </span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;  </span><br><span class="line">    name := <span class="string">&quot;Hello World&quot;</span></span><br><span class="line">    fmt.Println(name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="string的使用"><a href="#string的使用" class="headerlink" title="string的使用"></a>string的使用</h2><p>访问字符串中的单个字节</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	s := <span class="string">&quot;Hello World&quot;</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(s); i++ &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;%d &quot;</span>, s[i])</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(s); i++ &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;%c &quot;</span>, s[i])</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>%c：相应Unicode码点所表示的字符</p>
<p>运行结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">72 101 108 108 111 32 87 111 114 108 100 </span><br><span class="line">H e l l o   W o r l d </span><br></pre></td></tr></table></figure>















]]></content>
      <categories>
        <category>青训营</category>
      </categories>
      <tags>
        <tag>大二自学</tag>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>指针与结构体</title>
    <url>/2023/06/05/Go/9/</url>
    <content><![CDATA[<h1 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h1><h2 id="指针的概念"><a href="#指针的概念" class="headerlink" title="指针的概念"></a>指针的概念</h2><p>指针是存储另一个变量的内存地址的变量。</p>
<p>我们都知道，变量是一种使用方便的占位符，用于引用计算机内存地址。</p>
<p>一个指针变量可以指向任何一个值的内存地址。</p>
<h2 id="获取变量的地址"><a href="#获取变量的地址" class="headerlink" title="获取变量的地址"></a>获取变量的地址</h2><p>Go 语言的取地址符是 &amp;，放到一个变量前使用就会返回相应变量的内存地址。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="keyword">var</span> a <span class="type">int</span> = <span class="number">10</span>   </span><br><span class="line"></span><br><span class="line">   fmt.Printf(<span class="string">&quot;变量的地址: %x\n&quot;</span>, &amp;a  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">变量的地址: 20818a220</span><br></pre></td></tr></table></figure>

<h2 id="声明指针"><a href="#声明指针" class="headerlink" title="声明指针"></a>声明指针</h2><p>声明指针，*T是指针变量的类型，它指向T类型的值。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> var_name *<span class="keyword">var</span>-<span class="keyword">type</span></span><br></pre></td></tr></table></figure>

<p>var-type 为指针类型，var_name 为指针变量名，* 号用于指定变量是作为一个指针。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ip *<span class="type">int</span>        <span class="comment">/* 指向整型*/</span></span><br><span class="line"><span class="keyword">var</span> fp *<span class="type">float32</span>    <span class="comment">/* 指向浮点型 */</span></span><br></pre></td></tr></table></figure>

<p>示例代码：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="keyword">var</span> a <span class="type">int</span>= <span class="number">20</span>   <span class="comment">/* 声明实际变量 */</span></span><br><span class="line">   <span class="keyword">var</span> ip *<span class="type">int</span>        <span class="comment">/* 声明指针变量 */</span></span><br><span class="line"></span><br><span class="line">   ip = &amp;a  <span class="comment">/* 指针变量的存储地址 */</span></span><br><span class="line"></span><br><span class="line">   fmt.Printf(<span class="string">&quot;a 变量的地址是: %x\n&quot;</span>, &amp;a  )</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* 指针变量的存储地址 */</span></span><br><span class="line">   fmt.Printf(<span class="string">&quot;ip 变量的存储地址: %x\n&quot;</span>, ip )</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* 使用指针访问值 */</span></span><br><span class="line">   fmt.Printf(<span class="string">&quot;*ip 变量的值: %d\n&quot;</span>, *ip )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">a 变量的地址是: <span class="number">20818</span>a220</span><br><span class="line">ip 变量的存储地址: <span class="number">20818</span>a220</span><br><span class="line">*ip 变量的值: <span class="number">20</span></span><br></pre></td></tr></table></figure>

<p>示例代码：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> name <span class="type">int8</span></span><br><span class="line"><span class="keyword">type</span> first <span class="keyword">struct</span> &#123;</span><br><span class="line">	a <span class="type">int</span></span><br><span class="line">	b <span class="type">bool</span></span><br><span class="line">	name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> a = first&#123;<span class="number">1</span>, <span class="literal">false</span>, <span class="number">2</span>&#125;</span><br><span class="line">	<span class="keyword">var</span> b *first = &amp;a</span><br><span class="line">	fmt.Println(a.b, a.a, a.name, &amp;a, b.a, &amp;b, (*b).a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">false 1 2 &amp;&#123;1 false 2&#125; 1 0xc042068018 1</span><br></pre></td></tr></table></figure>

<blockquote>
<p>获取指针地址在指针变量前加&amp;的方式</p>
</blockquote>
<h2 id="空指针"><a href="#空指针" class="headerlink" title="空指针"></a>空指针</h2><p><strong>Go 空指针</strong><br>当一个指针被定义后没有分配到任何变量时，它的值为 nil。<br>nil 指针也称为空指针。<br>nil在概念上和其它语言的null、None、nil、NULL一样，都指代零值或空值。<br>一个指针变量通常缩写为 ptr。</p>
<p>空指针判断：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(ptr != <span class="literal">nil</span>)     <span class="comment">/* ptr 不是空指针 */</span></span><br><span class="line"><span class="keyword">if</span>(ptr == <span class="literal">nil</span>)    <span class="comment">/* ptr 是空指针 */</span></span><br></pre></td></tr></table></figure>

<h2 id="获取指针的值"><a href="#获取指针的值" class="headerlink" title="获取指针的值"></a>获取指针的值</h2><p>获取一个指针意味着访问指针指向的变量的值。语法是：*a</p>
<p>示例代码：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main  </span><br><span class="line"><span class="keyword">import</span> (  </span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;  </span><br><span class="line">    b := <span class="number">255</span></span><br><span class="line">    a := &amp;b</span><br><span class="line">    fmt.Println(<span class="string">&quot;address of b is&quot;</span>, a)</span><br><span class="line">    fmt.Println(<span class="string">&quot;value of b is&quot;</span>, *a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="操作指针改变变量的数值"><a href="#操作指针改变变量的数值" class="headerlink" title="操作指针改变变量的数值"></a>操作指针改变变量的数值</h2><p>示例代码：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (  </span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;  </span><br><span class="line">    b := <span class="number">255</span></span><br><span class="line">    a := &amp;b</span><br><span class="line">    fmt.Println(<span class="string">&quot;address of b is&quot;</span>, a)</span><br><span class="line">    fmt.Println(<span class="string">&quot;value of b is&quot;</span>, *a)</span><br><span class="line">    *a++</span><br><span class="line">    fmt.Println(<span class="string">&quot;new value of b is&quot;</span>, b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">address of b is 0x1040a124  </span><br><span class="line">value of b is 255  </span><br><span class="line">new value of b is 256  </span><br></pre></td></tr></table></figure>

<h2 id="使用指针传递函数的参数"><a href="#使用指针传递函数的参数" class="headerlink" title="使用指针传递函数的参数"></a>使用指针传递函数的参数</h2><p>示例代码</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (  </span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">change</span><span class="params">(val *<span class="type">int</span>)</span></span> &#123;  </span><br><span class="line">    *val = <span class="number">55</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;  </span><br><span class="line">    a := <span class="number">58</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;value of a before function call is&quot;</span>,a)</span><br><span class="line">    b := &amp;a</span><br><span class="line">    change(b)</span><br><span class="line">    fmt.Println(<span class="string">&quot;value of a after function call is&quot;</span>, a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">value of a before function call is 58  </span><br><span class="line">value of a after function call is 55  </span><br></pre></td></tr></table></figure>

<p><strong>不要将一个指向数组的指针传递给函数。使用切片。</strong></p>
<p>假设我们想对函数内的数组进行一些修改，并且对调用者可以看到函数内的数组所做的更改。一种方法是将一个指向数组的指针传递给函数。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (  </span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">modify</span><span class="params">(arr *[3]<span class="type">int</span>)</span></span> &#123;  </span><br><span class="line">    (*arr)[<span class="number">0</span>] = <span class="number">90</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;  </span><br><span class="line">    a := [<span class="number">3</span>]<span class="type">int</span>&#123;<span class="number">89</span>, <span class="number">90</span>, <span class="number">91</span>&#125;</span><br><span class="line">    modify(&amp;a)</span><br><span class="line">    fmt.Println(a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[90 90 91]</span><br></pre></td></tr></table></figure>

<p>示例代码：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (  </span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">modify</span><span class="params">(arr *[3]<span class="type">int</span>)</span></span> &#123;  </span><br><span class="line">    arr[<span class="number">0</span>] = <span class="number">90</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;  </span><br><span class="line">    a := [<span class="number">3</span>]<span class="type">int</span>&#123;<span class="number">89</span>, <span class="number">90</span>, <span class="number">91</span>&#125;</span><br><span class="line">    modify(&amp;a)</span><br><span class="line">    fmt.Println(a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[90 90 91]</span><br></pre></td></tr></table></figure>

<p><strong>虽然将指针传递给一个数组作为函数的参数并对其进行修改，但这并不是实现这一目标的惯用方法。我们有切片。</strong></p>
<p>示例代码：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (  </span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">modify</span><span class="params">(sls []<span class="type">int</span>)</span></span> &#123;  </span><br><span class="line">    sls[<span class="number">0</span>] = <span class="number">90</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;  </span><br><span class="line">    a := [<span class="number">3</span>]<span class="type">int</span>&#123;<span class="number">89</span>, <span class="number">90</span>, <span class="number">91</span>&#125;</span><br><span class="line">    modify(a[:])</span><br><span class="line">    fmt.Println(a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[90 90 91]</span><br></pre></td></tr></table></figure>



<p>Go不支持指针算法。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;  </span><br><span class="line">b := [...]<span class="type">int</span>&#123;<span class="number">109</span>, <span class="number">110</span>, <span class="number">111</span>&#125;</span><br><span class="line">p := &amp;b</span><br><span class="line">p++</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>nvalid operation: p++ (non-numeric type *[3]int)</p>
</blockquote>
<p><strong>指针数组</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> MAX <span class="type">int</span> = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">   a := []<span class="type">int</span>&#123;<span class="number">10</span>,<span class="number">100</span>,<span class="number">200</span>&#125;</span><br><span class="line">   <span class="keyword">var</span> i <span class="type">int</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span> i = <span class="number">0</span>; i &lt; MAX; i++ &#123;</span><br><span class="line">      fmt.Printf(<span class="string">&quot;a[%d] = %d\n&quot;</span>, i, a[i] )</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">a[<span class="number">0</span>] = <span class="number">10</span></span><br><span class="line">a[<span class="number">1</span>] = <span class="number">100</span></span><br><span class="line">a[<span class="number">2</span>] = <span class="number">200</span></span><br></pre></td></tr></table></figure>

<p>有一种情况，我们可能需要保存数组，这样我们就需要使用到指针。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> MAX <span class="type">int</span> = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	a := []<span class="type">int</span>&#123;<span class="number">10</span>, <span class="number">100</span>, <span class="number">200</span>&#125;</span><br><span class="line">	<span class="keyword">var</span> i <span class="type">int</span></span><br><span class="line">	<span class="keyword">var</span> ptr [MAX]*<span class="type">int</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> i = <span class="number">0</span>; i &lt; MAX; i++ &#123;</span><br><span class="line">		ptr[i] = &amp;a[i] <span class="comment">/* 整数地址赋值给指针数组 */</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> i = <span class="number">0</span>; i &lt; MAX; i++ &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;a[%d] = %d\n&quot;</span>, i, *ptr[i])</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">a[<span class="number">0</span>] = <span class="number">10</span></span><br><span class="line">a[<span class="number">1</span>] = <span class="number">100</span></span><br><span class="line">a[<span class="number">2</span>] = <span class="number">200</span></span><br></pre></td></tr></table></figure>

<h2 id="指针的指针"><a href="#指针的指针" class="headerlink" title="指针的指针"></a>指针的指针</h2><p><strong>指针的指针</strong></p>
<p>如果一个指针变量存放的又是另一个指针变量的地址，则称这个指针变量为指向指针的指针变量。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ptr **<span class="type">int</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> a <span class="type">int</span></span><br><span class="line">   <span class="keyword">var</span> ptr *<span class="type">int</span></span><br><span class="line">   <span class="keyword">var</span> pptr **<span class="type">int</span></span><br><span class="line"></span><br><span class="line">   a = <span class="number">3000</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">/* 指针 ptr 地址 */</span></span><br><span class="line">   ptr = &amp;a</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* 指向指针 ptr 地址 */</span></span><br><span class="line">   pptr = &amp;ptr</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* 获取 pptr 的值 */</span></span><br><span class="line">   fmt.Printf(<span class="string">&quot;变量 a = %d\n&quot;</span>, a )</span><br><span class="line">   fmt.Printf(<span class="string">&quot;指针变量 *ptr = %d\n&quot;</span>, *ptr )</span><br><span class="line">   fmt.Printf(<span class="string">&quot;指向指针的指针变量 **pptr = %d\n&quot;</span>, **pptr)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">变量 a = 3000</span><br><span class="line">指针变量 *ptr = 3000</span><br><span class="line">指向指针的指针变量 **pptr = 3000</span><br></pre></td></tr></table></figure>

<p><strong>指针作为函数参数</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="comment">/* 定义局部变量 */</span></span><br><span class="line">   <span class="keyword">var</span> a <span class="type">int</span> = <span class="number">100</span></span><br><span class="line">   <span class="keyword">var</span> b <span class="type">int</span>= <span class="number">200</span></span><br><span class="line"></span><br><span class="line">   fmt.Printf(<span class="string">&quot;交换前 a 的值 : %d\n&quot;</span>, a )</span><br><span class="line">   fmt.Printf(<span class="string">&quot;交换前 b 的值 : %d\n&quot;</span>, b )</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* 调用函数用于交换值</span></span><br><span class="line"><span class="comment">   * &amp;a 指向 a 变量的地址</span></span><br><span class="line"><span class="comment">   * &amp;b 指向 b 变量的地址</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">   swap(&amp;a, &amp;b);</span><br><span class="line"></span><br><span class="line">   fmt.Printf(<span class="string">&quot;交换后 a 的值 : %d\n&quot;</span>, a )</span><br><span class="line">   fmt.Printf(<span class="string">&quot;交换后 b 的值 : %d\n&quot;</span>, b )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">swap</span><span class="params">(x *<span class="type">int</span>, y *<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">   <span class="keyword">var</span> temp <span class="type">int</span></span><br><span class="line">   temp = *x    <span class="comment">/* 保存 x 地址的值 */</span></span><br><span class="line">   *x = *y      <span class="comment">/* 将 y 赋值给 x */</span></span><br><span class="line">   *y = temp    <span class="comment">/* 将 temp 赋值给 y */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">交换前 a 的值 : 100</span><br><span class="line">交换前 b 的值 : 200</span><br><span class="line">交换后 a 的值 : 200</span><br><span class="line">交换后 b 的值 : 100</span><br></pre></td></tr></table></figure>

<h1 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h1><h2 id="什么是结构体"><a href="#什么是结构体" class="headerlink" title="什么是结构体"></a>什么是结构体</h2><p>Go 语言中数组可以存储同一类型的数据，但在结构体中我们可以为不同项定义不同的数据类型。<br>结构体是由一系列具有相同类型或不同类型的数据构成的数据集合。</p>
<h2 id="结构体的定义和初始化"><a href="#结构体的定义和初始化" class="headerlink" title="结构体的定义和初始化"></a>结构体的定义和初始化</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> struct_variable_type <span class="keyword">struct</span> &#123;</span><br><span class="line">   member definition;</span><br><span class="line">   member definition;</span><br><span class="line">   ...</span><br><span class="line">   member definition;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>一旦定义了结构体类型，它就能用于变量的声明</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">variable_name := structure_variable_type &#123;value1, value2...valuen&#125;</span><br></pre></td></tr></table></figure>

<p><strong>初始化结构体</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.按照顺序提供初始化值</span></span><br><span class="line">P := person&#123;<span class="string">&quot;Tom&quot;</span>, <span class="number">25</span>&#125;</span><br><span class="line"><span class="comment">// 2.通过field:value的方式初始化，这样可以任意顺序</span></span><br><span class="line">P := person&#123;age:<span class="number">24</span>, name:<span class="string">&quot;Tom&quot;</span>&#125;</span><br><span class="line"><span class="comment">// 3.new方式,未设置初始值的，会赋予类型的默认初始值</span></span><br><span class="line">p := <span class="built_in">new</span>(person)</span><br><span class="line">p.age=<span class="number">24</span></span><br></pre></td></tr></table></figure>

<h2 id="结构体的访问"><a href="#结构体的访问" class="headerlink" title="结构体的访问"></a>结构体的访问</h2><p>访问结构体成员(访问结构的各个字段)</p>
<p>通过点.操作符用于访问结构的各个字段。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Books <span class="keyword">struct</span> &#123;</span><br><span class="line">   title <span class="type">string</span></span><br><span class="line">   author <span class="type">string</span></span><br><span class="line">   subject <span class="type">string</span></span><br><span class="line">   book_id <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="keyword">var</span> Book1 Books        <span class="comment">/* 声明 Book1 为 Books 类型 */</span></span><br><span class="line">   <span class="keyword">var</span> Book2 Books        <span class="comment">/* 声明 Book2 为 Books 类型 */</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">/* book 1 描述 */</span></span><br><span class="line">   Book1.title = <span class="string">&quot;Go 语言&quot;</span></span><br><span class="line">   Book1.author = <span class="string">&quot;www.runoob.com&quot;</span></span><br><span class="line">   Book1.subject = <span class="string">&quot;Go 语言教程&quot;</span></span><br><span class="line">   Book1.book_id = <span class="number">6495407</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">/* book 2 描述 */</span></span><br><span class="line">   Book2.title = <span class="string">&quot;Python 教程&quot;</span></span><br><span class="line">   Book2.author = <span class="string">&quot;www.runoob.com&quot;</span></span><br><span class="line">   Book2.subject = <span class="string">&quot;Python 语言教程&quot;</span></span><br><span class="line">   Book2.book_id = <span class="number">6495700</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">/* 打印 Book1 信息 */</span></span><br><span class="line">   fmt.Printf( <span class="string">&quot;Book 1 title : %s\n&quot;</span>, Book1.title)</span><br><span class="line">   fmt.Printf( <span class="string">&quot;Book 1 author : %s\n&quot;</span>, Book1.author)</span><br><span class="line">   fmt.Printf( <span class="string">&quot;Book 1 subject : %s\n&quot;</span>, Book1.subject)</span><br><span class="line">   fmt.Printf( <span class="string">&quot;Book 1 book_id : %d\n&quot;</span>, Book1.book_id)</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* 打印 Book2 信息 */</span></span><br><span class="line">   fmt.Printf( <span class="string">&quot;Book 2 title : %s\n&quot;</span>, Book2.title)</span><br><span class="line">   fmt.Printf( <span class="string">&quot;Book 2 author : %s\n&quot;</span>, Book2.author)</span><br><span class="line">   fmt.Printf( <span class="string">&quot;Book 2 subject : %s\n&quot;</span>, Book2.subject)</span><br><span class="line">   fmt.Printf( <span class="string">&quot;Book 2 book_id : %d\n&quot;</span>, Book2.book_id)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Book 1 title : Go 语言</span><br><span class="line">Book 1 author : www.runoob.com</span><br><span class="line">Book 1 subject : Go 语言教程</span><br><span class="line">Book 1 book_id : 6495407</span><br><span class="line">Book 2 title : Python 教程</span><br><span class="line">Book 2 author : www.runoob.com</span><br><span class="line">Book 2 subject : Python 语言教程</span><br><span class="line">Book 2 book_id : 6495700</span><br></pre></td></tr></table></figure>

<h2 id="结构体指针"><a href="#结构体指针" class="headerlink" title="结构体指针"></a>结构体指针</h2><p>指针指向一个结构体，也可以创建指向结构的指针。</p>
<p><strong>结构体指针</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> struct_pointer *Books</span><br></pre></td></tr></table></figure>

<p>以上定义的指针变量可以存储结构体变量的地址。查看结构体变量地址，可以将 &amp; 符号放置于结构体变量前</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">struct_pointer = &amp;Book1;</span><br></pre></td></tr></table></figure>

<p>使用结构体指针访问结构体成员，使用 “.” 操作符</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">struct_pointer.title;</span><br></pre></td></tr></table></figure>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Books <span class="keyword">struct</span> &#123;</span><br><span class="line">   title <span class="type">string</span></span><br><span class="line">   author <span class="type">string</span></span><br><span class="line">   subject <span class="type">string</span></span><br><span class="line">   book_id <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="keyword">var</span> Book1 Books        <span class="comment">/* Declare Book1 of type Book */</span></span><br><span class="line">   <span class="keyword">var</span> Book2 Books        <span class="comment">/* Declare Book2 of type Book */</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">/* book 1 描述 */</span></span><br><span class="line">   Book1.title = <span class="string">&quot;Go 语言&quot;</span></span><br><span class="line">   Book1.author = <span class="string">&quot;www.runoob.com&quot;</span></span><br><span class="line">   Book1.subject = <span class="string">&quot;Go 语言教程&quot;</span></span><br><span class="line">   Book1.book_id = <span class="number">6495407</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">/* book 2 描述 */</span></span><br><span class="line">   Book2.title = <span class="string">&quot;Python 教程&quot;</span></span><br><span class="line">   Book2.author = <span class="string">&quot;www.runoob.com&quot;</span></span><br><span class="line">   Book2.subject = <span class="string">&quot;Python 语言教程&quot;</span></span><br><span class="line">   Book2.book_id = <span class="number">6495700</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">/* 打印 Book1 信息 */</span></span><br><span class="line">   printBook(&amp;Book1)</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* 打印 Book2 信息 */</span></span><br><span class="line">   printBook(&amp;Book2)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printBook</span><span class="params">( book *Books )</span></span> &#123;</span><br><span class="line">   fmt.Printf( <span class="string">&quot;Book title : %s\n&quot;</span>, book.title);</span><br><span class="line">   fmt.Printf( <span class="string">&quot;Book author : %s\n&quot;</span>, book.author);</span><br><span class="line">   fmt.Printf( <span class="string">&quot;Book subject : %s\n&quot;</span>, book.subject);</span><br><span class="line">   fmt.Printf( <span class="string">&quot;Book book_id : %d\n&quot;</span>, book.book_id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Book title : Go 语言</span><br><span class="line">Book author : www.runoob.com</span><br><span class="line">Book subject : Go 语言教程</span><br><span class="line">Book book_id : 6495407</span><br><span class="line">Book title : Python 教程</span><br><span class="line">Book author : www.runoob.com</span><br><span class="line">Book subject : Python 语言教程</span><br><span class="line">Book book_id : 6495700</span><br></pre></td></tr></table></figure>

<p>结构体实例化也可以是这样的</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Books <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s Books)</span></span> String() <span class="type">string</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="string">&quot;data&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, Books&#123;&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解释：</p>
<p>在<code>Books</code>类型上定义了一个<code>String</code>方法。这个方法具有一个接收者<code>(s Books)</code>，表示它是<code>Books</code>类型的一个实例方法。这个方法返回一个字符串<code>&quot;data&quot;</code>。<code>Books&#123;&#125;</code>创建了一个<code>Books</code>类型的实例，然后通过<code>%v</code>打印输出。由于<code>Books</code>类型实现了<code>String</code>方法，该方法将被调用，返回字符串<code>&quot;data&quot;</code>。</p>
<h2 id="结构体的匿名字段"><a href="#结构体的匿名字段" class="headerlink" title="结构体的匿名字段"></a>结构体的匿名字段</h2><p><strong>结构体的匿名字段</strong></p>
<p>可以用字段来创建结构，这些字段只包含一个没有字段名的类型。这些字段被称为匿名字段。</p>
<p>在类型中，使用不写字段名的方式，使用另一个类型</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Human <span class="keyword">struct</span> &#123;</span><br><span class="line">    name <span class="type">string</span></span><br><span class="line">    age <span class="type">int</span></span><br><span class="line">    weight <span class="type">int</span></span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">    Human <span class="comment">// 匿名字段，那么默认Student就包含了Human的所有字段</span></span><br><span class="line">    speciality <span class="type">string</span></span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 我们初始化一个学生</span></span><br><span class="line">    mark := Student&#123;Human&#123;<span class="string">&quot;Mark&quot;</span>, <span class="number">25</span>, <span class="number">120</span>&#125;, <span class="string">&quot;Computer Science&quot;</span>&#125;</span><br><span class="line">    <span class="comment">// 我们访问相应的字段</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;His name is &quot;</span>, mark.name)</span><br><span class="line">    fmt.Println(<span class="string">&quot;His age is &quot;</span>, mark.age)</span><br><span class="line">    fmt.Println(<span class="string">&quot;His weight is &quot;</span>, mark.weight)</span><br><span class="line">    fmt.Println(<span class="string">&quot;His speciality is &quot;</span>, mark.speciality)</span><br><span class="line">    <span class="comment">// 修改对应的备注信息</span></span><br><span class="line">    mark.speciality = <span class="string">&quot;AI&quot;</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;Mark changed his speciality&quot;</span>)</span><br><span class="line">    fmt.Println(<span class="string">&quot;His speciality is &quot;</span>, mark.speciality)</span><br><span class="line">    <span class="comment">// 修改他的年龄信息</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;Mark become old&quot;</span>)</span><br><span class="line">    mark.age = <span class="number">46</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;His age is&quot;</span>, mark.age)</span><br><span class="line">    <span class="comment">// 修改他的体重信息</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;Mark is not an athlet anymore&quot;</span>)</span><br><span class="line">    mark.weight += <span class="number">60</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;His weight is&quot;</span>, mark.weight)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">His name is  Mark</span><br><span class="line">His age is  25</span><br><span class="line">His weight is  120</span><br><span class="line">His speciality is  Computer Science</span><br><span class="line">Mark changed his speciality</span><br><span class="line">His speciality is  AI</span><br><span class="line">Mark become old</span><br><span class="line">His age is 46</span><br><span class="line">Mark is not an athlet anymore</span><br><span class="line">His weight is 180</span><br></pre></td></tr></table></figure>

<blockquote>
<p>可以使用”.”的方式进行调用匿名字段中的属性值</p>
<p>实际就是字段的继承</p>
<p>其中可以将匿名字段理解为字段名和字段类型都是同一个</p>
<p>基于上面的理解，所以可以<code>mark.Human = Human&#123;&quot;Marcus&quot;, 55, 220&#125; </code>和<code>mark.Human.age = 46</code></p>
<p>若存在匿名字段中的字段与非匿名字段名字相同，则最外层的优先访问，就近原则</p>
</blockquote>
<p>通过匿名访问和修改字段相当的有用，但是不仅仅是struct字段哦，所有的内置类型和自定义类型都是可以作为匿名字段的。</p>
<h2 id="结构体嵌套"><a href="#结构体嵌套" class="headerlink" title="结构体嵌套"></a>结构体嵌套</h2><p>嵌套的结构体<br>一个结构体可能包含一个字段，而这个字段反过来就是一个结构体。这些结构被称为嵌套结构。</p>
<p>示例代码：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (  </span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Address <span class="keyword">struct</span> &#123;  </span><br><span class="line">    city, state <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;  </span><br><span class="line">    name <span class="type">string</span></span><br><span class="line">    age <span class="type">int</span></span><br><span class="line">    address Address</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;  </span><br><span class="line">    <span class="keyword">var</span> p Person</span><br><span class="line">    p.name = <span class="string">&quot;Naveen&quot;</span></span><br><span class="line">    p.age = <span class="number">50</span></span><br><span class="line">    p.address = Address &#123;</span><br><span class="line">        city: <span class="string">&quot;Chicago&quot;</span>,</span><br><span class="line">        state: <span class="string">&quot;Illinois&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(<span class="string">&quot;Name:&quot;</span>, p.name)</span><br><span class="line">    fmt.Println(<span class="string">&quot;Age:&quot;</span>,p.age)</span><br><span class="line">    fmt.Println(<span class="string">&quot;City:&quot;</span>,p.address.city)</span><br><span class="line">    fmt.Println(<span class="string">&quot;State:&quot;</span>,p.address.state)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="提升字段"><a href="#提升字段" class="headerlink" title="提升字段"></a>提升字段</h2><p>在结构体中属于匿名结构体的字段称为提升字段，因为它们可以被访问，就好像它们属于拥有匿名结构字段的结构一样。理解这个定义是相当复杂的。</p>
<p>示例代码：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (  </span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Address <span class="keyword">struct</span> &#123;  </span><br><span class="line">    city, state <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;  </span><br><span class="line">    name <span class="type">string</span></span><br><span class="line">    age  <span class="type">int</span></span><br><span class="line">    address Address</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;  </span><br><span class="line">    <span class="keyword">var</span> p Person</span><br><span class="line">    p.name = <span class="string">&quot;Naveen&quot;</span></span><br><span class="line">    p.age = <span class="number">50</span></span><br><span class="line">    p.Address = Address&#123;</span><br><span class="line">        city:  <span class="string">&quot;Chicago&quot;</span>,</span><br><span class="line">        state: <span class="string">&quot;Illinois&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(<span class="string">&quot;Name:&quot;</span>, p.name)</span><br><span class="line">    fmt.Println(<span class="string">&quot;Age:&quot;</span>, p.age)</span><br><span class="line">    fmt.Println(<span class="string">&quot;City:&quot;</span>, p.city) <span class="comment">//city is promoted field</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;State:&quot;</span>, p.state) <span class="comment">//state is promoted field</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Name: Naveen  </span><br><span class="line">Age: 50  </span><br><span class="line">City: Chicago  </span><br><span class="line">State: Illinois</span><br></pre></td></tr></table></figure>

<h2 id="导出结构体和字段"><a href="#导出结构体和字段" class="headerlink" title="导出结构体和字段"></a>导出结构体和字段</h2><p>如果结构体类型以大写字母开头，那么它是一个导出类型，可以从其他包访问它。类似地，如果结构体的字段以大写开头，则可以从其他包访问它们。</p>
<p>示例代码：</p>
<p>1.在computer目录下，创建文件spec.go</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> computer</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Spec <span class="keyword">struct</span> &#123; <span class="comment">//exported struct  </span></span><br><span class="line">    Maker <span class="type">string</span> <span class="comment">//exported field</span></span><br><span class="line">    model <span class="type">string</span> <span class="comment">//unexported field</span></span><br><span class="line">    Price <span class="type">int</span> <span class="comment">//exported field</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.创建main.go 文件</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;structs/computer&quot;</span>  </span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;  </span><br><span class="line">    <span class="keyword">var</span> spec computer.Spec</span><br><span class="line">    spec.Maker = <span class="string">&quot;apple&quot;</span></span><br><span class="line">    spec.Price = <span class="number">50000</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;Spec:&quot;</span>, spec)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Spec: &#123;apple  50000&#125;</span><br></pre></td></tr></table></figure>

<h2 id="结构体比较"><a href="#结构体比较" class="headerlink" title="结构体比较"></a>结构体比较</h2><p>结构体是值类型，如果每个字段具有可比性，则是可比较的。如果它们对应的字段相等，则认为两个结构体变量是相等的。</p>
<p>示例代码：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (  </span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> name <span class="keyword">struct</span> &#123;  </span><br><span class="line">    firstName <span class="type">string</span></span><br><span class="line">    lastName <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;  </span><br><span class="line">    name1 := name&#123;<span class="string">&quot;Steve&quot;</span>, <span class="string">&quot;Jobs&quot;</span>&#125;</span><br><span class="line">    name2 := name&#123;<span class="string">&quot;Steve&quot;</span>, <span class="string">&quot;Jobs&quot;</span>&#125;</span><br><span class="line">    <span class="keyword">if</span> name1 == name2 &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;name1 and name2 are equal&quot;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;name1 and name2 are not equal&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    name3 := name&#123;firstName:<span class="string">&quot;Steve&quot;</span>, lastName:<span class="string">&quot;Jobs&quot;</span>&#125;</span><br><span class="line">    name4 := name&#123;&#125;</span><br><span class="line">    name4.firstName = <span class="string">&quot;Steve&quot;</span></span><br><span class="line">    <span class="keyword">if</span> name3 == name4 &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;name3 and name4 are equal&quot;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;name3 and name4 are not equal&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">name1 and name2 are equal  </span><br><span class="line">name3 and name4 are not equal  </span><br></pre></td></tr></table></figure>

<p><strong>如果结构变量包含的字段是不可比较的，那么结构变量是不可比较的</strong></p>
<p>示例代码：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (  </span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> image <span class="keyword">struct</span> &#123;  </span><br><span class="line">    data <span class="keyword">map</span>[<span class="type">int</span>]<span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;  </span><br><span class="line">    image1 := image&#123;data: <span class="keyword">map</span>[<span class="type">int</span>]<span class="type">int</span>&#123;</span><br><span class="line">        <span class="number">0</span>: <span class="number">155</span>,</span><br><span class="line">    &#125;&#125;</span><br><span class="line">    image2 := image&#123;data: <span class="keyword">map</span>[<span class="type">int</span>]<span class="type">int</span>&#123;</span><br><span class="line">        <span class="number">0</span>: <span class="number">155</span>,</span><br><span class="line">    &#125;&#125;</span><br><span class="line">    <span class="keyword">if</span> image1 == image2 &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;image1 and image2 are equal&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>invalid operation: image1 == image2 (struct containing map[int]int cannot be compared)</code></p>
<h2 id="结构体作为函数的参数"><a href="#结构体作为函数的参数" class="headerlink" title="结构体作为函数的参数"></a>结构体作为函数的参数</h2><p>结构体作为函数参数使用</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">ackage main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Books <span class="keyword">struct</span> &#123;</span><br><span class="line">   title <span class="type">string</span></span><br><span class="line">   author <span class="type">string</span></span><br><span class="line">   subject <span class="type">string</span></span><br><span class="line">   book_id <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="keyword">var</span> Book1 Books        <span class="comment">/* 声明 Book1 为 Books 类型 */</span></span><br><span class="line">   <span class="keyword">var</span> Book2 Books        <span class="comment">/* 声明 Book2 为 Books 类型 */</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">/* book 1 描述 */</span></span><br><span class="line">   Book1.title = <span class="string">&quot;Go 语言&quot;</span></span><br><span class="line">   Book1.author = <span class="string">&quot;www.runoob.com&quot;</span></span><br><span class="line">   Book1.subject = <span class="string">&quot;Go 语言教程&quot;</span></span><br><span class="line">   Book1.book_id = <span class="number">6495407</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">/* book 2 描述 */</span></span><br><span class="line">   Book2.title = <span class="string">&quot;Python 教程&quot;</span></span><br><span class="line">   Book2.author = <span class="string">&quot;www.runoob.com&quot;</span></span><br><span class="line">   Book2.subject = <span class="string">&quot;Python 语言教程&quot;</span></span><br><span class="line">   Book2.book_id = <span class="number">6495700</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">/* 打印 Book1 信息 */</span></span><br><span class="line">   printBook(Book1)</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* 打印 Book2 信息 */</span></span><br><span class="line">   printBook(Book2)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printBook</span><span class="params">( book Books )</span></span> &#123;</span><br><span class="line">   fmt.Printf( <span class="string">&quot;Book title : %s\n&quot;</span>, book.title);</span><br><span class="line">   fmt.Printf( <span class="string">&quot;Book author : %s\n&quot;</span>, book.author);</span><br><span class="line">   fmt.Printf( <span class="string">&quot;Book subject : %s\n&quot;</span>, book.subject);</span><br><span class="line">   fmt.Printf( <span class="string">&quot;Book book_id : %d\n&quot;</span>, book.book_id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="结构体方法"><a href="#结构体方法" class="headerlink" title="结构体方法"></a>结构体方法</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> user <span class="keyword">struct</span> &#123;</span><br><span class="line">	name     <span class="type">string</span></span><br><span class="line">	password <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u user)</span></span> checkPassword(password <span class="type">string</span>) <span class="type">bool</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> u.password == password</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *user)</span></span> resetPassword(password <span class="type">string</span>) &#123;</span><br><span class="line">	u.password = password</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	a := user&#123;name: <span class="string">&quot;wang&quot;</span>, password: <span class="string">&quot;1024&quot;</span>&#125;</span><br><span class="line">	a.resetPassword(<span class="string">&quot;2048&quot;</span>)</span><br><span class="line">	fmt.Println(a.checkPassword(<span class="string">&quot;2048&quot;</span>)) <span class="comment">// true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>make、new操作</strong></p>
<p>make用于内建类型（map、slice 和channel）的内存分配。new用于各种类型的内存分配。<br>内建函数new本质上说跟其它语言中的同名函数功能一样：new(T)分配了零值填充的T类型的内存空间，并且返回其地址，即一个*T类型的值。用Go的术语说，它返回了一个指针，指向新分配的类型T的零值。有一点非常重要：new返回指针</p>
<p>内建函数make(T, args)与new(T)有着不同的功能，make只能创建slice、map和channel，并且返回一个有初始值(非零)的T类型，而不是*T。本质来讲，导致这三个类型有所不同的原因是指向数据结构的引用在使用前必须被初始化。例如，一个slice，是一个包含指向数据（内部array）的指针、长度和容量的三项描述符；在这些项目被初始化之前，slice为nil。对于slice、map和channel来说，make初始化了内部的数据结构，填充适当的值。make返回初始化后的（非零）值。</p>
<ul>
<li><code>new</code>用于任何类型的内存分配，返回的是类型的指针，指向新分配的零值内存空间。</li>
<li><code>make</code>仅用于切片、映射和通道的内存分配，返回的是经过初始化后的非零值。</li>
</ul>
<h1 id="指针与结构体举例"><a href="#指针与结构体举例" class="headerlink" title="指针与结构体举例"></a>指针与结构体举例</h1><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> user <span class="keyword">struct</span> &#123;</span><br><span class="line">	name     <span class="type">string</span></span><br><span class="line">	password <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	a := user&#123;name: <span class="string">&quot;wang&quot;</span>, password: <span class="string">&quot;1024&quot;</span>&#125;</span><br><span class="line">	b := user&#123;<span class="string">&quot;wang&quot;</span>, <span class="string">&quot;1024&quot;</span>&#125;</span><br><span class="line">	c := user&#123;name: <span class="string">&quot;wang&quot;</span>&#125;</span><br><span class="line">	c.password = <span class="string">&quot;1024&quot;</span></span><br><span class="line">	<span class="keyword">var</span> d user</span><br><span class="line">	d.name = <span class="string">&quot;wang&quot;</span></span><br><span class="line">	d.password = <span class="string">&quot;1024&quot;</span></span><br><span class="line"></span><br><span class="line">	fmt.Println(a, b, c, d)                 <span class="comment">// &#123;wang 1024&#125; &#123;wang 1024&#125; &#123;wang 1024&#125; &#123;wang 1024&#125;</span></span><br><span class="line">	fmt.Println(checkPassword(a, <span class="string">&quot;haha&quot;</span>))   <span class="comment">// false</span></span><br><span class="line">	fmt.Println(checkPassword2(&amp;a, <span class="string">&quot;haha&quot;</span>)) <span class="comment">// false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">checkPassword</span><span class="params">(u user, password <span class="type">string</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> u.password == password</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">checkPassword2</span><span class="params">(u *user, password <span class="type">string</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> u.password == password</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;wang 1024&#125; &#123;wang 1024&#125; &#123;wang 1024&#125; &#123;wang 1024&#125;</span><br><span class="line">false</span><br><span class="line">false</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>青训营</category>
      </categories>
      <tags>
        <tag>大二自学</tag>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>电大软件测试～第二次作业</title>
    <url>/2023/05/31/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/test2/</url>
    <content><![CDATA[<h2 id="第二次作业及参考答案"><a href="#第二次作业及参考答案" class="headerlink" title="第二次作业及参考答案"></a>第二次作业及参考答案</h2><h3 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h3><p> 在一个客户信息查询界面中，输入条件有“姓名”、“身份证号”、“手机”，采用正交表方式设计该界面查询功能的测试用例。</p>
<p>答：</p>
<p>针对本测试有3个输入条件，每个输入有2种取值情况，可以选择L₄(2³)正交表，其正交表值如下表所示：</p>
<table>
<thead>
<tr>
<th>实验数\列号</th>
<th>姓名</th>
<th>身份证号</th>
<th>手机</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>2</td>
<td>1</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>3</td>
<td>0</td>
<td>1</td>
<td>0</td>
</tr>
<tr>
<td>4</td>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
</tbody></table>
<p>测试用例：</p>
<table>
<thead>
<tr>
<th>测试用例&#x2F;查询条件</th>
<th>姓名</th>
<th>身份证号</th>
<th>手机</th>
</tr>
</thead>
<tbody><tr>
<td>测试用例1</td>
<td>填写</td>
<td>填写</td>
<td>填写</td>
</tr>
<tr>
<td>测试用例2</td>
<td>填写</td>
<td>空</td>
<td>空</td>
</tr>
<tr>
<td>测试用例3</td>
<td>空</td>
<td>填写</td>
<td>空</td>
</tr>
<tr>
<td>测试用例4</td>
<td>空</td>
<td>空</td>
<td>填写</td>
</tr>
</tbody></table>
<h3 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h3><p>根据如下图所示的程序流程图，分别使用语句覆盖测试、判定覆盖测试、条件覆盖测试和路径覆盖测试进行测试用例设计。</p>
<p><img src="https://cdn.jsdelivr.net/gh/uestc-wxy/blog_img/img/YaGS6fzEgLuwdKp.png"></p>
<p>答：</p>
<p><em><strong>1）语句覆盖</strong></em></p>
<p>设计测试用例，使得被测试程序中的每条可执行语句至少被执行一次。其测试用例表如下所示。</p>
<table>
<thead>
<tr>
<th>用例序号</th>
<th>输入数据</th>
<th>预期输出</th>
<th>覆盖语句</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>(X,Y)&#x3D;(1,11)</td>
<td>(X,Y)&#x3D;(1,11)</td>
<td>X&gt;0 AND Y&gt;10;Y&#x3D;Y&#x2F;X;X&lt;-10 OR Y&lt;0</td>
</tr>
<tr>
<td>2</td>
<td>(X,Y)&#x3D;(0,-1)</td>
<td>(X,Y)&#x3D;(0,1)</td>
<td>X&gt;0 AND Y&gt;10;X&lt;-10 OR Y&lt;0;Y&#x3D;-(Y+X)</td>
</tr>
</tbody></table>
<p><em><strong>2）判定覆盖</strong></em></p>
<p>设计测试用例,使得被测试程序中的每个判断的”真”、”假”分支至少被执行一次。设X&gt;0 AND Y&gt;10为判定条件M，X&lt;-10 OR Y&lt;0为判定条件N。<br>设计的判定覆盖测试用例如下表所示。</p>
<table>
<thead>
<tr>
<th>用例序号</th>
<th>输入数据</th>
<th>预期输出</th>
<th>覆盖判定条件</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>(X,Y)&#x3D;(1,11)</td>
<td>(X,Y)&#x3D;(1,11)</td>
<td>M为真，N为假</td>
</tr>
<tr>
<td>2</td>
<td>(X,Y)&#x3D;(0,-1)</td>
<td>(X,Y)&#x3D;(0,1)</td>
<td>M为假，N为真</td>
</tr>
</tbody></table>
<p><em><strong>3）条件覆盖</strong></em></p>
<p>设计测试用例,使得被测试程序中分支判断语句中每个条件的可能值至少被满足一次。<br>设</p>
<blockquote>
<p>条件X&gt;0:<br>取真时为T1，取假时为F1<br>条件Y&gt;10:<br>取真时为T2，取假时为F2<br>条件x&lt;-10:<br>取真时为T3，取假时为F3<br>条件Y&lt;0:<br>取真时为T4,取假时为 F4</p>
</blockquote>
<p>设计的条件覆盖测试用例如下表所示。</p>
<table>
<thead>
<tr>
<th>用例序号</th>
<th>输入数据</th>
<th>预期输出</th>
<th>覆盖条件</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>(X,Y)&#x3D;(1,-1)</td>
<td>(X,Y)&#x3D;(1,0)</td>
<td>T1，F2，F3，T4</td>
</tr>
<tr>
<td>2</td>
<td>(X,Y)&#x3D;(-11,11)</td>
<td>(X,Y)&#x3D;(-11,0)</td>
<td>F1，T2，T3，F4</td>
</tr>
</tbody></table>
<p><em><strong>4）基本路径覆盖</strong></em></p>
<p>设计测试用例,使得被测试程序中的基本路径至少被覆盖一次。依据该程序控制流图计算环路复杂度&#x3D;3（判断节点数目+1）,因此,该程序的基本路径有3条。</p>
<p>设计的基本路径覆盖测试用例如下表所示</p>
<table>
<thead>
<tr>
<th>用例序号</th>
<th>输入数据</th>
<th>预期输出</th>
<th>覆盖路径</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>(X,Y)&#x3D;(0,0)</td>
<td>(X,Y)&#x3D;(0,0)</td>
<td>ace</td>
</tr>
<tr>
<td>2</td>
<td>(X,Y)&#x3D;(1,11)</td>
<td>(X,Y)&#x3D;(1,11)</td>
<td>abce</td>
</tr>
<tr>
<td>3</td>
<td>(X,Y)&#x3D;(-11,1)</td>
<td>(X,Y)&#x3D;(-11,10)</td>
<td>acde</td>
</tr>
<tr>
<td>4</td>
<td>不存在</td>
<td>不存在</td>
<td>abcde</td>
</tr>
</tbody></table>
<p>但是看这篇文章<a href="https://blog.csdn.net/dickdick111/article/details/90478058?ops_request_misc=&request_id=&biz_id=102&utm_term=%E7%8E%AF%E5%BD%A2%E5%A4%8D%E6%9D%82%E5%BA%A6%E7%9A%84%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%95%E7%A8%8B%E5%BA%8F%E6%B5%81%E7%A8%8B%E5%9B%BE&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-1-90478058.142%5Ev88%5Econtrol_2,239%5Ev2%5Einsert_chatgpt&spm=1018.2226.3001.4187"> 软件测试——程序控制流图，McCabe环形复杂度_根据程序画出控制流图_Dic0k的博客-CSDN博客</a>，按照它的逻辑，环形复杂度应该有5条。（很奇怪）</p>
<h3 id="第三题"><a href="#第三题" class="headerlink" title="第三题"></a>第三题</h3><p>针对如下样本程序，分析该程序逻辑覆盖测试方法中的语句覆盖、判定覆盖、条件覆盖和基本路径覆盖，并说明哪种方法覆盖率高？为什么？</p>
<p>被测样本程序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Coverage</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;start main function:path a...&quot;</span>);</span><br><span class="line">  <span class="type">int</span> A=<span class="number">0</span>,B=<span class="number">0</span>,X=<span class="number">0</span>;</span><br><span class="line">  <span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">  System.out.println(<span class="string">&quot;输入A：&quot;</span>);  A = s.nextInt();</span><br><span class="line">  System.out.println(<span class="string">&quot;输入B=&quot;</span>);  B = s.nextInt();</span><br><span class="line">  System.out.println(<span class="string">&quot;输入X=&quot;</span>);  X = s.nextInt();</span><br><span class="line">  s.close();  </span><br><span class="line">  <span class="keyword">if</span> (A&gt;<span class="number">1</span> &amp;&amp; B==<span class="number">0</span>) &#123;</span><br><span class="line">	X=X/A;</span><br><span class="line">	System.out.println(<span class="string">&quot;path c&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;path b&quot;</span>);  &#125;</span><br><span class="line">  <span class="keyword">if</span> (A==<span class="number">2</span> || X&gt;<span class="number">1</span>) &#123;</span><br><span class="line">	X=X+<span class="number">1</span>;</span><br><span class="line">	System.out.println(<span class="string">&quot;path e&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;path d&quot;</span>);  &#125;</span><br><span class="line">  System.out.println(<span class="string">&quot;end main function.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​	答：</p>
<p>​	<u><em><strong>注：以下答案只参考了标准答案的一部分</strong></em></u></p>
<p><img src="https://s2.loli.net/2023/05/31/P7NxLnZ9QhsHmyW.png" alt="VF1D1EJ2__LKYS_1_GPGJ5W.png"></p>
<ol>
<li><p>语句覆盖测试</p>
<table>
<thead>
<tr>
<th>用例序号</th>
<th>输入数据</th>
<th>预期输出</th>
<th>覆盖路径</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>(A,B,X)&#x3D;(2,0,2)</td>
<td>start main function:path a…，输入A：，输入B&#x3D;，输入X&#x3D;，path c，path e，end main function.</td>
<td>ace</td>
</tr>
<tr>
<td>2</td>
<td>(A,B,X)&#x3D;(0,1,1)</td>
<td>start main function:path a…，输入A：，输入B&#x3D;，输入X&#x3D;，path b，path d，end main function.</td>
<td>abd</td>
</tr>
</tbody></table>
</li>
<li><p>判定覆盖测试</p>
<table>
<thead>
<tr>
<th>用例序号</th>
<th>输入数据</th>
<th>预期输出</th>
<th>覆盖路径</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>(A,B,X)&#x3D;(2,0,2)</td>
<td>start main function:path a…，输入A：，输入B&#x3D;，输入X&#x3D;，path c，path e，end main function.</td>
<td>ace</td>
</tr>
<tr>
<td>2</td>
<td>(A,B,X)&#x3D;(0,1,1)</td>
<td>start main function:path a…，输入A：，输入B&#x3D;，输入X&#x3D;，path b，path d，end main function.</td>
<td>abd</td>
</tr>
</tbody></table>
</li>
<li><p>条件覆盖测试</p>
<table>
<thead>
<tr>
<th>用例序号</th>
<th>输入数据</th>
<th>预期输出</th>
<th>覆盖路径</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>(A,B,X)&#x3D;(2,0,2)</td>
<td>start main function:path a…，输入A：，输入B&#x3D;，输入X&#x3D;，path c，path e，end main function.</td>
<td>ace</td>
</tr>
<tr>
<td>2</td>
<td>(A,B,X)&#x3D;(0,1,1)</td>
<td>start main function:path a…，输入A：，输入B&#x3D;，输入X&#x3D;，path b，path d，end main function.</td>
<td>abd</td>
</tr>
</tbody></table>
</li>
<li><p>基本路径覆盖测试</p>
<table>
<thead>
<tr>
<th>用例序号</th>
<th>输入数据</th>
<th>预期输出</th>
<th>覆盖路径</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>(A,B,X)&#x3D;(2,0,2)</td>
<td>start main function:path a…，输入A：，输入B&#x3D;，输入X&#x3D;，path c，path e，end main function.</td>
<td>ace</td>
</tr>
<tr>
<td>2</td>
<td>(A,B,X)&#x3D;(0,1,1)</td>
<td>start main function:path a…，输入A：，输入B&#x3D;，输入X&#x3D;，path b，path d，end main function.</td>
<td>abd</td>
</tr>
<tr>
<td>3</td>
<td>(A,B,X)&#x3D;(0,1,2)</td>
<td>start main function:path a…，输入A：，输入B&#x3D;，输入X&#x3D;，path b，path e，end main function.</td>
<td>abe</td>
</tr>
</tbody></table>
</li>
</ol>
<p>综上所述，基本路径覆盖测试用的测试用例最多，覆盖的路径也最多，故基本路径覆盖的覆盖率最高。</p>
<p><em><strong>注：<a href="https://blog.csdn.net/The_Azur/article/details/117936347">环形复杂度必定是基本路径个数的上限。</a></strong></em></p>
<p><img src="https://s2.loli.net/2023/05/31/HtDjYwSso3WKVFn.png" alt="Snipaste_2023-05-31_21-48-19.png"></p>
<h3 id="第四题"><a href="#第四题" class="headerlink" title="第四题"></a>第四题</h3><p>使用PMD代码分析工具针对如下被测程序，找出该程序存在的潜在缺陷，给出结果界面截图，并说明各个缺陷出现的原因。</p>
<p>被测样本程序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Coverage</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;start main function:path a...&quot;</span>);</span><br><span class="line">  <span class="type">int</span> A=<span class="number">0</span>,B=<span class="number">0</span>,X=<span class="number">0</span>;</span><br><span class="line">  <span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">  System.out.println(<span class="string">&quot;输入A：&quot;</span>);  A = s.nextInt();</span><br><span class="line">  System.out.println(<span class="string">&quot;输入B=&quot;</span>);  B = s.nextInt();</span><br><span class="line">  System.out.println(<span class="string">&quot;输入X=&quot;</span>);  X = s.nextInt();</span><br><span class="line">  s.close();  </span><br><span class="line">  <span class="keyword">if</span> (A&gt;<span class="number">1</span> &amp;&amp; B==<span class="number">0</span>) &#123;</span><br><span class="line">	X=X/A;</span><br><span class="line">	System.out.println(<span class="string">&quot;path c&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;path b&quot;</span>);  &#125;</span><br><span class="line">  <span class="keyword">if</span> (A==<span class="number">2</span> || X&gt;<span class="number">1</span>) &#123;</span><br><span class="line">	X=X+<span class="number">1</span>;</span><br><span class="line">	System.out.println(<span class="string">&quot;path e&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;path d&quot;</span>);  &#125;</span><br><span class="line">  System.out.println(<span class="string">&quot;end main function.&quot;</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>答：</p>
<p><u><em><strong>注：以下答案只参考了标准答案的一部分</strong></em></u></p>
<p><a href="https://smms.app/image/5I4amZs2cXEldHv" target="_blank"><img src="https://s2.loli.net/2023/05/31/5I4amZs2cXEldHv.jpg" alt="Z__LBIY38___C`L5GCFZSVF.jpg"></a></p>
<p>以下是可能的缺陷（感觉每个人做出来都不一样哈哈哈哈😆）：</p>
<blockquote>
<p>（1）VariableNamingConventions：</p>
<p>​		①变量应以小写字符开头，’A’’B’’X’均以大写字符开头</p>
<p>（2）UseUtilityClass：</p>
<p>​		①所有方法都是静态的，可以考虑使用实用工具类，或添加一个私		有构造函数，或使类抽象来屏蔽这个警告</p>
<p>（3）LocalVariableCouldBeFinal：</p>
<p>​		①局部变量’s’可以声明为final</p>
<p>（4）LocalVaraiableNamingConventions：</p>
<p>​		①局部变量名’A’’B’’X’不匹配’[a-z][a-zA-Z0-9]*’</p>
<p>（5）MethodArgumentCouldBeFinal：</p>
<p>​		①参数’args’未赋值，可以声明为final</p>
<p>（6）CommentRequired：</p>
<p>​		①类注释是必需的</p>
<p>​		②公共方法和构造函数的注释是必需的</p>
<p>（7）OneDeclarationPerLine：</p>
<p>​		①int A&#x3D;0,B&#x3D;0,X&#x3D;0; 每个声明为一行，可以增强代码的可读性</p>
<p>（8）UnusedAssignment：</p>
<p>​		①变量’B’的初始化式从未使用（后被重写）</p>
<p>​		②变量’A’的初始化式从未使用（后被覆盖）</p>
<p>​		③变量’X’的初始化式从未使用（后被覆盖）</p>
<p>​		④ X&#x3D;X+1; 赋给变量’X’的值从未使用过</p>
<p>（9）SystemPrintln：</p>
<p>​		①使用System.out.println</p>
<p>（10）ShortVariable：</p>
<p>​		① Scanner s &#x3D; new Scanner(System.in); 避免使用像s这样名字较		短的变量</p>
<p>​		②避免使用短名称的变量：如A,B,X</p>
<p>（11）DataflowAnomalyAnalysis：</p>
<p>​		①发现变量’A’的’DD’异常</p>
<p>​			int A&#x3D;0,B&#x3D;0,X&#x3D;0;</p>
<p>​			Scanner s &#x3D; new Scanner(System.in);</p>
<p>​		    System.out.println(“输入A：”);A &#x3D; s.nextInt();</p>
<p>​		②发现变量’X’的’DU’异常</p>
<p>​		X&#x3D;X+1;</p>
<p>​		System.out.println(“path e”);</p>
<p>​	} else {</p>
<p>​		System.out.println(“path d”);  }</p>
<p>​		System.out.println(“end main function.”);</p>
<p>​	}</p>
<p>​		③发现变量’X’的’DD’异常</p>
<p>​		int A&#x3D;0,B&#x3D;0,X&#x3D;0;</p>
<p> ​		Scanner s &#x3D; new Scanner(System.in);</p>
<p>​		System.out.println(“输入A：”);  A &#x3D; s.nextInt();</p>
<p>​		 System.out.println(“输入B&#x3D;”);  B &#x3D; s.nextInt();</p>
<p>​        System.out.println(“输入X&#x3D;”);  X &#x3D; s.nextInt();</p>
<p>​		④发现变量’B’的’DD’异常</p>
<p>​		int A&#x3D;0,B&#x3D;0,X&#x3D;0;</p>
<p>​	Scanner s &#x3D; new Scanner(System.in);</p>
<p>​	System.out.println(“输入A：”);  A &#x3D; s.nextInt();</p>
<p>​	System.out.println(“输入B&#x3D;”);  B &#x3D; s.nextInt();</p>
<p>（12）CloseResource：</p>
<p>​		①Scanner s &#x3D; new Scanner(System.in); 确保像InputStream对象		这样的资源在使用后被关闭</p>
</blockquote>
<p>我感觉第四题应该不会考🙂</p>
<p><em><strong>声明：除特殊标注外（综合考虑其他同学的答案），答案均为老师原版答案</strong></em></p>
]]></content>
      <categories>
        <category>大二下期末复习</category>
      </categories>
      <tags>
        <tag>软件测试</tag>
      </tags>
  </entry>
  <entry>
    <title>电大软件测试～第三次作业</title>
    <url>/2023/06/01/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/test3/</url>
    <content><![CDATA[<h2 id="第三次作业"><a href="#第三次作业" class="headerlink" title="第三次作业"></a>第三次作业</h2><h3 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h3><p>采用JUnit软件测试框架进行测试程序编程，实现对下面java程序进行单元测试，找出其中缺陷。然后修改缺陷，直到通过单元测试，给出测试程序脚本和运行结果界面。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">getMax</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">get_max</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> z)</span> &#123;</span><br><span class="line">	<span class="type">int</span> max;</span><br><span class="line">	<span class="keyword">if</span> (x &gt;= y) </span><br><span class="line">		max = x;</span><br><span class="line">	<span class="keyword">else</span> </span><br><span class="line">		max = y;</span><br><span class="line">	<span class="keyword">if</span> (z &gt;= x)</span><br><span class="line">		max = z;</span><br><span class="line">	<span class="keyword">return</span> max;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>答：</p>
<p>测试程序脚本：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.After;</span><br><span class="line"><span class="keyword">import</span> org.junit.Assert;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> junit.framework.TestCase;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">getMaxTest</span> <span class="keyword">extends</span> <span class="title class_">TestCase</span> &#123;</span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">       getMax Max=<span class="keyword">new</span> <span class="title class_">getMax</span>();</span><br><span class="line">       <span class="type">int</span> max= Max.get_max(<span class="number">7</span>,<span class="number">9</span>,<span class="number">8</span>);</span><br><span class="line">       Assert.assertEquals(<span class="number">9</span>,max);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Before</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@After</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">tearDown</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>以下是运行结果，发现代码有缺陷：z如果比x大，但比y小，程序会输出z，而实际情况是y最大。</p>
<p><a href="https://imgse.com/i/p9zYRRP"><img src="https://s1.ax1x.com/2023/06/01/p9zYRRP.png" alt="p9zYRRP.png" border="0" /></a></p>
<p>修改缺陷，以下是修改后的源程序：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">getMax</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">get_max</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> z)</span> &#123;</span><br><span class="line">	<span class="type">int</span> max;</span><br><span class="line">	<span class="keyword">if</span> (x &gt;= y) </span><br><span class="line">		max = x;</span><br><span class="line">	<span class="keyword">else</span> </span><br><span class="line">		max = y;</span><br><span class="line">	<span class="keyword">if</span> (z &gt;= max)</span><br><span class="line">		max = z;</span><br><span class="line">	<span class="keyword">return</span> max;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em><strong>其实就是将其中一个x改成max</strong></em></p>
<p>以下是单元测试通过的界面：</p>
<p><a href="https://imgse.com/i/p9zYoZQ"><img src="https://s1.ax1x.com/2023/06/01/p9zYoZQ.png" alt="p9zYoZQ.png" border="0" /></a></p>
<p>缺陷修改成功。</p>
<h3 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h3><p>采用Postman接口测试软件对百度百科<a href="https://baike.baidu.com/">https://baike.baidu.com/</a>搜索引擎进行接口测试。如对词条“软件工程”返回页面内容进行测试验证，给出请求参数设置、Tests脚本、Body响应结果、Test Results结果说明及运行界面。</p>
<hr>
<p>以下是笔者的分析过程：</p>
<p>​	在百度百科页面搜索软件工程，得到的网址如下：</p>
<p><a href="https://baike.baidu.com/item/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/25279?fromModule=lemma_search-box">https://baike.baidu.com/item/软件工程/25279?fromModule=lemma_search-box</a></p>
<p>如果是常规的get请求（大多数项目开发者会这样设置)，在url里面应该有<u>?word&#x3D;软件工程</u>的字符串（不一定是word这个单词，举这个例子表示形如这个url），但是该链接并不如此。</p>
<p>​	于是猜测是post请求，F12打开开发者工具对输入框进行分析，发现它在form表单里，初步断定是post请求，但是这个表单不是向当前网址提交的，表单的action属性是&#x2F;seach&#x2F;word，所以请求的url应该是其对应的绝对路径（还得拐个弯🥺），为<a href="https://baike.baidu.com/search/word">https://baike.baidu.com/search/word</a></p>
<p><a href="https://imgse.com/i/p9zUnPA"><img src="https://s1.ax1x.com/2023/06/01/p9zUnPA.png" alt="p9zUnPA.png" border="0" /></a></p>
<p><a href="https://imgse.com/i/p9zalWR"><img src="https://s1.ax1x.com/2023/06/01/p9zalWR.png" alt="p9zalWR.png" border="0"></a></p>
<p>​	还要注意到表单的method是GET方法，于是我大胆的猜测get方法也可以，经过postman测试，用get方法向<a href="https://baike.baidu.com/search">https://baike.baidu.com/search</a>也可以达到预期目标。</p>
<p><a href="https://imgse.com/i/p9za3S1"><img src="https://s1.ax1x.com/2023/06/01/p9za3S1.png" alt="p9za3S1.png" border="0"></a></p>
<hr>
<p>答：</p>
<p>请求参数设置</p>
<blockquote>
<p>URL：<a href="https://baike.baidu.com/search/word">https://baike.baidu.com/search/word</a></p>
<p>Method: post</p>
<p>Body：</p>
<p>​	键：word	值：软件工程</p>
</blockquote>
<p>或者</p>
<blockquote>
<p>URL：<a href="https://baike.baidu.com/search">https://baike.baidu.com/search</a></p>
<p>Method：GET</p>
<p>参数：</p>
<p>​	键：word	值：软件工程</p>
</blockquote>
<p>Tests脚本</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pm.<span class="title function_">test</span>(<span class="string">&quot;Status code is 200&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    pm.<span class="property">response</span>.<span class="property">to</span>.<span class="property">have</span>.<span class="title function_">status</span>(<span class="number">200</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">pm.<span class="title function_">test</span>(<span class="string">&quot;Response body is not empty&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    pm.<span class="property">response</span>.<span class="property">to</span>.<span class="property">have</span>.<span class="title function_">body</span>();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">pm.<span class="title function_">test</span>(<span class="string">&quot;The response contains the word &#x27;软件工程&#x27;&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    pm.<span class="title function_">expect</span>(pm.<span class="property">response</span>.<span class="title function_">text</span>()).<span class="property">to</span>.<span class="title function_">include</span>(<span class="string">&quot;软件工程&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>Body响应结果</p>
<p>把你操作界面的body复制下来就可以啦~内容有很多（毕竟是百度的程序员😎）</p>
<p>Test Results结果</p>
<p><a href="https://imgse.com/i/p9za5pn"><img src="https://s1.ax1x.com/2023/06/01/p9za5pn.png" alt="p9za5pn.png" border="0"></a></p>
<blockquote>
<p>可以看到Status code is 200，Response body is not empty，The response contains the word ‘软件工程’，三次测试全部通过。</p>
</blockquote>
<p>运行界面</p>
<p><a href="https://imgse.com/i/p9zaIlq"><img src="https://s1.ax1x.com/2023/06/01/p9zaIlq.png" alt="p9zaIlq.png" border="0"></a></p>
<p>但是为了图方便感觉用get直接向<a href="https://baike.baidu.com/item/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B">https://baike.baidu.com/item/软件工程</a>发请求也得行（这样子就少了很多分析啦~)</p>
]]></content>
      <categories>
        <category>大二下期末复习</category>
      </categories>
      <tags>
        <tag>软件测试</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库期末复习</title>
    <url>/2023/06/03/%E6%95%B0%E6%8D%AE%E5%BA%93/db1/</url>
    <content><![CDATA[<h2 id="第一章数据库系统概论"><a href="#第一章数据库系统概论" class="headerlink" title="第一章	数据库系统概论"></a>第一章	数据库系统概论</h2><ul>
<li><p>在数据库管理系统的层次结构中，下面哪个层次负责对数据文件进行操作访问?<br>A.操作界面层	B.语言翻译处理层	C.数据存取层	<strong>D.数据存储层</strong></p>
<p>  根据处理对象的不同，数据库管理系统的层次结构由外至内依次为应用层、语言翻译处理层、数据存取层、数据存储层。</p>
<p>  (1)应用层：是数据库管理系统与终端用户和应用程序的界面，负责处理各种数据库应用，如使用结构化查询语言<a href="https://baike.baidu.com/item/SQL?fromModule=lemma_inlink">SQL</a>发出的事务请求或嵌入通用的<a href="https://baike.baidu.com/item/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%AD%E8%A8%80?fromModule=lemma_inlink">程序设计语言</a>的应用程序对<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%BA%93?fromModule=lemma_inlink">数据库</a>的请求。</p>
<p>  (2)语言处理层：由DDL编译器、DML编译器、DCL编译器、查询器等组成，负责完成对<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AF%AD%E8%A8%80?fromModule=lemma_inlink">数据库语言</a>的各类语句进行词法分析、<a href="https://baike.baidu.com/item/%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90?fromModule=lemma_inlink">语法分析</a>和<a href="https://baike.baidu.com/item/%E8%AF%AD%E4%B9%89%E5%88%86%E6%9E%90?fromModule=lemma_inlink">语义分析</a>，生成可执行的代码。此外，还负责进行授权检验、视图转换、完整性检查、查询优化等。</p>
<p>  (3)数据存取层：将上层的集合操作转换为对<strong>记录</strong>的操作，包括扫描、排序、查找、插入、删除、修改等，完成数据的存取、路径的维护以及并发控制等任务。</p>
<p>  (4)数据存储层：由文件管理器和缓冲区管理器组成，负责完成数据的页面存储和系统的缓冲区管理等任务，包括打开和关闭文件、读写页面、读写缓冲区、页面淘汰、内外存交换以及外层管理等。</p>
</li>
<li><p>在数据库领域技术中，下面哪种技术可以实现数据集成?<br>A.数据库技术	<strong>B.数据仓库技术</strong>	C.数据挖掘技术	D.商业智能技术</p>
<p>数据仓库 (Data Warehouse) 简称DW，存储大量数据的集成中心。数据仓库的目的是构建面向分析的集成化数据环境，为企业提供决策支持（Decision-Support）。它为企业提供一定的BI（商业智能）能力，指导业务流程改进、监视时间、成本、质量以及控制。数据库挖掘可建立在数据仓库基础上进行数据分析处理。</p>
</li>
<li><p>下面哪种数据库系统应用结构适合银行业务系统?<br>A.集中式结构    B.客户&#x2F;服务器结构	<strong>C.分布式结构</strong>	D.以上结构都可以<br>  分布式数据库的应用场景主要特征是海量并发，所以理论说，业务规模越大，使用分布式数据库的需求也就越迫切。</p>
</li>
<li><p>MySql——应用广泛的开源<strong>关系</strong>数据库管理系统，<em>不是企业级DBMS</em>，PostgreSQL——技术领先的开源<strong>对象-关系</strong>数据库管理系统</p>
</li>
<li><p>下面哪个程序实现PostgreSQL服务器起停控制？pg_ctl</p>
<blockquote>
<p>初始化数据库<br>pg_ctl init<br>启动数据库<br>pg_ctl start<br>关闭数据库<br>pg_ctl stop<br>重启数据库<br>pg_ctl restart </p>
</blockquote>
</li>
<li><p>下面哪类数据库是功能最强大的数据库?<br>A.MySQL	B.PostgreSQL	<strong>C.Oracle Database</strong>	D.SQL Server<br>Oracle Database——甲骨文公司推出的企业级数据库管理系统</p>
</li>
<li><p>SQLite数据库可以在手机中运行</p>
</li>
<li><p>用户程序可以直接访问数据库文件吗？<br>用户程序通常不能直接访问数据库文件。一般来说，用户程序需要通过应用程序向数据库管理系统（DBMS）发送请求，然后由DBMS解析请求并从数据库中检索所需的数据，最后将数据返回给应用程序，以便用户可以使用它们。这样做可以保证数据的安全性和完整性。</p>
</li>
<li><p>NOSQL数据库适用于存储非结构化或半结构化数据的场景。</p>
</li>
<li><p><strong>元数据</strong>（<strong>Metadata</strong>），又称<strong>中介数据</strong>、<strong>中继数据</strong>，为描述<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE/5947370?fromModule=lemma_inlink">数据</a>的数据（data about data），主要是描述数据<a href="https://baike.baidu.com/item/%E5%B1%9E%E6%80%A7/1405051?fromModule=lemma_inlink">属性</a>（property）的<a href="https://baike.baidu.com/item/%E4%BF%A1%E6%81%AF/111163?fromModule=lemma_inlink">信息</a>，用来支持如指示存储位置、<a href="https://baike.baidu.com/item/%E5%8E%86%E5%8F%B2/360?fromModule=lemma_inlink">历史</a>数据、<a href="https://baike.baidu.com/item/%E8%B5%84%E6%BA%90/9089683?fromModule=lemma_inlink">资源</a>查找、文件记录等功能。业务规则数据在数据库中也是一种元数据。正确</p>
</li>
<li><p>下面哪类数据库应用系统需要使用数据分析处理技术？决策支持</p>
</li>
<li><p>记录（Record）<br>表中的每一行称为一个<strong>记录</strong>，它由若干个字段组成．<br>字段（Field）<br>也称域．表中的每一列称为一个<strong>字段</strong>．每个字段都有相应的描述信息，如数据类型、数据宽度等</p>
</li>
</ul>
<h2 id="第二章数据库关系模型"><a href="#第二章数据库关系模型" class="headerlink" title="第二章	数据库关系模型"></a>第二章	数据库关系模型</h2><p>实体完整性是指关系表的属性组成必须是完整的。错误！！</p>
<p>自然连接是一种等值连接。正确！！</p>
<p>代理键是为了唯一标识关系的不同元组，需要在表单或报表中显示出来。错误！！</p>
<p>关系表：</p>
<blockquote>
<p>表中每行存储实体的一个实例数据表中每列包含实体的一项属性数据表中单元格只能存储单个值<br>不允许有重复的行<br>不允许有重复的列列<br>顺序可任意<br>行顺序可任意</p>
</blockquote>
<p>笛卡尔积：</p>
<p><a href="https://smms.app/image/IGhF634XaVM19PY" target="_blank"><img src="https://s2.loli.net/2023/06/03/IGhF634XaVM19PY.png" ></a></p>
<p>在关系中，可以用来唯一标识元组的属性列，称为<strong>键</strong>(Key)，其它属性列都为非键列。</p>
<p><strong>复合键</strong>(Compound Key)——是指关系中用来唯一标识元组的多列作为键。(学号,课程编号)就是一组复合键。</p>
<p><strong>候选键</strong>(Candidate Key)——关系中可能有多个列均适合作为键，将其中每个都称为候选键。</p>
<p><strong>主键</strong>(Primary key)是关系表中最有代表性的一个候选键。每个关系表中只能定义一个主键。</p>
<p>主键的作用：</p>
<blockquote>
<p>唯一标识关系表的每行（元组)<br>与关联表的外键建立联系，实现关系表之间连接<br>数据库文件使用主键值来组织关系表的数据存储<br>数据库使用主键索引快速检索数据</p>
</blockquote>
<p><strong>代理键</strong>——采用DBMS自动生成的数字序列作为关系表的主键。<br>代理键有什么用途?<br>由DBMS自动生成的数字序列作为主键，可替代复合主键，以便获得更高性能的数据访	问操作处理。</p>
<p>关系模式语句中主键表示方法:关系名（<u>主键属性</u>，属性2，，属性x)</p>
<p><a href="https://smms.app/image/Aipa9Wvl3EJYZHb" target="_blank"><img src="https://s2.loli.net/2023/06/03/Aipa9Wvl3EJYZHb.png" ></a></p>
<p><strong>关系模型</strong>(Relation Model)——是一种基于二维表结构存储数据实体及实体间联系的数据模型。</p>
<p>集合运算操作包括<strong>选择</strong>(select)、<strong>投影</strong>（project)、<strong>连接</strong>（join) 、<strong>交</strong>(intersection）、<strong>并</strong>(union)、<strong>差</strong>(difference）等。<br>专门关系操作包括数据行<strong>插入</strong>(Insert) 、<strong>修改</strong>(Update）、<strong>删除</strong>(Delete）操作。</p>
<p><a href="https://smms.app/image/iPBg21lY8NzprSx" target="_blank"><img src="https://s2.loli.net/2023/06/03/iPBg21lY8NzprSx.png" ></a></p>
<p>以下是老师给的答案，有些许小错误，提供个思路就可以啦~</p>
<p><a href="https://smms.app/image/oT586hL2t3Zcj7f" target="_blank"><img src="https://s2.loli.net/2023/06/03/oT586hL2t3Zcj7f.png" ></a></p>
<p>关系模型完整性是指在关系数据模型中对关系实施的完整性约束。</p>
<p>完整性约束作用:</p>
<blockquote>
<p>消除关系表的元组重复存储</p>
<p>保持关联表的数据一致性</p>
<p>实现业务数据规则</p>
</blockquote>
<p>关系模型完整性约束分类:</p>
<ul>
<li>实体完整性约束</li>
</ul>
<p><strong>实体完整性</strong>是指在关系表中实施的<strong>主键取值约束</strong>，以保证关系表中的每个元组可以被唯	一标识。</p>
<p>实体完整性约束规则:</p>
<p>①每个关系表中的主键属性列都<strong>不允许为空值</strong>(NULL)，否则就不可能标识实体。</p>
<p>②现实世界中的实体是靠主键来标识，<strong>主键取值应该唯一</strong>，并区分关系表中的每个元组。</p>
<ul>
<li>参照完整性约束</li>
</ul>
<p>参照完整性是指关系表之间需要遵守的数据约束，以保证关系之间关联列的数据一致性。</p>
<p><strong>参照完整性</strong>约束规则:若关系R中的外键F与关系S中的主键K相关联，则R中外键F值必须与S中主键K值一致。</p>
<p>外键(Foreign key)——在关联的两个关系中，它们具有一个或多个相同属性。若关联列在第一个关系中作为主键，则在第二个关系中作为外键。</p>
<ul>
<li>用户自定义完整性约束</li>
</ul>
<p><strong>用户自定义完整性</strong>是指用户根据具体业务对数据处理规则要求所定义的数据约束。</p>
<p>用户可以定义如下类型的完整性约束:</p>
<blockquote>
<p>定义列的数据类型与取值范围</p>
<p>定义列的缺省值</p>
<p>定义列是否允许取空值</p>
<p>定义列取值唯一性</p>
<p>定义列之间的数据依赖性</p>
</blockquote>
<p>从关系的数学定义来看，关系是各个域的笛卡尔集合。(×)</p>
<p>应该是子集</p>
<ol>
<li><p>关系模型由三个部分组成：数据结构，操作集合和完整性约束。</p>
<p>(1)关系数据结构:在关系模型中,现实世界的实体以及实体间的各种联系均用单一的结构类型即关系来表示。</p>
<p>(2)关系操作集合:关系模型中常用的关系操作包括查询操作和插入、删除、修改操作。</p>
<p>(3)关系完整性约束:关系模型中有实体完整性约束、参照完整性约束和用户定义的完整性约束三类约束。</p>
</li>
<li><p>在关系模型中，对关系有几种基本的数据操作方式，包括选择，投影，连接，除法等。这些操作可以用来查询、更新和控制关系数据。</p>
</li>
<li><p>关系数据查询中的选择运算是从关系中选择满足特定条件的元组。投影运算是从关系中选择特定属性列。连接运算是根据两个关系中共同属性的值相等来组合两个关系中的元组。</p>
</li>
<li><p>θ连接(内连接)是指在两个关系上执行一个比较运算符θ的连接操作。θ为“&#x3D;”的连接运算称为等值连接，自然连接是一种特殊的等值连接（两个关系中进行比较的分量必须是相同的属性组），它在连接后自动删除重复的列。</p>
</li>
<li><p>左外连接返回左表中所有记录和右表中匹配记录；如果右表中没有匹配记录，则结果为NULL。右外连接返回右表中所有记录和左表中匹配记录；如果左表中没有匹配记录，则结果为NULL。全外连接返回左表和右表中所有记录；如果其中一个表没有匹配记录，则结果为NULL。</p>
</li>
</ol>
<h2 id="第三章数据库操作SQL语言"><a href="#第三章数据库操作SQL语言" class="headerlink" title="第三章	数据库操作SQL语言"></a>第三章	数据库操作SQL语言</h2><ul>
<li><p>SQL语言是一种标准的数据库操作语言，可以支持所有数据库访问操作（错）</p>
<p>  主流的关系型数据库管理系统均支持SQL标准语言实现数据库操作</p>
</li>
<li><p>下面哪种数据类型不是PostgreSQL支持的数据类型?<br>A.json	B.line	C. macaddr	<strong>D. String</strong><br>  PostgreSQL支持<code>json</code>，<code>line</code>和<code>macaddr</code>数据类型。但是，它不支持名为<code>String</code>的数据类型。在PostgreSQL中，可以使用<code>text</code>或<code>varchar</code>数据类型来存储字串。</p>
</li>
</ul>
<h3 id="数据定义语句（DDL）"><a href="#数据定义语句（DDL）" class="headerlink" title="数据定义语句（DDL）"></a>数据定义语句（DDL）</h3><p>创建数据库：</p>
<figure class="highlight postgresql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> databse CourseDB;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">database</span> CourseDB <span class="keyword">rename</span> <span class="keyword">to</span> courseDB;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">database</span> courseDB;</span><br></pre></td></tr></table></figure>

<p>定义基本表 CREATE  TABLE</p>
<p>CREATE  TABLE 表名();</p>
<table>
<thead>
<tr>
<th>数据类型</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>CHAR(n)</td>
<td>长度为 n 的字符型</td>
</tr>
<tr>
<td>VARCHAR(n)</td>
<td>最大长度为 n 的变长字符型</td>
</tr>
<tr>
<td>NUMBER(n)</td>
<td>长度为 n 的数字型</td>
</tr>
<tr>
<td>lNT</td>
<td>长整型(4B)</td>
</tr>
<tr>
<td>SMALLlNT</td>
<td>短整型(2B)</td>
</tr>
<tr>
<td>BlGlNT</td>
<td>大整型(8B)</td>
</tr>
<tr>
<td>FLOAT(n)</td>
<td>精度至少为 n 位数字的浮点数</td>
</tr>
<tr>
<td>DATE</td>
<td>日期， 格式为 YYYY-MM-DD</td>
</tr>
<tr>
<td>TlME</td>
<td>时间， 格式为 HH:MM:SS</td>
</tr>
</tbody></table>
<p><strong>列级完整性约束条件</strong></p>
<blockquote>
<p>PRlMARY KEY	&#x2F;&#x2F;主码:当只有一个主码时，可直接在对应的属性列标注<br>NOT NULL	&#x2F;&#x2F;非空:表示该属性列不能取空值<br>UNlQUE	&#x2F;&#x2F;唯一值: 表示该属性列只能取唯一值<br>CHECK(条件) 	   &#x2F;&#x2F;检查:  检查该列是否满足某个条件，如 CHECK(某属性&gt;20)</p>
</blockquote>
<p>列完整约束</p>
<figure class="highlight postgresql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span>  <span class="keyword">TABLE</span>  Course</span><br><span class="line">( CourseID  	<span class="type">char</span>(<span class="number">4</span>)      <span class="keyword">PRIMARY  Key</span>,</span><br><span class="line">  CourseName  	<span class="type">varchar</span>(<span class="number">20</span>)  <span class="keyword">NOT</span>  <span class="keyword">NULL</span>  <span class="keyword">UNIQUE</span>,</span><br><span class="line">  CourseType  	<span class="type">varchar</span>(<span class="number">10</span>)  <span class="keyword">NULL</span> <span class="keyword">CHECK</span>(CourseType <span class="keyword">IN</span>(<span class="string">&#x27;基础课&#x27;</span>,<span class="string">&#x27;专业课&#x27;</span>,<span class="string">&#x27;选修课&#x27;</span>)),</span><br><span class="line">  TestMethod  	<span class="type">char</span>(<span class="number">4</span>)      <span class="keyword">NOT</span>  <span class="keyword">NULL</span>  <span class="keyword">DEFAULT</span>  <span class="string">&#x27;闭卷考试&#x27;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>复合主键</p>
<figure class="highlight postgresql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span>  <span class="keyword">TABLE</span>  Plan</span><br><span class="line">( CourseID  	<span class="type">char</span>(<span class="number">4</span>)  	<span class="keyword">NOT</span>  <span class="keyword">NULL</span>,</span><br><span class="line">  TeacherID  	<span class="type">char</span>(<span class="number">4</span>)  	<span class="keyword">NOT</span>  <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">CONSTRAINT</span>	CoursePlan_PK	<span class="keyword">PRIMARY Key</span>(CourseID,TeacherID)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>使用表约束定义主键的优点:便于定义复合主键，可命名主键约束，便于定义代理键。</p>
<p>代理键</p>
<figure class="highlight postgresql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span>  <span class="keyword">TABLE</span>  Plan</span><br><span class="line">( CoursePlanID	<span class="type">serial</span>		<span class="keyword">NOT</span>  <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">CONSTRAINT</span>	CoursePlan_PK	<span class="keyword">PRIMARY Key</span>(CoursePlanID)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>外键,级联删除</p>
<figure class="highlight postgresql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span>  <span class="keyword">TABLE</span>  Register</span><br><span class="line">( CourseRegID  	<span class="type">serial</span>	<span class="keyword">NOT</span>  <span class="keyword">NULL</span>,</span><br><span class="line">  CoursePlanID  	<span class="type">Int</span>  		<span class="keyword">NOT</span>  <span class="keyword">NULL</span>,</span><br><span class="line">  StudentID  	<span class="type">char</span>(<span class="number">13</span>),</span><br><span class="line">  Note  		<span class="type">varchar</span>(<span class="number">30</span>),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span>	CourseRegID_PK	<span class="keyword">PRIMARY Key</span>(CourseRegID),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span>	CoursePlanID_FK	<span class="keyword">FOREIGN Key</span>(CoursePlanID)</span><br><span class="line">	<span class="keyword">REFERENCES</span>  Plan(CoursePlanID)</span><br><span class="line">    <span class="keyword">ON</span> <span class="keyword">DELETE</span> <span class="keyword">CASCADE</span>,</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>表修改</p>
<figure class="highlight postgresql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> &lt;<span class="type">name</span>&gt; <span class="keyword">add</span> &lt;columnName&gt; &lt;<span class="keyword">type</span>&gt; &lt;<span class="keyword">constraint</span>&gt;;</span><br></pre></td></tr></table></figure>

<figure class="highlight postgresql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span>&lt;表名&gt; <span class="keyword">DROP</span>  <span class="keyword">COLUMN</span> &lt;列名&gt;；</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span>&lt;表名&gt; <span class="keyword">DROP</span>  <span class="keyword">CONSTRAINT</span> &lt;列名&gt;；</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> &lt;表名&gt; <span class="keyword">RENAME</span> <span class="keyword">TO</span> &lt;新表名&gt;；</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> &lt;表名&gt; <span class="keyword">RENAME</span> &lt;原列名&gt; <span class="keyword">TO</span> &lt;新列名&gt;；</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> &lt;表名&gt; <span class="keyword">ALTER</span>  <span class="keyword">COLUMN</span> &lt;列名&gt; <span class="keyword">TYPE</span>&lt;新的数据类型&gt;；</span><br></pre></td></tr></table></figure>

<p>索引作用:支持对数据库表中数据快速查找，其原理类似图书目录，可以快速定位章节内容。</p>
<p>索引优点:</p>
<blockquote>
<p>可快速连接关联表<br>减少分组和排序时间<br>提高关系表数据检索速度</p>
</blockquote>
<p>索引局限:</p>
<blockquote>
<p>索引会占用额外存储空间<br>创建和维护索引都需要较大时间开销											<br>数据操纵因维护索引带来系统性能开销</p>
</blockquote>
<p>创建索引<br>例:在学生信息表Student中，为出生日期Birthday列创建索引，以便支持按出生日期快	速查询学生信息。</p>
<figure class="highlight postgresql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> Birthday_Idx <span class="keyword">ON</span> STUDENT (Birthday) ;</span><br></pre></td></tr></table></figure>

<p>修改索引<br>例在学生信息表Student中，将原索引Birthday_ldx更名为Bday_ldx，其索引修改SQL	语句如下</p>
<figure class="highlight postgresql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">INDEX</span> Birthday_Idx <span class="keyword">RENAME</span> T0 Bday_ldx ;</span><br></pre></td></tr></table></figure>

<p>删除索引</p>
<figure class="highlight postgresql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span>  <span class="keyword">INDEX</span> bday_idx；</span><br></pre></td></tr></table></figure>

<h3 id="数据操纵语句（DML）"><a href="#数据操纵语句（DML）" class="headerlink" title="数据操纵语句（DML）"></a>数据操纵语句（DML）</h3><p>插入</p>
<figure class="highlight postgresql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Student <span class="keyword">VALUES</span>(<span class="string">&#x27;2017220101105&#x27;</span>,<span class="string">&#x27;赵东&#x27;</span>,<span class="string">&#x27;女&#x27;</span>,<span class="string">&#x27;1999-04-23&#x27;</span>,<span class="string">&#x27;软件工程&#x27;</span>, <span class="string">&#x27;liuyin@163.com&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>更新</p>
<figure class="highlight postgresql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span>  Student</span><br><span class="line"><span class="keyword">SET</span>  Email=<span class="string">&#x27;zhaodong@163.com&#x27;</span></span><br><span class="line"><span class="keyword">WHERE</span>   StudentName=<span class="string">&#x27;赵东&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>删除</p>
<figure class="highlight postgresql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> </span><br><span class="line"><span class="keyword">FROM</span>  STUDENT</span><br><span class="line"><span class="keyword">WHERE</span>   StudentName=<span class="string">&#x27;赵东&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>清空</p>
<figure class="highlight postgresql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> STUDENT;</span><br></pre></td></tr></table></figure>

<h3 id="数据查询语句（DQL）"><a href="#数据查询语句（DQL）" class="headerlink" title="数据查询语句（DQL）"></a>数据查询语句（DQL）</h3><p>先分组再排序！！！</p>
<figure class="highlight postgresql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  [<span class="keyword">ALL</span>|<span class="keyword">DISTINCT</span>]  &lt;目标列&gt;[，&lt;目标列&gt;…]</span><br><span class="line">[ <span class="keyword">INTO</span> &lt;新表&gt; ]</span><br><span class="line"><span class="keyword">FROM</span>  &lt;表名|视图名&gt;[，&lt;表名|视图名&gt;…]</span><br><span class="line">[ <span class="keyword">WHERE</span>  &lt;条件表达式&gt; ]</span><br><span class="line">[ <span class="keyword">GROUP</span> <span class="keyword">BY</span>  &lt;列名&gt; [<span class="keyword">HAVING</span> &lt;条件表达式&gt; ]]</span><br><span class="line">[ <span class="keyword">ORDER</span> <span class="keyword">BY</span>  &lt;列名&gt; [ <span class="keyword">ASC</span> | <span class="keyword">DESC</span> ] ];</span><br></pre></td></tr></table></figure>

<p>1）使用BETWEEN..AND关键词来限定列值范围，还可以使用关键词LIKE与通配符来限定查询条件。<br>2)使用通配符来限定字符串数据范围。下划线（_）通配符用于代表一个未指定的字符。百分号(%）通配符用于代表一个或多个未指定的字符。</p>
<figure class="highlight postgresql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> STUDENT</span><br><span class="line"><span class="keyword">WHERE</span> BirthDay <span class="keyword">BETWEEN</span> <span class="string">&#x27;2000-01-01&#x27;</span> <span class="keyword">AND</span> <span class="string">&#x27;2000-12-30&#x27;</span>;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> STUDENT <span class="keyword">WHERE</span> Email <span class="keyword">LIKE</span> <span class="string">&#x27;%@163.com &#x27;</span> ;</span><br></pre></td></tr></table></figure>

<p><a href="https://smms.app/image/oiIjqcgDLa6Vud7" target="_blank"><img src="https://s2.loli.net/2023/06/03/oiIjqcgDLa6Vud7.png" ></a></p>
<p><a href="https://smms.app/image/GOKjh5RsYXb16uA" target="_blank"><img src="https://s2.loli.net/2023/06/03/GOKjh5RsYXb16uA.png" ></a></p>
<p>例1:若要统计Student表中的学生人数，在SELECT语句中可以使用COUNT )函数来计算，其查询SQL语句如下:</p>
<figure class="highlight postgresql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> COUNT(*) <span class="keyword">AS</span> 学生人数 <span class="keyword">FROM</span> Student;</span><br></pre></td></tr></table></figure>

<p>例2:找出STUDENT表中年龄最大和年龄最小的学生出生日期，其查询SQL语句如下:</p>
<figure class="highlight postgresql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Min (Birthday) <span class="keyword">AS</span> 最大年龄,Max (Birthday) <span class="keyword">AS</span> 最小年龄 <span class="keyword">FROM</span> Student;</span><br></pre></td></tr></table></figure>

<p>分组：</p>
<p>having 是对于 group by 的列的条件约束,除了group外,列名称不能和聚合函数一起用</p>
<figure class="highlight postgresql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  Major  <span class="keyword">AS</span> 专业,  COUNT（StudentID） <span class="keyword">AS</span> 学生人数</span><br><span class="line"><span class="keyword">FROM</span>  Student</span><br><span class="line"><span class="keyword">WHERE</span>  StudentGender=’男’</span><br><span class="line"><span class="keyword">GROUP</span>  <span class="keyword">BY</span>  Major</span><br><span class="line"><span class="keyword">HAVING</span>  COUNT(*)&gt;<span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<p>子查询：</p>
<figure class="highlight postgresql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  TeacherID,  TeacherName,  TeacherTitle</span><br><span class="line"><span class="keyword">FROM</span>  Teacher</span><br><span class="line"><span class="keyword">WHERE</span>  CollegeID  <span class="keyword">IN</span></span><br><span class="line">        (<span class="keyword">SELECT</span>  CollegeID  </span><br><span class="line">     <span class="keyword">FROM</span>  College</span><br><span class="line">     <span class="keyword">WHERE</span>  CollegeName=’计算机学院’);</span><br></pre></td></tr></table></figure>

<p>多表关联查询：</p>
<p>在选课管理系统数据库中，希望获得各个学院的教师信息列表，包括学院名称、教师编号、教师姓名、教师性别、职称等信息。要求按学院名称、教师编号分别排序输出，其查询SQL语句如下：</p>
<figure class="highlight postgresql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  B.CollegeName <span class="keyword">AS</span> 学院名称,  A.TeacherID  <span class="keyword">AS</span> 编号, A.TeacherName  <span class="keyword">AS</span> 姓名,  A.TeacherGender  <span class="keyword">AS</span> 性别,  A. TeacherTitle  <span class="keyword">AS</span> 职称</span><br><span class="line"><span class="keyword">FROM</span>  Teacher  <span class="keyword">AS</span>  A，College  <span class="keyword">AS</span>  B</span><br><span class="line"><span class="keyword">WHERE</span>  A.CollegeID=B.CollegeID </span><br><span class="line"><span class="keyword">ORDER</span>  <span class="keyword">BY</span>  B.CollegeName, A.TeacherID;</span><br></pre></td></tr></table></figure>

<p>在选课管理数据库中，希望查询所有开设课程的学生选课情况，包括课程名称、任课教师、选课学生人数。这需要关联课程信息表COURSE、教师信息表TEACHER、开课计划表PLAN、选课注册信息表REGISTER。其连接查询的SQL语句如下：</p>
<figure class="highlight postgresql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> C.CourseName <span class="keyword">AS</span> 课程名称, T.TeacherName <span class="keyword">AS</span> 教师, </span><br><span class="line">  COUNT (R.CoursePlanID)  <span class="keyword">AS</span> 选课人数</span><br><span class="line"><span class="keyword">FROM</span>  COURSE  <span class="keyword">AS</span>  C  <span class="keyword">JOIN</span>  PLAN  <span class="keyword">AS</span>  P  <span class="keyword">ON</span>  C.CourseID=P.CourseID </span><br><span class="line">  <span class="keyword">JOIN</span>  TEACHER  <span class="keyword">AS</span>  T  <span class="keyword">ON</span>  P.TeacherID=T.TeacherID</span><br><span class="line">  <span class="keyword">JOIN</span>  REGISTER  <span class="keyword">AS</span>  R  <span class="keyword">ON</span>  P.CoursePlanID=R.CoursePlanID</span><br><span class="line"><span class="keyword">GROUP</span>  <span class="keyword">BY</span> C.CourseName, T.TeacherName;</span><br></pre></td></tr></table></figure>

<p>在上面的内连接查询中，只能找出有学生注册的课程名称和选课人数，但不能找出没有学生注册的课程名称。<br>在SQL应用中，有时候也希望输出那些不满足连接条件的元组数据。这时，可使用JOIN–ON外连接方式实现。其实现方式有三种形式，具体如下:</p>
<blockquote>
<p><strong>LEFT JOIN</strong>:左外连接，即使没有与右表关联列值匹配，也从左表返回所<br>有的行。<br><strong>RIGHT JOIN</strong>:右外连接，即使没有与左表关联列值匹配，也从右表返回<br>所有的行。<br><strong>FULL JOIN</strong>:全外连接，同时进行左连接和右连接，就返回所有行。</a></p>
</blockquote>
<p>对A表和B表进行关联查询，哪种连接可以使B表中不匹配的元组数据可以出现在结果集中?<br>A. left join	<strong>B. right join</strong>	C. full join	D. inner join</p>
<p>在选课管理系统数据库中，希望能查询所有开设课程的学生选课情况，包括课程名称、任课教师、选课学生人数。这需要关联课程信息表COURSE、开课计划表CPLAN、教师信息表TEACHER、选课注册信息表REGISTER。若使用左外连接查询，该JOIN–ON连接查询的SQL语句如下:</p>
<figure class="highlight postgresql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> C.CourseName <span class="keyword">AS</span> 课程名称, T.TeacherName <span class="keyword">AS</span> 教师, </span><br><span class="line">COUNT  (R.CoursePlanID)  <span class="keyword">AS</span> 选课人数</span><br><span class="line"><span class="keyword">FROM</span>  COURSE  <span class="keyword">AS</span>  C  <span class="keyword">JOIN</span>  PLAN  <span class="keyword">AS</span>  P  </span><br><span class="line"><span class="keyword">ON</span>  C.CourseID=P.CourseID </span><br><span class="line"><span class="keyword">JOIN</span>  TEACHER  <span class="keyword">AS</span>  T  <span class="keyword">ON</span>  P.TeacherID=T.TeacherID</span><br><span class="line"><span class="keyword">LEFT  JOIN</span>  REGISTER  <span class="keyword">AS</span>  R  <span class="keyword">ON</span>  P.CoursePlanID=R.CoursePlanID</span><br><span class="line"><span class="keyword">GROUP</span>  <span class="keyword">BY</span> C.CourseName, T.TeacherName;</span><br></pre></td></tr></table></figure>

<h3 id="数据控制语句（DCL）"><a href="#数据控制语句（DCL）" class="headerlink" title="数据控制语句（DCL）"></a>数据控制语句（DCL）</h3><p>授予，收回，拒绝权限</p>
<figure class="highlight postgresql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GRANT</span>  <span class="keyword">SELECT</span>, <span class="keyword">INSERT</span>, <span class="keyword">UPDATE</span>, <span class="keyword">DELETE</span>  <span class="keyword">ON</span>  REGISTER  <span class="keyword">TO</span>  RoleS;</span><br><span class="line"><span class="keyword">REVOKE</span>  <span class="keyword">DELETE</span>  <span class="keyword">ON</span>  REGISTER  <span class="keyword">FROM</span>  RoleS;</span><br><span class="line">DENY  <span class="keyword">DELETE</span>  <span class="keyword">ON</span>  TEACHER  <span class="keyword">TO</span>  RoleT;</span><br></pre></td></tr></table></figure>

<p>视图是一个虚拟的表，它是从一个或几个基本表（或视图）导出的表。它包含行和列，就像一个真实的表一样。视图本身并不包含任何数据，它只包含映射到基表的一个查询语句。当基表数据发生变化时，视图数据也随之变化。我们可以向视图添加 SQL 函数、WHERE 以及 JOIN 语句，也可以提交数据，就像这些来自于某个单一的表一样。数据库的设计和结构不会受到视图中的函数、where 或 join 语句的影响。</p>
<p>视图的优点：</p>
<blockquote>
<ol>
<li>使用视图简化复杂SQL查询操作</li>
<li>使用视图提高数据访问安全性</li>
<li>提供一定程度的数据逻辑独立性通过视图，可提供一定程度的数据逻辑独立性。当数据表结构发生改变，只要视图结构不变，应用程序可以不作修改。</li>
<li>集中展示用户所感兴趣的特定数据通过视图，可以将部分用户不关心的数据进行过滤，仅仅提供他们所感兴趣的数据。</li>
</ol>
</blockquote>
<p>创建视图</p>
<figure class="highlight postgresql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span>  <span class="keyword">VIEW</span>  BasicCourseView  <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span>  CourseName,  CourseCredit,  CoursePeriod,  TestMethod</span><br><span class="line"><span class="keyword">FROM</span>    COURSE</span><br><span class="line"><span class="keyword">WHERE</span>  CourseType=‘基础课’;</span><br></pre></td></tr></table></figure>

<p>查询视图：</p>
<figure class="highlight postgresql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> BasicTeacherInfoView <span class="keyword">ORDER</span> <span class="keyword">BY</span> 所属学院,教师姓名;</span><br></pre></td></tr></table></figure>

<p>删除视图：</p>
<figure class="highlight postgresql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span>&lt;视图名&gt;;</span><br></pre></td></tr></table></figure>

<p>下面哪项不是SQL语言的特性?<br>A.对数据库进行操作<br>B.实现控制逻辑编程<br>C.数据库游标操作<br>D.数据库事务操作</p>
<p><code>实现控制逻辑编程</code> 不是 SQL 语言的特性。SQL 语言是一种用于管理关系数据库的语言，它可以用来对数据库进行操作、数据库游标操作和数据库事务操作。但它不是一种通用的编程语言，不能用来实现控制逻辑编程。</p>
<p><strong>NUMERIC</strong>数据类型是一种精确数字数据类型，其精度在算术运算后保留到最小有效位，numeric是标准sql的数据类型，格式是numeric(m，n）。numeric(a，b)函数有两个参数，前面一个为总的位数，后面一个参数是小数点后的位数，例如numeric（5，2）是总位数为5，小数点后为2位的数，也就是说这个字段的整数位最大是3位。</p>
<p>在数据库中，使用更多索引可以加快数据库处理速度。（x）<br><em><strong>索引可以加快查询速度，但不能加快处理速度</strong></em></p>
<p><a href="https://smms.app/image/cGdF3HSLoqhszr2" target="_blank"><img src="https://s2.loli.net/2023/06/03/cGdF3HSLoqhszr2.png" alt="image.png"></a></p>
<p>针对视图 <code>Create view stuView as select * from student;</code> 可以进行 <code>D.以上均可</code> 操作访问。这个视图定义了一个查询语句，它从 <code>student</code> 表中选择所有列和所有行。因此，可以对这个视图执行 <code>SELECT</code>、<code>INSERT INTO</code> 和 <code>DELETE</code> 操作。<br>针对视图 <code>Create view stuView as select stuname, major from student;</code> 可以进行 <code>A. Select</code>,<code>C. delete</code> 操作访问。这个视图定义了一个查询语句，它从 <code>student</code> 表中选择 <code>stuname</code> 和 <code>major</code> 列。由于这个视图只包含部分列，因此不能对其执行 <code>INSERT INTO</code> 操作。</p>
<h2 id="第四章-数据库设计与实现"><a href="#第四章-数据库设计与实现" class="headerlink" title="第四章 数据库设计与实现"></a>第四章 数据库设计与实现</h2><p><strong>概念数据模型</strong>（Concept Data Model，CDM）是一种<strong>面向用户</strong>的系统数据模型，它用来描述现实世界的系统概念化数据结构。使数据库设计人员在系统设计的初始阶段，摆脱计算机系统及DBMS的具体技术问题，集中精力分析业务数据以及数据之间的联系等，描述系统的数据对象及其组成关系。 </p>
<p><strong>逻辑数据模型</strong> (Logic Data Model，LDM)是在概念数据模型基础上，从系统设计角度描述系统的数据对象组成及其关联结构，并考虑这些数据对象符合数据库对象的逻辑表示。 </p>
<p><strong>物理数据模型</strong>（Physical Data Model，PDM）是在逻辑数据模型基础上，针对具体DBMS所设计的数据模型。它用于描述系统数据模型在具体DBMS中的数据对象组织、<strong>存储方式</strong>、<strong>索引方式</strong>、访问路径等实现信息。（面向编程人员）</p>
<p>在E-R模型中，基本元素包括实体、属性、标识符和联系。</p>
<p><strong>实体</strong>(Entity)是指问题域中存在的人、事、物、地点等客观事物在逻辑层面的数据抽象。它用于描述事物的数据对象，如客户、交易、产品、订单等。</p>
<p><strong>属性</strong>是指描述实体特征的数据项。每个实体都具有1个或多个属性。</p>
<p><img src="https://cdn.jsdelivr.net/gh/uestc-wxy/blog_img/img/Snipaste_2023-06-04_13-51-33.png"></p>
<p>实体联系的实例数量称为<strong>基数</strong>(Cardinality) 。</p>
<p><img src="https://cdn.jsdelivr.net/gh/uestc-wxy/blog_img/img/Snipaste_2023-06-04_14-19-51.png"></p>
<p><strong>联系</strong>：实体间的联系，关联的实体数目称为联系度数</p>
<p>实体联系类型</p>
<ul>
<li>数量关系：1：1、1：N、M：N</li>
<li>必要性：可选，强制。</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/uestc-wxy/blog_img/img/Snipaste_2023-06-04_14-20-21.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/uestc-wxy/blog_img/img/Snipaste_2023-06-04_14-21-28.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/uestc-wxy/blog_img/img/Snipaste_2023-06-04_14-22-01.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/uestc-wxy/blog_img/img/Snipaste_2023-06-04_14-22-12.png"></p>
<p>在E-R模型中，根据弱实体在语义上对强实体依赖程度的不同，弱实体又分为<strong>标识符依赖弱实体</strong>和<strong>非标识符依赖弱实体</strong>两类。如果弱实体的标识符中包含了所依赖实体的标识符，则该弱实体称为标识符依赖弱实体。</p>
<p>当使用关系数据库时，物理数据模型（PDM）即为关系模型。CDM&#x2F;LDM到PDM的转换其实就是E-R模型图到关系模型的转换。<br>E-R模型图到关系模型转换原理:</p>
<blockquote>
<p>将每一个实体转换成一个关系表，实体属性转换为关系表的列，实体标识符转换为关系表的主键或外键。将实体之间的联系转化为关系表之间的参照完整性约束。</p>
</blockquote>
<p>1:1实体联系：</p>
<p><img src="https://cdn.jsdelivr.net/gh/uestc-wxy/blog_img/img/Snipaste_2023-06-04_19-30-41.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/uestc-wxy/blog_img/img/Snipaste_2023-06-04_19-31-07.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/uestc-wxy/blog_img/img/Snipaste_2023-06-04_19-31-22.png"></p>
<p>当带有实体继承联系的E-R模型图转换关系模型时，首先父实体和子实体都各自转换为表，其属性均转换为表的列。在处理实体继承联系转换时，将父表中的主键放置到子表中，既做主键又做外键。</p>
<p><img src="https://cdn.jsdelivr.net/gh/uestc-wxy/blog_img/img/Snipaste_2023-06-04_19-39-02.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/uestc-wxy/blog_img/img/Snipaste_2023-06-04_19-40-14.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/uestc-wxy/blog_img/img/Snipaste_2023-06-04_19-40-27.png"></p>
<p>数据库规范化设计目的：</p>
<ul>
<li>减少数据库中的冗余数据，尽量使同一数据在数据库中仅保存一份，有效降低维护数据一致性的工作量。</li>
<li>设计合理的表间依赖关系和约束关系，便于实现数据完整性和一致性。</li>
<li>设计合理的数据库结构，便于系统对数据高效访问处理。</li>
</ul>
<p><strong>完全函数依赖与部分函数依赖</strong></p>
<p>例1：对于关系R（<u>X</u>,<u> Y</u>, N, O, P），其中（<u>X</u>,<u> Y</u>）为复合主键，若其它属性N,O,P都完整依赖于该复合主键，则称关系R为完全函数依赖。反之，其它属性N,O,P仅依赖于X，或仅依赖于Y，则称R为部分函数依赖。</p>
<p><strong>函数传递依赖</strong></p>
<p>例2：对于关系R（<u>X</u>, N, O, P），其中X为主键，若属性N依赖于X，而X不依赖于N，属性O依赖于N。则属性O函数传递依赖于X。</p>
<p><strong>多值函数依赖</strong></p>
<p>例3：对于教学关系R（课程, 教师, 课程参考书），一门课程可以有多个任课教师，也可以有多本参考书；每个任课教师可以任意选择他的参考书。该关系存在多值函数依赖。</p>
<p>如果X、Y是1:1的联系，则X↔Y。<br>如学号联系电话，即知道了学号，就可以在表中确定其联系电话;同样地，知道了联系电话，也可以在表中确定其学号。</p>
<p>如果X，Y是n :1的联系，则X→Y。<br>如学号-班号，即知道了学号，就可以在表中确定其班号;相反地，如果知道了班号，却无法确定学号。</p>
<p>如果X、Y是m : n的联系，则X和Y不存在函数依赖关系。<br>如学号和课程号没有函数依赖关系。即知道了学号，无法在表中确定课程号;同样地，如果知道了课程号，也无法确定学号。</p>
<p><strong>关系规范化范式</strong>：将一个有异常访问的关系分解成结构良好的关系的过程，使这些关系有最小冗余或没有冗余。</p>
<p>一般在我们设计关系型数据库的时候，<strong>最多考虑到BCNF就够</strong>。符合高一级范式的设计，必定符合低一级范式，例如符合2NF的关系模式，必定符合1NF。</p>
<p><em>关系模式”和“关系”的区别，类似于面向对象程序设计中”类“与”对象“的区别。”关系“是”关系模式“的一个实例，你可以把”关系”理解为一张带数据的表，而“关系模式”是这张数据表的表结构。</em></p>
<ul>
<li><p>第一范式：关系表中属性不可再细分。</p>
<p><img src="https://cdn.jsdelivr.net/gh/uestc-wxy/blog_img/img/670f90e0d6a186d12a2a4545aea3ecd3.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/uestc-wxy/blog_img/img/fcb526f0fae9df53625b573a822010e5.png"></p>
</li>
<li><p>第二范式：消除部分函数依赖，满足第一范式。</p>
<p>对于关系R（<u>X</u>,<u> Y</u>, N, O, P），其中（<u>X</u>,<u> Y</u>）为复合主键，N,O,P这三个非键属性都不存在只依赖A或只依赖B情况，则该关系满足第2范式,反之,不满足第2范式。</p>
<p><img src="https://cdn.jsdelivr.net/gh/uestc-wxy/blog_img/img/18eb762805d229aedb0c0046fceba05f.png"></p>
<p>对于<strong>（学号，课名） → 姓名</strong>，有 <strong>学号 → 姓名</strong>，存在部分函数依赖。<br>对于<strong>（学号，课名） → 系名</strong>，有 <strong>学号 → 系名</strong>，存在部分函数依赖。<br>对于<strong>（学号，课名） → 系主任</strong>，有 <strong>学号 → 系主任</strong>，存在部分函数依赖。</p>
<p><img src="https://cdn.jsdelivr.net/gh/uestc-wxy/blog_img/img/0f18dc0ff9021cf8a32473f18065b11f.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/uestc-wxy/blog_img/img/0dee50526984e0c559f2b29b4bff492f.png"></p>
</li>
<li><p>第三范式：切断属性传递依赖，满足第二范式。</p>
<p>接下来我们看看上表中的设计，是否符合3NF的要求。</p>
<p>对于<strong>选课</strong>表，主码为（学号，课名），主属性为<strong>学号</strong>和<strong>课名，</strong>非主属性只有一个，为分数，不可能存在传递函数依赖，所以<strong>选课</strong>表的设计，符合3NF的要求。</p>
<p>对于<strong>学生</strong>表，主码为<strong>学号</strong>，主属性为<strong>学号</strong>，非主属性为<strong>姓名</strong>、<strong>系名</strong>和<strong>系主任</strong>。因为 学号 → 系名，同时 系名 → 系主任，所以存在非主属性<strong>系主任</strong>对于码<strong>学号</strong>的传递函数依赖，所以<strong>学生</strong>表的设计，不符合3NF的要求。</p>
<p><img src="https://cdn.jsdelivr.net/gh/uestc-wxy/blog_img/img/81582f29379da3cbd33f483e3978b701.jpg"></p>
<p><img src="https://cdn.jsdelivr.net/gh/uestc-wxy/blog_img/img/ebb592146a8c9226463de96b70780c2b.png"></p>
</li>
<li><p>巴斯-科德范式(BCNF)：所有属性函数依赖的决定因子都是候选键。在3NF基础上，任何<a href="https://baike.baidu.com/item/%E4%B8%BB%E5%B1%9E%E6%80%A7/120103?fromModule=lemma_inlink">主属性</a>不能对主键子集依赖（在3NF基础上消除主属性对主码子集的依赖）</p>
<p>举例：</p>
<ol>
<li>某公司有若干个仓库；</li>
<li>每个仓库只能有一名管理员，一名管理员只能在一个仓库中工作；</li>
<li>一个仓库中可以存放多种物品，一种物品也可以存放在不同的仓库中。每种物品在每个仓库中都有对应的数量。</li>
</ol>
<p>那么关系模式 仓库（仓库名，管理员，物品名，数量） 属于哪一级范式？</p>
<p>答：已知函数依赖集：仓库名 → 管理员，管理员 → 仓库名，（仓库名，物品名）→ 数量<br>主属性：仓库名、管理员、物品名<br>非主属性：数量<br>∵ 不存在非主属性对码的部分函数依赖和传递函数依赖。∴ 此关系模式属于3NF。</p>
<p>但是存在主属性【仓库名】对于码（管理员，物品名）的部分函数依赖。</p>
<p>解决办法就是要在 3NF 的基础上消除<strong>主属性</strong>对于码的部分与传递函数依赖。</p>
<p>仓库（仓库名，管理员）<br>库存（仓库名，物品名，数量）</p>
</li>
<li><p>第四范式：消除多值函数依赖，满足巴斯-科德范式</p>
<p><img src="https://cdn.jsdelivr.net/gh/uestc-wxy/blog_img/img/Snipaste_2023-06-04_21-43-16.png"></p>
</li>
</ul>
<p>关系的规范化程度依次提升:1NF→2NF →3NF→BCNF→ 4NF<br>关系的规范化程度越高，关系数据库存储的冗余数据就越少，可消除的数据访问异常就越多。不过关系的规范化程度越高，分解出来的关系表就越多，但在数据查询访问时，需关联更多关系表，其数据库处理效率会降低。</p>
<p>综合例题：</p>
<p><img src="https://cdn.jsdelivr.net/gh/uestc-wxy/blog_img/img/Snipaste_2023-06-06_11-43-30.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/uestc-wxy/blog_img/img/Snipaste_2023-06-06_11-43-41.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/uestc-wxy/blog_img/img/Snipaste_2023-06-06_11-43-49.png"><img src="https://cdn.jsdelivr.net/gh/uestc-wxy/blog_img/img/Snipaste_2023-06-06_11-43-59.png"><img src="https://cdn.jsdelivr.net/gh/uestc-wxy/blog_img/img/Snipaste_2023-06-06_11-44-09.png"><img src="https://cdn.jsdelivr.net/gh/uestc-wxy/blog_img/img/Snipaste_2023-06-06_11-44-15.png"><img src="https://cdn.jsdelivr.net/gh/uestc-wxy/blog_img/img/Snipaste_2023-06-06_11-44-21.png"><img src="https://cdn.jsdelivr.net/gh/uestc-wxy/blog_img/img/Snipaste_2023-06-06_11-44-28.png"><img src="https://cdn.jsdelivr.net/gh/uestc-wxy/blog_img/img/Snipaste_2023-06-06_11-44-37.png">所谓<strong>逆规范化</strong>，就是适当降低规范化范式约束，不再要求一个关系表必须达到很高的规范化程度，而是允许适当的数据冗余性，以获取数据访问性能。<br>逆规范化处理的基本方法:<br>(1)增加冗余列或派生列<br>(2)多个关系表合并为一个关系表</p>
<p>在E-R模型中，一个实体的其他关联实体数量称为什么？联系度数</p>
<p>在E-R模型图中，在定义一个实体时，必须指定它的标识符。 错误！！</p>
<h2 id="第五章-数据库管理"><a href="#第五章-数据库管理" class="headerlink" title="第五章 数据库管理"></a>第五章 数据库管理</h2><p>数据库管理概论</p>
<p>是指为保证数据库系统的正常运行和服务质量必须进行的系统管理工作。</p>
<p>为什么需要数据库管理?</p>
<ul>
<li>数据库系统随规模增大,系统会变得异常复杂</li>
<li>多用户数据库应用带来数据库访问复杂性</li>
<li>数据安全和数据隐私对机构和用户都非常重要</li>
<li>数据库系统随数据量增加和使用时间增长其性能会降低</li>
<li>系统遭遇意外事件，数据库损坏或数据丢失</li>
</ul>
<p>数据库管理目标</p>
<ul>
<li>保障数据库系统正常稳定运行</li>
<li>充分发挥数据库系统的软硬件处理能力</li>
<li>确保数据库系统安全和用户数据隐私性</li>
<li>有效管理数据库用户及其角色权限</li>
<li>解决数据库系统性能优化、系统故障与数据损坏等问题</li>
<li>最大程度地发挥数据库对其所属机构的作用</li>
</ul>
<p>在数据库中，<strong>事务</strong>(Transaction）是指针对<strong>单个业务处理功能</strong>的一组数据库访问操作，要求它们要么都成功执行，要么都不执行。在数据库系统中，<em><strong>事务是DBMS执行的最小任务单元。同时，事务也是DBMS最小的故障恢复任务单元和并发控制任务单元。</strong></em></p>
<p>事务<strong>ACID</strong>特性:</p>
<blockquote>
<p><strong>原子性</strong>（Atomicity):事务所有操作在数据库中要么全部执行，要么全部不执行。<br><strong>一致性</strong>(Consistency) :事务多次执行，其结果应一致。<br><strong>隔离性</strong>（lsolation):事务与事务之间隔离，并发执行透明。<br><strong>持续性</strong>(Durability ) :事务完成后，数据改变必须是永久的。</p>
</blockquote>
<p>事务SQL</p>
<ul>
<li>BEGIN 或 START TRANSACTION ；事务开始语句</li>
<li>ROLLBACK ；事务回滚语句</li>
<li>COMMIT ；事务提交语句</li>
<li>SAVEPOINT ；事务保存点语句</li>
</ul>
<p><a href="https://imgse.com/i/pCP9sAg"><img src="https://s1.ax1x.com/2023/06/05/pCP9sAg.png" alt="pCP9sAg.png" border="0" /></a><br>例：在选课管理数据库CurriculaDB中，使用事务程序实现对学院信息表College的数据插入，其事务SQL程序如下：</p>
<figure class="highlight postgresql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">START</span> <span class="keyword">TRANSACTION</span>;</span><br><span class="line"><span class="keyword">INSERT</span>  <span class="keyword">INTO</span> college( collegeID, collegename)<span class="keyword">VALUES</span> (<span class="string">&#x27;004&#x27;</span>, <span class="string">&#x27;外语学院&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span>  <span class="keyword">INTO</span> college( collegeID, collegename)<span class="keyword">VALUES</span> (<span class="string">&#x27;005&#x27;</span>, <span class="string">&#x27;数学学院&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span>  <span class="keyword">INTO</span> college( collegeID, collegename)<span class="keyword">VALUES</span> (<span class="string">&#x27;006&#x27;</span>, <span class="string">&#x27;临床医学院&#x27;</span>);</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure>

<p>在事务过程中禁止使用的SQL语句：</p>
<blockquote>
<p>创建数据库 CREATE  DATABASE<br>修改数据库 ALTER  DATABASE<br>删除数据库 DROP  DATABASE<br>恢复数据库 RESTORE  DATABASE<br>加载数据库 LOAD  DATABASE<br>备份日志文件 BACKUP  LOG<br>恢复日志文件 RESTORE  LOG<br>授权操作 GRANT</p>
</blockquote>
<p>若用户没有显式地定义事务时，DBMS按默认事务方式处理，<strong>即每执行一个SQL语句将自动构成一个事务</strong>。若将多条SQL语句定义为一个事务时，才使用专门的事务SQL语句显式地定义事务。</p>
<p>为什么需要并发控制？</p>
<p>当多个事务程序在DBMS系统中同时运行时，可能会出现对一些共享数据同时进行访问操作，如一些事务修改数据，另一些事务读取数据。这些并发的共享数据操作，如果在DBMS中没有一定的约束控制情况下，可能会带来<strong>数据不一致性</strong>或<strong>事务程序死锁</strong>问题。因此，在多个事务并发运行时，必须进行并发控制处理。</p>
<p>并发控制–事务调度</p>
<p>目的</p>
<ul>
<li>支持并发事务处理，使更多用户并行操作，提高系统的并发访问能力。</li>
<li>保证一个事务工作不会对另一个事务工作产生不合理的影响。</li>
</ul>
<p>并发控制需解决的问题：</p>
<ul>
<li>丢失更新数据：对共享数据进行非锁定资源的读写操作。</li>
<li>脏数据读取：事务读取一个被取消持久化的共享数据。（事务读到的数据最后被回滚了，读到的是假数据）</li>
<li>不可重复读取：指一个事务对一个共享数据重复多次读取，但前后读取的数据不一致。（修改或删除）</li>
<li>幻像读取：后一次读比前一次读多了一些记录（插入）</li>
</ul>
<p><strong>并发事务调度</strong>就是控制多个事务的<strong>数据操作语句按照恰当的顺序访问共享数据</strong>，使这些事务执行之后，避免造成数据的不一致性，即解决“丢失更新数据”、“不可重复读”、“脏数据读”等问题。</p>
<p><strong>事务调度策略</strong></p>
<p>例：银行客户A的账户当前余款为1000元，客户B的账户当前余款为1500元。现在有两个事务T1和T2，其中T1事务将从客户A转账200元到客户B，T2事务也将从客户A转账400元到客户B。</p>
<p><img src="https://cdn.jsdelivr.net/gh/uestc-wxy/blog_img/img/Snipaste_2023-06-05_20-18-05.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/uestc-wxy/blog_img/img/Snipaste_2023-06-05_20-18-14.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/uestc-wxy/blog_img/img/Snipaste_2023-06-05_20-18-31.png"></p>
<p>在事务并发执行中，只有当事务中数据操作调度顺序的执行结果与事务串行执行结果一样时，该并发事务调度才能保证数据操作的正确性和一致性。符合这样效果的调度称为<strong>可串行化调度</strong>。<br>DBMS并发事务调度目标：使并发事务调度实现的处理结果与串行化调度处理结果<strong>一致</strong>。</p>
<p>锁</p>
<ul>
<li><strong>排它锁定</strong>(Lock-X)——锁定后，<strong>不允许</strong>其它事务对共享数据再加锁</li>
<li><strong>共享锁定</strong>(Lock-S)——锁定后，只允许其它事务对共享数据<strong>添加读取锁</strong></li>
</ul>
<p>资源锁定粒度</p>
<ul>
<li>数据库——粒度最大</li>
<li>表——粒度较大</li>
<li>页面——粒度中等</li>
<li>行——粒度小</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/uestc-wxy/blog_img/img/Snipaste_2023-06-05_20-28-05.png"></p>
<p>加锁协议</p>
<p><strong>一级加锁协议</strong>：任何事务在修改共享数据对象之前，必须对该数据执行排它锁定指令，直到该事务处理完成，才进行解锁指令执行。</p>
<p>特点：使用一级加锁协议，可<strong>避免出现更新丢失</strong>问题。但不能解决“不可重复读取”、“脏读”等数据不一致问题。</p>
<p>例：某航班剩余机票数据A的当前值为100张。现有分别来自不同售票点的两个并发事务T1和T2，其中T1事务将售出1张机票，T2事务将售出2张机票。以下分别给出它们在不加锁和按一级加锁协议的并发事务调度执行情况，见下图所示。</p>
<p><img src="https://cdn.jsdelivr.net/gh/uestc-wxy/blog_img/img/Snipaste_2023-06-05_20-37-29.png"></p>
<p><strong>二级加锁协议</strong>：在一级加锁协议基础上，针对并发事务的共享数据读操作，<strong>必须对该数据执行共享锁定指令</strong>，<strong>读完数据后即刻释放共享锁定</strong>。</p>
<p>特点：该加锁协议不但可以防止“丢失更新”的数据不一致性问题，还可防止出现<strong>脏读数据</strong>问题。但有可能会出现“不可重复读取”的数据不一致问题。</p>
<p>例：某航班剩余机票数据A的当前值为100张。现有分别来自不同售票点的两个并发事务T1和T2，其中T1事务将售出1张机票，T2事务进行机票空余数查询。以下分别给出它们在按一级加锁协议执行和按二级加锁协议的事务调度执行情况，见下图所示。</p>
<p><img src="https://cdn.jsdelivr.net/gh/uestc-wxy/blog_img/img/Snipaste_2023-06-05_20-39-03.png"></p>
<p><strong>三级加锁协议</strong>：在一级加锁协议基础上，当并发事务对共享数据进行读操作，必须对该数据执行共享锁定指令，直到该<strong>事务处理结束才释放共享锁定</strong>。</p>
<p>特点：该加锁协议不但可以防止“丢失更新”、“脏读”的数据不一致性问题，还可防止出现“不可重复读取”的数据一致性问题。</p>
<p>例：某航班剩余机票数据A的当前值为100张。现有分别来自不同售票点的两个并发事务T1和T2，其中T1事务将售出1张机票，T2事务进行机票空余数查询。以下分别给出它们在按二级加锁协议执行和按三级加锁协议的并发事务调度执行情况，见下图所示。</p>
<p><img src="https://cdn.jsdelivr.net/gh/uestc-wxy/blog_img/img/Snipaste_2023-06-05_20-39-19.png"></p>
<p>不同级别锁协议比较</p>
<table>
<thead>
<tr>
<th align="left"><strong>加锁协议级别</strong></th>
<th align="left"><strong>排它锁</strong></th>
<th align="left"><strong>共享锁</strong></th>
<th align="left"><strong>不丢失更新</strong></th>
<th align="left"><strong>不脏读</strong></th>
<th align="left"><strong>可重复读</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="left"><strong>一级</strong></td>
<td align="left">全程加锁</td>
<td align="left">不加</td>
<td align="left">是</td>
<td align="left">否</td>
<td align="left">否</td>
</tr>
<tr>
<td align="left"><strong>二级</strong></td>
<td align="left">全程加锁</td>
<td align="left">开始时加锁，读完数据释放锁定</td>
<td align="left">是</td>
<td align="left">是</td>
<td align="left">否</td>
</tr>
<tr>
<td align="left"><strong>三级</strong></td>
<td align="left">全程加锁</td>
<td align="left">全程加锁</td>
<td align="left">是</td>
<td align="left">是</td>
<td align="left">是</td>
</tr>
</tbody></table>
<p>保证并发事务可串行化的一个协议是：<strong>二阶段锁定协议</strong></p>
<p>二阶段锁定协议规定每个事务必须分两个阶段提出加锁和解锁申请:</p>
<blockquote>
<p>增长阶段，事务只能获得锁，但不能释放锁。</p>
<p>缩减阶段，事务只能释放锁，但不能获得新锁。</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/uestc-wxy/blog_img/img/Snipaste_2023-06-05_20-58-44.png"></p>
<p>在基于锁机制的并发事务执行中，如果这些事务同时锁定两个以及以上资源时，可能会出现彼此都不能继续执行的状态，即<strong>事务死锁</strong>状态。</p>
<p>例 两个事务T1和T2，它们都需要加锁访问数据库表Table1和Table2，其事务程序见图6-20a所示。当这两个事务程序调度执行时，只要不是按可串行化调度执行，则它们在执行时会出现死锁状态，见图6-20b所示。</p>
<p><img src="https://cdn.jsdelivr.net/gh/uestc-wxy/blog_img/img/Snipaste_2023-06-05_21-01-25.png"></p>
<p>死锁出现的必要条件</p>
<ul>
<li><p>互斥条件</p>
</li>
<li><p>请求和保持条件</p>
</li>
<li><p>不剥夺条件</p>
</li>
<li><p>环路等待条件</p>
</li>
</ul>
<p>防范死锁的策略</p>
<ul>
<li><p>允许事务一次发出当前所需全部资源的锁定，使用完成后，再释放给其它事务使用。</p>
</li>
<li><p>规定所有应用程序锁定资源的顺序必须完全相同。</p>
</li>
</ul>
<p>解决死锁的办法：当发生死锁时，回滚其中的一个事务，并取消它对数据库所做的改动。<br><img src="https://cdn.jsdelivr.net/gh/uestc-wxy/blog_img/img/Snipaste_2023-06-05_21-03-36.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/uestc-wxy/blog_img/img/Snipaste_2023-06-05_21-10-46.png"></p>
<p>例：创建一个新用户，其账号名字为“userA”，密码为“123456”。该用户具有登录权限(Login）和角色继承权限（Inherit）系统权限，但它不是超级用户(SuperUser)，不具有创建数据库权限（CreateDB)、创建角色权限（CreateRole）、数据库复制权限（Replication) ,此外数据库连接数(Connection Limit）不受限。</p>
<figure class="highlight postgresql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> &quot;userA&quot; <span class="keyword">WITH</span></span><br><span class="line">	<span class="keyword">LOGIN</span> <span class="comment">--登录权限</span></span><br><span class="line">	<span class="keyword">NOSUPERUSER</span> <span class="comment">--不是超级用户</span></span><br><span class="line">	<span class="keyword">NOCREATEDB</span> <span class="comment">--不能创建数据库</span></span><br><span class="line">	<span class="keyword">NOCREATEROLE</span> <span class="comment">--没有创建角色权限</span></span><br><span class="line">	INHHERIT <span class="comment">--继承系统权限</span></span><br><span class="line">	<span class="keyword">NOREPLICATION</span> <span class="comment">--没有数据库复制权限</span></span><br><span class="line">	<span class="keyword">CONNECTION</span> <span class="number">-1</span> <span class="comment">--数据库连接数不受限</span></span><br><span class="line">	<span class="keyword">PASSWORD</span> <span class="string">&#x27;123456&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>修改删除用户：</p>
<figure class="highlight postgresql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span>  &lt;用户名&gt;  [ [ <span class="keyword">WITH</span> ] <span class="keyword">option</span> [ ... ] ];  	<span class="comment">--修改用户的属性</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span>  &lt;用户名&gt;  <span class="keyword">RENAME</span> <span class="keyword">TO</span> &lt;新用户名&gt;;  		<span class="comment">--修改用户的名称</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span>  &lt;用户名&gt;  <span class="keyword">SET</span> &lt;参数项&gt; &#123; <span class="keyword">TO</span> | = &#125; &#123; <span class="keyword">value</span> | <span class="keyword">DEFAULT</span> &#125;;												<span class="comment">--修改用户的参数值  </span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span>  &lt;用户名&gt;  <span class="keyword">RESET</span> &lt;参数项&gt;;			<span class="comment">--重置用户参数值</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> userA;</span><br></pre></td></tr></table></figure>

<p>例：修改用户“userA”的账号密码为“gres123”。同时也限制该用户的数据库连接数为10。</p>
<figure class="highlight postgresql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> &quot;userA&quot; </span><br><span class="line">	<span class="keyword">CONNECTION</span> <span class="keyword">LIMIT</span> <span class="number">10</span></span><br><span class="line">	<span class="keyword">PASSWORD</span> <span class="string">&#x27;gres123&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>在DBMS中，为了方便对众多用户及其权限进行管理，通常将一组具有相同权限的用户定义为<strong>角色</strong>(Role)。</p>
<figure class="highlight postgresql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span>  <span class="keyword">ROLE</span>  &lt;角色名&gt; [ [ <span class="keyword">WITH</span> ] <span class="keyword">option</span> [ ... ] ]; 	 <span class="comment">--创建角色</span></span><br><span class="line"><span class="keyword">ALTER</span>  <span class="keyword">ROLE</span>  &lt;角色名&gt;  [ [ <span class="keyword">WITH</span> ] <span class="keyword">option</span> [ ... ] ]; 	 <span class="comment">--修改角色属性</span></span><br><span class="line"><span class="keyword">ALTER</span>  <span class="keyword">ROLE</span>  &lt;角色名&gt;  <span class="keyword">RENAME</span> <span class="keyword">TO</span> &lt;新角色名&gt;; 		 <span class="comment">--修改角色名称 </span></span><br><span class="line"><span class="keyword">ALTER</span>  <span class="keyword">ROLE</span>  &lt;角色名&gt;  <span class="keyword">SET</span> &lt;参数项&gt; &#123; <span class="keyword">TO</span> | = &#125; &#123; <span class="keyword">value</span> | <span class="keyword">DEFAULT</span> &#125;; </span><br><span class="line">									 <span class="comment">--修改角色参数值</span></span><br><span class="line"><span class="keyword">ALTER</span>  <span class="keyword">ROLE</span>  &lt;角色名&gt;  <span class="keyword">RESET</span> &lt;参数项&gt;;			 <span class="comment">--复位角色参数值</span></span><br><span class="line"><span class="keyword">DROP</span>  <span class="keyword">ROLE</span>  &lt;角色名&gt;;						 <span class="comment">--删除指定角色</span></span><br></pre></td></tr></table></figure>

<p>例 ：在工程项目管理系统中，假定需要在ProjectDB数据库内创建经理角色Role_Manager。该角色具有登录权限（Login）和角色继承权限（Inherit）系统权限，但它不是超级用户（SuperUser），不具有创建数据库权限（CreateDB）、创建角色权限（CreateRole）、数据库复制权限（Replication），此外数据库连接数（Connection Limit）不受限。</p>
<figure class="highlight postgresql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span>  <span class="keyword">ROLE</span>  &quot;Role_Manager&quot;  <span class="keyword">WITH</span></span><br><span class="line"> <span class="keyword">LOGIN</span></span><br><span class="line"> <span class="keyword">NOSUPERUSER</span></span><br><span class="line"> <span class="keyword">NOCREATEDB</span></span><br><span class="line"> <span class="keyword">NOCREATEROLE</span></span><br><span class="line"> <span class="keyword">INHERIT</span></span><br><span class="line"> <span class="keyword">NOREPLICATION</span></span><br><span class="line"> <span class="keyword">CONNECTION</span> <span class="keyword">LIMIT</span> <span class="number">-1</span>;</span><br></pre></td></tr></table></figure>

<p>角色权限授予</p>
<figure class="highlight postgresql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span>,<span class="keyword">INSERT</span>,<span class="keyword">UPDATE</span>,<span class="keyword">DELETE</span>  <span class="keyword">ON</span>  Department  <span class="keyword">TO</span> &quot;Role_Manager&quot;;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/uestc-wxy/blog_img/img/Snipaste_2023-06-05_21-26-06.png"></p>
<p><strong>数据库备份方法</strong>：</p>
<ul>
<li>完全数据库备份</li>
<li>差异数据库备份</li>
<li>事务日志备份</li>
<li>文件备份</li>
</ul>
<p>下面哪种备份文件是恢复数据库到故障点时刻状态必不可少的?</p>
<p>A．数据库完整备份文件	B．数据库差异备份文件</p>
<p><strong>C．事务日志备份文件</strong>	D．数据库文件备份</p>
<p>C. 事务日志备份文件是恢复数据库到故障点时刻状态必不可少的。事务日志是数据库管理系统用来记录数据库中的所有修改操作的文件。在进行数据库恢复时，事务日志记录的变更可以被用来重做或者撤销，从而将数据库恢复到某个指定的时间点或者事务点的状态。因此，事务日志备份文件非常重要，是进行数据库恢复的必要条件。A. 数据库完整备份文件包含整个数据库的所有数据，但是无法恢复到某个指定的时间点或者事务点的状。B. 数据库差异备份文件只包含自上次完整备份或差异备份以来发生的数据变更，也无法恢复到某个指定的时间点或者事务点的状态，因此也不一定是恢复到故障点时刻状态必不可少的。D. 数据库文件备份只是将数据库文件复制到另一个位置，也无法恢复到某个指定的时间点或者事务点的状态。</p>
<p>对于意外事件导致数据库系统损坏，最可靠的技术手段是<br>A.数据库备份与恢复<br>B.采用双机容错技术<br>C.进行访问权限控制<br>D.<strong>系统异地容灾</strong></p>
<p>在数据库系统安全模型中，哪种安全管理手段是DBMS系统提供的数据库安全访问机制?</p>
<p>A.用户身份认证<br>B.<strong>用户存取权限控制</strong><br>C.文件安全访问<br>D.数据加密存储</p>
<p>哪种数据库备份方式可以支持系统连续运行?</p>
<p>A.冷备份<br>B.<strong>热备份</strong><br>C.完整备份<br>D.差异备份</p>
<p>热备份可以支持系统连续运行。热备份是一种在系统运行时备份数据库的方法，备份期间数据库可以继续提供服务，不会中断用户对数据库的访问。在热备份期间，DBMS系统会将数据库的活动日志记录下来，并将备份与日志进行同步，以确保备份的数据与源数据库保持一致。热备份可以保证数据库系统的连续性和高可用性。相对而言，冷备份是在系统停止运行时备份数据库的方法，需要停止数据库服务，将数据库系统完全关闭，进行备份操作，备份期间数据库无法提供服务。冷备份会导致数据库系统的停机时间较长，并且备份数据与源数据库之间存在时间差，无法实时保持同步。完整备份和差异备份都是备份数据的方式，完整备份是将整个数据库备份，差异备份是只备份自上次备份后发生更改的数据，但它们并不能支持数据库系统的连续运行，需要在备份期间停止数据库服务。</p>
<p>在哪个粒度上对共享数据进行加锁访问，系统并发访问性能最好？行！</p>
<p>DBMS系统可自动恢复哪类数据？事务故障的数据错误</p>
<h2 id="第六章-数据库应用编程"><a href="#第六章-数据库应用编程" class="headerlink" title="第六章 数据库应用编程"></a>第六章 数据库应用编程</h2><p>开放式数据库互连（Open DataBase Connectivity）实现了应用程序对多种不同DBMS的数据库的访问，实现了数据库连接方式的变革。</p>
<p>ODBC定义了一套基于SQL的，公共的，与数据库无关的API，从而使得应用程序与数据库管理系统之间在逻辑上独立，使应用程序与数据库无关性</p>
<p>ODBC应用程序接口(ODBCAPI)是一种使用ODBC技术实现应用程序与数据库互连的标准接口。</p>
<p><img src="https://cdn.jsdelivr.net/gh/uestc-wxy/blog_img/img/Snipaste_2023-06-05_22-26-31.png"></p>
<p>应用程序使用ODBC访问数据库的步骤：</p>
<blockquote>
<p>在ODBC驱动管理器中注册一个数据源;<br>根据数据源提供的数据库位置、数据库名称及驱动程序等信息，驱动管理器建立起ODBC与具体数据库的联系;<br>应用程序使用数据源建立与相应数据库的连接;<br>应用程序通过驱动程序管理器与数据库管理系统交换信息;<br>数据库管理系统执行完相应的SQL操作后，将结果通过驱动程序管理器返回给应用程序。</p>
</blockquote>
<h3 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h3><p><img src="https://cdn.jsdelivr.net/gh/uestc-wxy/blog_img/img/Snipaste_2023-06-05_22-26-52.png"></p>
<p>(1）加载驱动<br>加载JDBC驱动是通过调用方法:</p>
<figure class="highlight postgresql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Class</span>.forName(&quot;驱动名字&quot;)</span><br></pre></td></tr></table></figure>

<p>例PostgreSQL数据库驱动程序加载语句:</p>
<figure class="highlight postgresql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Class</span>.forName (&quot;org.postgresql.Driver&quot;)</span><br></pre></td></tr></table></figure>

<p>(2）建立连接<br>调用DriverManager. getConnection(String urI)方法建立数据库连接。</p>
<p>例：PostgreSQL数据库连接程序:</p>
<figure class="highlight postgresql"><table><tr><td class="code"><pre><span class="line">String URL = &quot;jdbc: postgresql://localhost:5432/testdb&quot;;</span><br><span class="line">String userName = &quot;myuser &quot;;</span><br><span class="line">String <span class="keyword">passWord</span> = &quot;sa&quot;;</span><br><span class="line"><span class="keyword">connection</span> conn =</span><br><span class="line">DriverManager. getConnection(URL, userName, <span class="keyword">passWord</span>);</span><br></pre></td></tr></table></figure>

<p>(3)创建Statement对象<br>采用Connection对象的createStatement()方法创建Statement对象。其语句如下:<br>Statement stmt &#x3D; conn. createStatement () ;<br>(4）执行SQL语句<br>在创建Statement对象后，就可以调用Statement对象的executeQuery()、executeUpdate()方法执行SQL语句。</p>
<ul>
<li>executeQuery()用于执行select语句</li>
<li>executeUpdate()用于执行update、 insert、 delete语句</li>
</ul>
<p>例:Statement对象的SQL执行</p>
<figure class="highlight postgresql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Statement</span> stmt = conn.createStatement() ;</span><br><span class="line">String <span class="keyword">sql</span> = &quot;INSERT INTO public.student (sid,sname,gender,birthday,major,phone)&quot; + &quot;VALUES (&#x27;2017001&#x27;，&#x27;张山&#x27;,&#x27;男&#x27;,&#x27;1998-10-10&#x27;,&#x27;软件工程&#x27;,&#x27;13602810001&#x27;)&quot;;</span><br><span class="line">stmt.executeUpdate(<span class="keyword">sql</span>) ;</span><br></pre></td></tr></table></figure>

<p>(5)ResultSet结果集<br>ResultSet对象作为结果集，它存放了执行SQL语句的返回结果数据。通过getXXX方法可以对结果集中的记录数据进行访问。<br>ResultSet中若包含了多行结果数据，可以使用记录指针访问它们。指针所指向的数据行叫做当前数据行。移动指针可以访问其他行，这需要使用ResultSet的next()方法。<br>示例代码如下:</p>
<figure class="highlight postgresql"><table><tr><td class="code"><pre><span class="line">rs = stmt.executeQuery (<span class="keyword">sql</span>) ;</span><br><span class="line"><span class="keyword">while</span>(rs.next())&#123;//依次取出数据</span><br><span class="line">	String <span class="type">name</span> = rs.getString(&quot;name&quot;) ; //取出<span class="type">name</span>列的内容</span><br><span class="line">	<span class="type">int</span> age = rs.getlnt(&quot;age&quot;) ; //取出age列的内容</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>(6）关闭连接<br>作为一种好的编程风格，在不需要ResultSet对象、Statement对象和Connection对象时，应该显式地关闭它们。关闭这些对象的方法为:close() ;<br>示例:</p>
<blockquote>
<p>rs.close();关闭结果集对象</p>
<p>stmt.close();关闭执行对象</p>
<p>conn.close();关闭连接对象</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/uestc-wxy/blog_img/img/Snipaste_2023-06-06_10-03-38.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/uestc-wxy/blog_img/img/Snipaste_2023-06-06_10-03-52.png"></p>
<p>Servlet是用Java语言编写的服务器端小程序，驻留在web服务器中运行，它扩展了web服务器的动态处理功能。</p>
<blockquote>
<p>1.客户机将HTTP请求发送给Web服务器</p>
<p>2.Web 服务器将该请求转发给Servlet</p>
<p>3.Servlet处理该请求</p>
<p>4.Servlet将响应发送给Web 服务器</p>
<p>5.Web服务器将响应转发给客户机</p>
</blockquote>
<h3 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h3><p>存储过程(Stored Procedure）是数据库中的一种对象;由一组完成特定数据处理功能的SQL语句和过程语句组成的程序;它被编译后，存储在数据库中;外部程序可以调用数据库的存储过程执行。</p>
<p>PostgreSQL使用CREATE FUNCTION命令创建存储过程。(10版本后可以用CREATE PRECEDURE)</p>
<figure class="highlight postgresql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> [ <span class="keyword">OR REPLACE</span> ] <span class="keyword">FUNCTION</span>/<span class="keyword">PROCEDURE</span>  <span class="type">name</span></span><br><span class="line">    ( [ [ argmode ] [ argname ] argtype [ &#123; <span class="keyword">DEFAULT</span> | = &#125; default_expr ] [, ...] ] )</span><br><span class="line">    [ <span class="keyword">RETURNS</span> retype | <span class="keyword">RETURNS</span> <span class="keyword">TABLE</span> ( <span class="built_in">column_name</span>  column_type [, ...] ) ]</span><br><span class="line"><span class="keyword">AS</span> $$<span class="language-java">         <span class="comment">//$$</span></span>用于声明存储过程的实际代码的开始</span><br><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">        <span class="comment">-- 声明段</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">        <span class="comment">--函数体语句</span></span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line">$$<span class="language-ruby"> <span class="variable constant_">LANGUAGE</span> lang_name;  <span class="regexp">//</span><span class="variable">$$</span></span> 表明代码的结束, <span class="keyword">LANGUAGE</span>后面指明所用的编程语言</span><br></pre></td></tr></table></figure>

<p>（1）name：要创建的存储过程名；<br>（2）OR REPLACE ：覆盖同名的存储过程；<br>（3）argmode：存储过程参数的模式可以为IN、OUT或INOUT，缺省值是IN。<br>（4）argname：形式参数的名字。<br>（5）RETURNS：返回值；RETURNS TABLE：返回二维表</p>
<p>例：创建一个名为countRecords()的过程函数统计STUDENT表的记录数。</p>
<figure class="highlight postgresql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR REPLACE</span> <span class="keyword">FUNCTION</span> countRecords ()  </span><br><span class="line"><span class="keyword">RETURNS</span> <span class="type">integer</span> <span class="keyword">AS</span> $$<span class="language-pgsql">  </span></span><br><span class="line"><span class="language-pgsql"><span class="keyword">declare</span>  </span></span><br><span class="line"><span class="language-pgsql">    count <span class="type">integer</span>;  </span></span><br><span class="line"><span class="language-pgsql"><span class="keyword">BEGIN</span>  </span></span><br><span class="line"><span class="language-pgsql">   <span class="keyword">SELECT</span> count(*) <span class="keyword">into</span> count <span class="keyword">FROM</span> STUDENT;  </span></span><br><span class="line"><span class="language-pgsql">   <span class="keyword">RETURN</span> count;  </span></span><br><span class="line"><span class="language-pgsql"><span class="keyword">END</span>;  </span></span><br><span class="line"><span class="language-pgsql">$$</span> <span class="keyword">LANGUAGE</span> plpgsql;</span><br></pre></td></tr></table></figure>

<p>练习:创建一个increment(i)的过程函数计算自增值。</p>
<figure class="highlight postgresql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR REPLACE</span> <span class="keyword">FUNCTION</span> <span class="keyword">increment</span>(i integer)</span><br><span class="line">RETURNS integer AS $$</span><br><span class="line">BEGIN</span><br><span class="line">	RETURN i + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line">$$<span class="language-pgsql"><span class="keyword">LANGUAGE</span> plpgsql;</span></span><br></pre></td></tr></table></figure>

<p>例：创建一个名为add_data (a, b，c）的存储过程实现a+b相加运算，并将结果放入c。</p>
<figure class="highlight postgresql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR REPLACE</span> <span class="keyword">PROCEDURE</span> add_data(a <span class="type">integer</span>,b <span class="type">integer</span>,<span class="keyword">inout</span> c <span class="type">integer</span>)<span class="keyword">AS</span> $$<span class="language-pgsql"></span></span><br><span class="line"><span class="language-pgsql"><span class="keyword">Begin</span></span></span><br><span class="line"><span class="language-pgsql">	c=a+b;</span></span><br><span class="line"><span class="language-pgsql"><span class="keyword">End</span>;</span></span><br><span class="line"><span class="language-pgsql">$$</span><span class="keyword">LANGUAGE</span> plpgsql;</span><br></pre></td></tr></table></figure>

<p>练习:创建一个increment_pro(i)的存储过程计算自增值。</p>
<figure class="highlight postgresql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR REPLACE</span> <span class="keyword">PROCEDURE</span> increment_pro(<span class="keyword">inout</span> i <span class="type">integer</span>)<span class="keyword">AS</span> $$<span class="language-pgsql"></span></span><br><span class="line"><span class="language-pgsql"><span class="keyword">BEGIN</span></span></span><br><span class="line"><span class="language-pgsql">	i=i+<span class="number">1</span>;</span></span><br><span class="line"><span class="language-pgsql">	<span class="keyword">Return</span>;</span></span><br><span class="line"><span class="language-pgsql"><span class="keyword">END</span>;</span></span><br><span class="line"><span class="language-pgsql">$$</span><span class="keyword">LANGUAGE</span> plpgsql;</span><br></pre></td></tr></table></figure>

<p>如果程序员需要调用<strong>函数</strong>执行，其调用方式如下:<br>select  函数名(参数);<br>或者:select * from 函数名(参数);</p>
<p>如果需要调用<strong>存储过程</strong>执行，其调用方式如下:<br>CALL存储过程名（参数)</p>
<p>删除存储过程<br>DROP FUNCTION [ IF EXISTS ] name ( [ [ argmode ] [ argname ] argtype [, …] ] ) [ CASCADE | RESTRICT ]<br>主要参数：<br>（1）IF EXISTS：如果指定的存储过程不存在，那么发出提示信息。<br>（2）name ：现存的存储过程名称。<br>（3）argmode：参数的模式：IN(缺省), OUT, INOUT, VARIADIC。请注意，实际并不注明OUT参数，因为判断存储过程的身份只需要输入参数。<br>（4）argname：参数的名字。请注意，实际上并不注明参数的名字，因为判断函数的身份只需要输入参数的数据类型。<br>（5）argtype：如果有的话，是存储过程参数的类型。<br>（6）CASCADE：级联删除依赖于存储过程的对象(如触发器)。<br>（7）RESTRICT：如果有任何依赖对象存在，则拒绝删除该函数；这个是缺省值。</p>
<p>删除前面定义的函数testExec()</p>
<figure class="highlight postgresql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">FUNCTION</span> testExec();</span><br></pre></td></tr></table></figure>

<p>例删除前面定义的存储过程maintenance()</p>
<figure class="highlight postgresql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> maintenance();</span><br></pre></td></tr></table></figure>

<h3 id="PL-x2F-pgSQL基本语法"><a href="#PL-x2F-pgSQL基本语法" class="headerlink" title="PL&#x2F;pgSQL基本语法"></a>PL&#x2F;pgSQL基本语法</h3><p>变量声明的语法如下：<br> declare<br>     变量名  变量类型；<br>如果声明变量为记录类型，变量声明格式为： variable_name RECORD;<br>注：RECORD不是真正的数据类型，只是一个占位符。</p>
<figure class="highlight postgresql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span> </span><br><span class="line">	count intger；</span><br><span class="line">    rec <span class="type">RECORD</span> ；</span><br></pre></td></tr></table></figure>

<p>条件语句<br>在PL&#x2F;pgSQL中有以下三种形式的条件语句<br>1)IF-THEN </p>
<figure class="highlight postgresql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">IF</span> <span class="type">boolean</span>-expression <span class="keyword">THEN</span></span><br><span class="line">    statements</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">IF</span>; </span><br></pre></td></tr></table></figure>

<p>2)IF-THEN-ELSE</p>
<figure class="highlight postgresql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">IF</span> <span class="type">boolean</span>-expression <span class="keyword">THEN</span></span><br><span class="line">	statements</span><br><span class="line"><span class="keyword">ELSE</span></span><br><span class="line">Statements</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">IF</span>;</span><br></pre></td></tr></table></figure>

<p> 3)IF-THEN-ELSIF-ELSE</p>
<figure class="highlight postgresql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">IF</span> <span class="type">boolean</span>-expression <span class="keyword">THEN</span></span><br><span class="line">	statements</span><br><span class="line"><span class="keyword">ELSIF</span> <span class="type">boolean</span>-expression <span class="keyword">THEN</span></span><br><span class="line">	statements</span><br><span class="line"><span class="keyword">ELSIF</span> <span class="type">boolean</span>-expression <span class="keyword">THEN</span></span><br><span class="line">     statements</span><br><span class="line"><span class="keyword">ELSE</span></span><br><span class="line">	statements</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">IF</span>; </span><br></pre></td></tr></table></figure>

<p>循环语句<br>1)LOOP 语句</p>
<figure class="highlight postgresql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">LOOP</span></span><br><span class="line"> statements</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">LOOP</span> [ label ];</span><br></pre></td></tr></table></figure>

<p>2)EXIT</p>
<figure class="highlight postgresql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">LOOP</span></span><br><span class="line">	count=count+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">EXIT</span> <span class="keyword">WHEN</span> count &gt;<span class="number">100</span>;</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">LOOP</span>;</span><br></pre></td></tr></table></figure>

<p>3)CONTINUE</p>
<figure class="highlight postgresql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">LOOP</span></span><br><span class="line"> 	count=count+<span class="number">1</span>;</span><br><span class="line"> 	<span class="keyword">EXIT</span> <span class="keyword">WHEN</span> count &gt; <span class="number">100</span>;</span><br><span class="line"> 	<span class="keyword">CONTINUE</span> <span class="keyword">WHEN</span> count &lt; <span class="number">50</span>;</span><br><span class="line"> 	count=count+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">LOOP</span>; </span><br></pre></td></tr></table></figure>

<p> 4)WHILE</p>
<figure class="highlight postgresql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">WHILE</span> amount_owed &gt; <span class="number">0</span> <span class="keyword">AND</span>  balance &gt; <span class="number">0</span> <span class="keyword">LOOP</span></span><br><span class="line">    <span class="comment">--do something</span></span><br><span class="line"><span class="keyword">END</span> <span class="keyword">LOOP</span>;</span><br></pre></td></tr></table></figure>

<p>5)FOR</p>
<figure class="highlight postgresql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FOR</span> i <span class="keyword">IN</span> <span class="number">1.</span>.<span class="number">.10</span> <span class="keyword">LOOP</span></span><br><span class="line">	<span class="keyword">RAISE</span> <span class="keyword">NOTICE</span> <span class="string">&#x27;i IS %&#x27;</span>,i;</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">LOOP</span>;</span><br><span class="line"><span class="keyword">FOR</span> i <span class="keyword">IN</span> <span class="keyword">REVERSE</span> <span class="number">10.</span>.<span class="number">.1</span>  <span class="keyword">LOOP</span></span><br><span class="line">      <span class="comment">--do something</span></span><br><span class="line"><span class="keyword">END</span> <span class="keyword">LOOP</span>;</span><br></pre></td></tr></table></figure>

<p>遍历查询结果集</p>
<figure class="highlight postgresql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FOR</span> record_or_row <span class="keyword">IN</span> query <span class="keyword">LOOP</span></span><br><span class="line">     statements</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">LOOP</span> ;</span><br></pre></td></tr></table></figure>

<p>FOR循环可以遍历命令的结果并操作相应的数据，例如：</p>
<p>编写函数实现对学生表Student的查询结果集数据输出</p>
<figure class="highlight postgresql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">function</span> Out_Record() <span class="keyword">returns</span> <span class="type">RECORD</span> <span class="keyword">as</span> $$<span class="language-pgsql"></span></span><br><span class="line"><span class="language-pgsql"><span class="keyword">declare</span> </span></span><br><span class="line"><span class="language-pgsql">	rec <span class="type">RECORD</span>;</span></span><br><span class="line"><span class="language-pgsql"><span class="keyword">FOR</span> rec <span class="keyword">IN</span> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student <span class="keyword">LOOP</span></span></span><br><span class="line"><span class="language-pgsql">	<span class="keyword">raise</span> <span class="keyword">notice</span> <span class="string">&#x27;学生数据: %,%&#x27;</span>,rec.studentID,rec.studentName; </span></span><br><span class="line"><span class="language-pgsql"><span class="keyword">END</span> <span class="keyword">LOOP</span>;</span></span><br><span class="line"><span class="language-pgsql"><span class="keyword">return</span> rec;</span></span><br><span class="line"><span class="language-pgsql"><span class="keyword">end</span>;</span></span><br><span class="line"><span class="language-pgsql">$$</span> <span class="keyword">language</span> plpgsql;</span><br></pre></td></tr></table></figure>

<h3 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h3><p>触发器是特殊类型的存储过程，其过程程序由事件(如INSERT、UPDATE、DELETE操作等）触发而自动执行。</p>
<p>触发器用途:可以实现比约束更复杂的数据完整性，经常用于加强数据的完整性约束和	业务规则。</p>
<p>触发器特点</p>
<ul>
<li>与数据库对象相关:在表或视图上执行DML、DDL操作，其定义的事件触发<br>过程程序执行。</li>
<li>DML事件触发:由执行INSERT、DELETE、UPDATE操作时触发。</li>
<li>DDL事件触发:由执行CRETE、ALTER、DROP、SELECT INTO操作时触发。</li>
</ul>
<p>按DML操作语句分类: INSERT触发器、DELETE触发器、UPDATE触发器<br>按触发器执行次数分类:</p>
<blockquote>
<p>(1）语句级触发器:由关键字FOR EACH STATEMENT声明，在触发器作用的表上执行一条SQL语句时，该触发器程序只执行一次，即使是修改了零行数据的SQL，也会导致相应的触发器执行。FOR EACH STATEMENT为默认值。</p>
<p>(2）行级触发器:由关键字FOR EACH ROW标记的触发器，当触发器所在表中数据发生变化时，每变化一行就会执行一次触发器程序。</p>
</blockquote>
<p>例：学生成绩表上定义了行级DELETE触发器。如果该表删除了20条记录，则将导致DELETE触发器程序被执行20次。</p>
<p>按触发的时间分类:</p>
<blockquote>
<p>(1）BEFORE触发器:在触发事件之前执行触发器程序。<br>(2）AFTER触发器:在触发事件之后执行触发器程序。<br>(3）INSTEAD OF触发器:当触发事件发生后，执行触发器中指定的过程程序，而不是执行产生触发事件的SQL语句。</p>
</blockquote>
<p>触发器相关的特殊变量</p>
<p>1）NEW 数据类型是RECORD。对于行级触发器，它存有INSERT或UPDATE操作产生的新的数据行。对于语句级触发器，它的值是NULL。</p>
<p>2）OLD 数据类型是RECORD。对于行级触发器，它存有被UPDATE或DELETE操作修改或删除的旧的数据行。对于语句级触发器，它的值是NULL。</p>
<p>3）TG_OP 数据类型是text；是值为INSERT、UPDATE、DELETE 的一个字符串，它说明触发器是为哪个操作引发。</p>
<p>创建触发器的基本语法</p>
<figure class="highlight postgresql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span>  <span class="keyword">TRIGGER</span>  触发器名   </span><br><span class="line">    &#123; <span class="keyword">BEFORE</span> | <span class="keyword">AFTER</span> | <span class="keyword">INSTEAD</span> <span class="keyword">OF</span> &#125;</span><br><span class="line">     <span class="keyword">ON</span> 表名</span><br><span class="line">     [ <span class="keyword">FOR</span> [ <span class="keyword">EACH</span> ] &#123; <span class="keyword">ROW</span> | <span class="keyword">STATEMENT</span> &#125; ]</span><br><span class="line">     <span class="keyword">EXECUTE</span> <span class="keyword">PROCEDURE</span> 存储过程名 ( 参数列表 )</span><br></pre></td></tr></table></figure>

<p>（1）指明所定义的触发器名<br>（2） BEFORE | AFTER | INSTEAD OF  指明触发器被触发的时间<br>（3） ON 表名 指明触发器所依附的表<br>（4） FOR  EACH  { ROW | STATEMENT }  指明触发器是行级还是列级<br>（5） EXECUTE PROCEDURE 存储过程名 ( 参数列表 )  指明触发时所执行的存储过程</p>
<p>创建触发器的基本步骤</p>
<p>（1）检查数据库中将要创建的触发器所依附的表或视图是否存在，如果不存在，必须首先创建该表或视图。</p>
<p>（2）创建触发器被触发时所要执行的触发器函数，该函数的类型必须是Trigger型，是触发器的执行函数。</p>
<p>（3）创建触发器，定义触发器依附的表，触发器被触发执行的时间，触发器是行级触发器还是语句级触发器，触发器执行需要满足的条件。</p>
<p>为了审计Grade表的课程成绩修改，创建audit_score表记录Grade表的成绩变化，其表结构如下:</p>
<figure class="highlight postgresql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> audit_score( </span><br><span class="line">    changeID <span class="type">serial</span> <span class="keyword">not</span> <span class="keyword">null</span>,						<span class="comment">--修改序列号</span></span><br><span class="line">	username <span class="type">character</span>(<span class="number">20</span>),							<span class="comment">--操作用户</span></span><br><span class="line">	sid	<span class="type">character</span>(<span class="number">13</span>),								<span class="comment">--学号</span></span><br><span class="line">	cid	<span class="type">character</span>(<span class="number">4</span>),								<span class="comment">--课程编号</span></span><br><span class="line">	updatetime <span class="type">text</span>,								<span class="comment">--修改的时间</span></span><br><span class="line">	oldscore <span class="type">int</span>,									<span class="comment">--修改前的成绩</span></span><br><span class="line">	newscore <span class="type">int</span>,									<span class="comment">--修改后的成绩</span></span><br><span class="line">	<span class="keyword">constraint</span> changeID_PK <span class="keyword">primary key</span> (changeID)</span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>创建触发器函数</p>
<figure class="highlight postgresql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">or replace</span> <span class="keyword">function</span> score_audit() </span><br><span class="line"><span class="keyword">returns</span> <span class="type">trigger</span> <span class="keyword">as</span> $score_audit$</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">TG_OP</span> == <span class="string">&#x27;DELETE&#x27;</span>) <span class="keyword">then</span></span><br><span class="line">		<span class="keyword">insert</span> <span class="keyword">into</span> audit_score(username,sid,cid,updatetime,oldscore)</span><br><span class="line">		<span class="keyword">select</span> <span class="keyword">user</span>,<span class="built_in">old</span>.studentid,<span class="built_in">old</span>.couseid,now(),<span class="built_in">old</span>.score;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">old</span>;</span><br><span class="line">	<span class="keyword">elsif</span> (<span class="built_in">TG_OP</span> == <span class="string">&#x27;UPDATE&#x27;</span>) <span class="keyword">then</span> </span><br><span class="line">		<span class="keyword">insert</span> <span class="keyword">into</span> audit_score(username,sid,cid,updatetime,oldscore,newscore)</span><br><span class="line">		<span class="keyword">select</span> <span class="keyword">user</span>,<span class="built_in">old</span>.studentid,<span class="built_in">old</span>.couseid,now(),<span class="built_in">old</span>.score,<span class="built_in">new</span>.score</span><br><span class="line">		<span class="keyword">where</span> <span class="built_in">old</span>.studentid = <span class="built_in">new</span>.sid <span class="keyword">and</span> <span class="built_in">old</span>.courseid = <span class="built_in">new</span>.cid;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">new</span>;</span><br><span class="line">	<span class="keyword">elsif</span> (<span class="built_in">TG_OP</span> == <span class="string">&#x27;INSERT&#x27;</span>) <span class="keyword">then</span></span><br><span class="line">		<span class="keyword">insert</span> <span class="keyword">into</span> audit_score(username,sid,cid,updatetime,oldscore,newscore)</span><br><span class="line">		<span class="keyword">select</span> <span class="keyword">user</span>,<span class="built_in">new</span>.studentid,<span class="built_in">new</span>.courseid,now(),<span class="keyword">null</span>,<span class="built_in">new</span>.score;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">new</span>;</span><br><span class="line">	<span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line">$score_audit$ <span class="keyword">language</span> plpgsql</span><br></pre></td></tr></table></figure>

<p>创建触发器</p>
<figure class="highlight postgresql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> score_audit_triger</span><br><span class="line"><span class="keyword">AFTER</span> <span class="keyword">INSERT</span> <span class="keyword">OR</span> <span class="keyword">UPDATE</span> <span class="keyword">OR</span> <span class="keyword">DELETE</span> <span class="keyword">ON</span> grade</span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="keyword">ROW</span> <span class="keyword">EXECUTE</span> <span class="keyword">PROCEDURE</span> score_audit();</span><br></pre></td></tr></table></figure>

<p>练习:在如下雇员表emp中被插入或更新一行数据时，触发函数程序将当前用户名和时间标记在该数据行中,并且检查雇员的姓名以及薪水是否为空，若为空，输出警示信息。</p>
<figure class="highlight postgresql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> emp (</span><br><span class="line">	emplD <span class="type">char</span>(<span class="number">3</span>) <span class="keyword">primary key</span>,</span><br><span class="line">    empname <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">	salary <span class="type">integer</span>,</span><br><span class="line">	last_date <span class="type">timestamp</span>,</span><br><span class="line">    last_user <span class="type">varchar</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>1.触发器函数程序</p>
<figure class="highlight postgresql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> emp_stamp ()<span class="keyword">RETURNS</span> <span class="type">trigger</span> <span class="keyword">AS</span> $$<span class="language-pgsql"></span></span><br><span class="line"><span class="language-pgsql">	<span class="keyword">BEGIN</span></span></span><br><span class="line"><span class="language-pgsql">		<span class="comment">--检查给出了empname以及salary</span></span></span><br><span class="line"><span class="language-pgsql">		<span class="keyword">IF</span> <span class="built_in">NEW</span>.empname <span class="keyword">IS</span> <span class="keyword">NULL</span> <span class="keyword">THEN</span></span></span><br><span class="line"><span class="language-pgsql">			<span class="keyword">RAISE</span> <span class="keyword">EXCEPTION</span> <span class="string">&#x27;雇员名不能为空&#x27;</span>;</span></span><br><span class="line"><span class="language-pgsql">		<span class="keyword">END</span> <span class="keyword">IF</span>;</span></span><br><span class="line"><span class="language-pgsql">		<span class="keyword">IF</span> <span class="built_in">NEW</span>.salary <span class="keyword">IS</span> <span class="keyword">NULL</span> <span class="keyword">THEN</span></span></span><br><span class="line"><span class="language-pgsql">			<span class="keyword">RAISE</span> <span class="keyword">EXCEPTION</span> <span class="string">&#x27;%薪水不能为空&#x27;</span>,<span class="built_in">NEW</span>.empname;</span></span><br><span class="line"><span class="language-pgsql">		<span class="keyword">END</span> <span class="keyword">IF</span>;</span></span><br><span class="line"><span class="language-pgsql">			<span class="comment">--记住谁在什么时候改变了工资单</span></span></span><br><span class="line"><span class="language-pgsql">		<span class="built_in">NEW</span>.last_date := <span class="built_in">current_timestamp</span>;</span></span><br><span class="line"><span class="language-pgsql">		<span class="built_in">NEW</span>.last_user := <span class="built_in">current_user</span>;</span></span><br><span class="line"><span class="language-pgsql">		<span class="keyword">RETURN</span> <span class="built_in">NEW</span>;</span></span><br><span class="line"><span class="language-pgsql">	<span class="keyword">END</span>;</span></span><br><span class="line"><span class="language-pgsql">$$</span> <span class="keyword">LANGUAGE</span> plpgsql ;</span><br></pre></td></tr></table></figure>

<p>2.触发器定义程序</p>
<figure class="highlight postgresql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> emp_stamp</span><br><span class="line"><span class="keyword">BEFORE</span> <span class="keyword">INSERT</span> <span class="keyword">OR</span> <span class="keyword">UPDATE</span> <span class="keyword">ON</span> emp</span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="keyword">ROW</span> <span class="keyword">EXECUTE</span> <span class="keyword">FUNCTION</span> emp_stamp();</span><br></pre></td></tr></table></figure>

<p>触发器修改</p>
<figure class="highlight postgresql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TRIGGER</span> <span class="type">name</span> <span class="keyword">ON</span> <span class="built_in">table_name</span> <span class="keyword">RENAME</span> <span class="keyword">TO</span> new_name</span><br></pre></td></tr></table></figure>

<p>主要参数说明：<br>（1）name：现有触发器的名称。<br>（2）table_name：该触发器作用的表名字。<br>（3）new_name：触发器的新名字。</p>
<p>例如：将上述定义的触发器改名为score_audit_trig</p>
<figure class="highlight postgresql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TRIGGER</span> score_audit_trigger <span class="keyword">ON</span> stu_score  <span class="keyword">RENAME</span> <span class="keyword">TO</span> score_audit_trig;</span><br></pre></td></tr></table></figure>

<p>触发器删除</p>
<figure class="highlight postgresql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TRIGGER</span> [ <span class="keyword">IF</span> <span class="keyword">EXISTS</span> ] <span class="type">name</span> <span class="keyword">ON</span> <span class="built_in">table_name</span> [ <span class="keyword">CASCADE</span> | <span class="keyword">RESTRICT</span> ]</span><br></pre></td></tr></table></figure>
<p>主要参数说明：</p>
<blockquote>
<p>（1）IF EXISTS：如果指定的触发器不存在，那么发出提示而不是抛出错误。<br>（2）name：要删除的触发器名。<br>（3）table_name：触发器定义所依附的表的名称。<br>（5）CASCADE：级联删除依赖此触发器的对象。<br>（6）RESTRICT：如果有依赖对象存在，那么拒绝删除。该参数缺省是拒绝删除。</p>
</blockquote>
<p> 例如：将上述触发器score_audit_trig删除，同时<em>级联删除</em>依赖触发器的对象。</p>
<figure class="highlight postgresql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TRIGGER</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> score_audit_trig <span class="keyword">ON</span> grade <span class="keyword">CASCADE</span>;</span><br></pre></td></tr></table></figure>

<h3 id="游标"><a href="#游标" class="headerlink" title="游标"></a>游标</h3><ul>
<li>游标（Cursor）是一种临时的数据库对象；</li>
<li>用来存放从数据库表中查询返回的数据记录；</li>
<li>提供了从结果集中提取并分别处理每一条记录的机制；</li>
<li>游标总是与一条SQL查询语句相关联；</li>
<li>游标包括：SQL语言的查询结果，指向特定记录的指针。</li>
</ul>
<p>声明游标</p>
<blockquote>
<p>使用refcursor关键词定义的游标变量</p>
<p>使用游标声明语句定义游标<br>游标名	CURSOR [ ( arguments ) ] FOR query</p>
</blockquote>
<p>例：</p>
<figure class="highlight postgresql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Declare</span></span><br><span class="line">curs	<span class="type">refcursor</span>;</span><br><span class="line">curStudent <span class="keyword">CURSOR</span> <span class="keyword">FOR</span> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student;</span><br><span class="line">curStudentOne <span class="keyword">CURSOR</span> (key <span class="type">integer</span>)  <span class="keyword">IS</span> </span><br><span class="line">            <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> SID = key;</span><br></pre></td></tr></table></figure>

<p>打开游标<br>（1）OPEN FOR:<br>打开未绑定的游标变量，其query查询语句是返回记录的SELECT语句。例如： </p>
<figure class="highlight postgresql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">OPEN</span> curVars1 <span class="keyword">FOR</span> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> SID = mykey;</span><br></pre></td></tr></table></figure>

<p>（2）OPEN FOR EXECUTE</p>
<p>打开未绑定的游标变量。EXECUTE将动态执行查询字符串。例如：</p>
<figure class="highlight postgresql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">OPEN</span> curVars1 <span class="keyword">FOR</span> <span class="keyword">EXECUTE</span> <span class="string">&#x27;SELECT * FROM &#x27;</span> || quote_ident(<span class="meta">$1</span>);</span><br></pre></td></tr></table></figure>

<p>​    注意：$1是指由存储过程传递的第1个参数。<br>（3）打开绑定游标<br>仅适用于绑定的游标变量，只有当该变量在声明时包含接收参数，才能以传递参数的形式打开该游标，参数将传入到游标声明的查询语句中，例如：</p>
<figure class="highlight postgresql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">OPEN</span> curStudent;</span><br><span class="line"><span class="keyword">OPEN</span> curStudentOne (<span class="string">&#x27;20160230302001&#x27;</span>); </span><br></pre></td></tr></table></figure>

<p>使用游标提取值<br>FETCH命令从游标中读取当前指针所指向记录的数据到目标中。可通过PL&#x2F;pgSQL内置的系统变量FOUND来判断读取是否成功。</p>
<figure class="highlight postgresql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FETCH</span> curVars1 <span class="keyword">INTO</span> rowvar;  <span class="comment">--rowvar为行变量</span></span><br><span class="line"><span class="keyword">FETCH</span> curStudent <span class="keyword">INTO</span> SID, Sname, sex;</span><br></pre></td></tr></table></figure>

<p>​    –请注意：游标的属性列必须与 目标列的数量一致，并且类型兼容。<br>关闭游标<br>当游标数据不再需要时，需要关闭游标，以释放其占有的系统资源，主要是释放游标数据所占用的内存资源</p>
<figure class="highlight postgresql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CLOSE</span> cursorName; </span><br></pre></td></tr></table></figure>

<p>需要注意：当游标被关闭后，如果需要再次读取游标的数据，需要重新使用open打开游标，这时游标重新查询返回新的结果。</p>
<p>例：在函数中使用游标查询student表的学号、学生姓名和性别。</p>
<figure class="highlight postgresql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">or replace</span> <span class="keyword">function</span> cursorDemo()</span><br><span class="line"><span class="keyword">returns</span> <span class="type">boolean</span> <span class="keyword">as</span> $$<span class="language-pgsql"></span></span><br><span class="line"><span class="language-pgsql"><span class="keyword">declare</span></span></span><br><span class="line"><span class="language-pgsql">	unbound_refcursor <span class="type">refcursor</span>;</span></span><br><span class="line"><span class="language-pgsql">	vsid <span class="type">varchar</span>;</span></span><br><span class="line"><span class="language-pgsql">	vsname <span class="type">varchar</span>;</span></span><br><span class="line"><span class="language-pgsql">	vsgender <span class="type">varchar</span>;</span></span><br><span class="line"><span class="language-pgsql"><span class="keyword">begin</span></span></span><br><span class="line"><span class="language-pgsql">	<span class="keyword">open</span> unbound_refcursor <span class="keyword">for</span> <span class="keyword">execute</span> <span class="string">&#x27;select sid,sname,sex from 	student&#x27;</span>;</span></span><br><span class="line"><span class="language-pgsql">	<span class="keyword">loop</span></span></span><br><span class="line"><span class="language-pgsql">		<span class="keyword">fetch</span> unbound_refcursor <span class="keyword">into</span> vsid,vsname,vsgender;</span></span><br><span class="line"><span class="language-pgsql">		<span class="keyword">if</span> <span class="built_in">found</span> <span class="keyword">then</span></span></span><br><span class="line"><span class="language-pgsql">			<span class="keyword">raise</span> <span class="keyword">notice</span> <span class="string">&#x27;%,%,%&#x27;</span>,vsid,vsname,vsgender;</span></span><br><span class="line"><span class="language-pgsql">		<span class="keyword">else</span></span></span><br><span class="line"><span class="language-pgsql">			<span class="keyword">exit</span>;</span></span><br><span class="line"><span class="language-pgsql">		<span class="keyword">end</span> <span class="keyword">if</span>;</span></span><br><span class="line"><span class="language-pgsql">	<span class="keyword">end</span> <span class="keyword">loop</span>;</span></span><br><span class="line"><span class="language-pgsql">	<span class="keyword">close</span> unbound_refcursor;</span></span><br><span class="line"><span class="language-pgsql">	<span class="keyword">raise</span> <span class="keyword">notice</span> <span class="string">&#x27;取数据循环结束...&#x27;</span>;</span></span><br><span class="line"><span class="language-pgsql">	<span class="keyword">return</span> <span class="keyword">true</span>;</span></span><br><span class="line"><span class="language-pgsql"><span class="keyword">end</span>;</span></span><br><span class="line"><span class="language-pgsql">$$</span> <span class="keyword">language</span> plpgsql;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> cursorDemo();</span><br></pre></td></tr></table></figure>

<p>例：编写带参数的游标函数，从成绩表中查询分数大于某给定值的学号和课程号。</p>
<figure class="highlight postgresql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">or replace</span> <span class="keyword">function</span> cusorGrade(myscore <span class="type">int</span>)<span class="keyword">returns</span> <span class="type">void</span> <span class="keyword">as</span> $$<span class="language-pgsql"></span></span><br><span class="line"><span class="language-pgsql">	<span class="keyword">declare</span></span></span><br><span class="line"><span class="language-pgsql">		vstuscore Grade<span class="meta">%ROWTYPE</span>;		<span class="comment">--声明与表Grade结构相同的行变量</span></span></span><br><span class="line"><span class="language-pgsql">		vstucursor <span class="keyword">cursor</span>(invalue <span class="type">int</span>)</span></span><br><span class="line"><span class="language-pgsql">			<span class="keyword">for</span> <span class="keyword">select</span> courseid,studentid,grade <span class="keyword">from</span> Grade <span class="keyword">where</span> 	grade&gt;=invalue <span class="keyword">order</span> <span class="keyword">by</span></span></span><br><span class="line"><span class="language-pgsql">studentid;								<span class="comment">--声明带有输入参数的游标</span></span></span><br><span class="line"><span class="language-pgsql">	<span class="keyword">begin</span></span></span><br><span class="line"><span class="language-pgsql">	<span class="keyword">open</span> vstucursor (myscore);			<span class="comment">--打开带有参数的游标</span></span></span><br><span class="line"><span class="language-pgsql">	<span class="keyword">loop</span></span></span><br><span class="line"><span class="language-pgsql">		<span class="keyword">fetch</span> vstucursor <span class="keyword">into</span> vstuscore;</span></span><br><span class="line"><span class="language-pgsql">		<span class="keyword">exit</span> <span class="keyword">when</span> <span class="keyword">not</span> <span class="built_in">found</span> ;			<span class="comment">--假如没有检索到记录，结束循环处理</span></span></span><br><span class="line"><span class="language-pgsql">		<span class="keyword">raise</span> <span class="keyword">notice</span> <span class="string">&#x27;%,%,%&#x27;</span>, vstuscore.studentid,vstuscore.courseid,vstuscore.grade;</span></span><br><span class="line"><span class="language-pgsql">		<span class="keyword">end</span> <span class="keyword">loop</span>;</span></span><br><span class="line"><span class="language-pgsql">		<span class="keyword">close</span> vstucursor ;				<span class="comment">--关闭游标</span></span></span><br><span class="line"><span class="language-pgsql">	<span class="keyword">end</span>;</span></span><br><span class="line"><span class="language-pgsql">$$</span> <span class="keyword">language</span> plpgsql;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>存储过程和触发器的区别有:存储过程可以采用输入参数而触发器不可以</p>
</li>
<li><p>HTML语句和JSP语句都是下载到浏览器端来执行。X</p>
<p>  凡是使用到了java中的语言部分，一般都是在服务器端执行，解析后返回客户端形成标准的html</p>
</li>
</ul>
<p>Java嵌入SQL语句执行后，返回结果存储在什么对象中：ResultSet</p>
<p>Java嵌入SQL语句，能传递动态参数执行SQL语句查询的是什么接口：PreparedStatement</p>
<p>Java嵌入SQL语句，能调用执行存储过程的是什么接口：CallableStatement</p>
<p>从游标中读取数据，使用什么命令：fetch</p>
<h2 id="第七章-NoSQL数据库技术"><a href="#第七章-NoSQL数据库技术" class="headerlink" title="第七章 NoSQL数据库技术"></a>第七章 NoSQL数据库技术</h2><p>关系数据库局限</p>
<blockquote>
<p>不能直接管理非结构化数据</p>
<p>受单机服务器限制难以支持数据库高并发读写访问</p>
<p>受磁盘容量限制不能满足海量数据的高效存储和处理</p>
<p>难以实现分布式数据库的高扩展性、高可用性</p>
</blockquote>
<p><strong>大数据</strong>(big data)，指无法在一定时间范围内用常规软件工具进行捕捉、管理和处理的数据集合。</p>
<h3 id="5V特征"><a href="#5V特征" class="headerlink" title="5V特征"></a>5V特征</h3><ul>
<li>大量(Volume)</li>
<li>高速性(Velocity)</li>
<li>多样性（(Variety)</li>
<li>真实性(Veracity)</li>
<li>低价值(Value)</li>
</ul>
<p>(Not only SQL Database，<strong>NoSQL</strong>）是指一类非关系型、开源代码、具有水平扩展能力的分布式数据库。</p>
<p>NoSQL数据库的公共特性:</p>
<blockquote>
<p>支持非结构化数据存储，不用预先定义模式<br>分布式集群架构，无共享结构<br>弹性可扩展，可动态增减数据库结点数据分区存储，各分区结点并发访问<br>结点之间数据异步复制，实现最终数据一致性<br>数据处理遵循BASE特性原则</p>
</blockquote>
<h3 id="BASE特性"><a href="#BASE特性" class="headerlink" title="BASE特性"></a>BASE特性</h3><p>Basically Available（<strong>基本可用</strong>），允许数据库系统某些节点出现故障，其余节点能够继续运行，一直提供服务。<br>Soft state(<strong>软状态</strong>），允许数据库系统副本节点之间存在暂时的数据不一致，经过纠错处理，系统数据最终保持一致态。<br>Eventual Consistency(<strong>最终一致性</strong>），系统数据在某个时刻达到最终一致性。</p>
<p>分布式数据库一致性</p>
<blockquote>
<p>强一致性:无论更新操作在哪一个副本执行，数据复制必须同步完成。</p>
<p>弱一致性:数据更新后，其数据复制是异步完成，需要经过一定时间才能达到不同数据库结点数据一致。</p>
<p>最终一致性:弱一致性的一种特例，保证用户最终能够读取到更新数据。</p>
</blockquote>
<p>NoSQL数据库典型类型：<br><strong>键值数据库</strong>、<strong>图数据库</strong>、<strong>列式数据库</strong>、<strong>文档数据库</strong>。</p>
<p>NoSQL数据库与关系数据库比较</p>
<blockquote>
<p>NoSQL数据库采用非结构化数据存储模型，关系数据库采用结构化数据存储模型<br>NoSQL数据库采用分布式部署，关系数据库一般采用集中式部署<br>NoSQL数据库编程遵循BASE原则，关系数据库编程遵循ACID事务原则<br>NoSQL数据库没有统一的数据操作标准，关系数据库遵循SQL数据操作标准<br>NoSQL数据库支持海量数据存储，关系数据库数据存储受限于TB级</p>
</blockquote>
<h3 id="CAP"><a href="#CAP" class="headerlink" title="CAP"></a>CAP</h3><p><strong>一致性</strong>(Consistency） :不同结点数据库保持一致<br><strong>可用性</strong>(Availability) ：数据访问请求随时可满足<br><strong>分区容忍性</strong>(PartitionTolerance) ：当出现故障结点，系统仍能响应数据访问请求</p>
<p>CAP定理法则:</p>
<p>一个分布式系统不可能同时满足一致性(C:Consistency)、可用性(A: Availability)）和分区容错性(P:Partition tolerance)这三个基本需求，最多只能同时满足其中两项。</p>
<p>CA——放弃分区容错性，保证一致性和可用性，即传统的单机数据库处理方式。<br>AP——放弃强一致性，追求分区容错性和可用性，这是很多分布式系统设计时的选择。例如，一些电商系统采用此方案。<br>CP——放弃可用性，追求一致性和分区容错性。例如，很多NoSQL系统采用这种方案。</p>
<h3 id="四种NoSQL"><a href="#四种NoSQL" class="headerlink" title="四种NoSQL"></a>四种NoSQL</h3><p><strong>列存储数据库</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/uestc-wxy/blog_img/img/Snipaste_2023-06-06_14-03-31.png"></p>
<p>关系数据库:按行存储，每行数据存放在一个磁盘数据块</p>
<p>列存储数据库:按列存储，每列数据放到一个数据块中</p>
<p><img src="https://cdn.jsdelivr.net/gh/uestc-wxy/blog_img/img/Snipaste_2023-06-06_14-03-42.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/uestc-wxy/blog_img/img/Snipaste_2023-06-06_14-04-53.png"></p>
<p><strong>键值数据库</strong>(Key-Value Database）是一种按照键值数据表结构组织存储数据的内存数据库。代表<strong>Redis</strong>。</p>
<p><strong>文档数据库</strong>：</p>
<p><img src="https://cdn.jsdelivr.net/gh/uestc-wxy/blog_img/img/Snipaste_2023-06-06_14-05-22.png"></p>
<p><strong>图形数据库</strong></p>
<p>代表：Neo4j图形数据库</p>
<p><img src="https://cdn.jsdelivr.net/gh/uestc-wxy/blog_img/img/Snipaste_2023-06-06_14-05-37.png"></p>
<p><strong>NoSQL数据库的四大分类表格分析</strong></p>
<table>
<thead>
<tr>
<th align="center">分类</th>
<th align="center">Examples举例</th>
<th align="center">典型应用场景</th>
<th align="center">数据模型</th>
<th align="center">优点</th>
<th align="center">缺点</th>
</tr>
</thead>
<tbody><tr>
<td align="center">键值（key-value）</td>
<td align="center">Redis</td>
<td align="center">内容缓存，主要用于处理大量数据的高访问负载，也用于一些日志系统等等。</td>
<td align="center">Key 指向 Value 的键值对，通常用hash table来实现</td>
<td align="center">查找速度快</td>
<td align="center">数据无结构化，通常只被当作字符串或者二进制数据</td>
</tr>
<tr>
<td align="center">列存储数据库</td>
<td align="center">Cassandra, HBase</td>
<td align="center">分布式的文件系统</td>
<td align="center">以列簇式存储，将同一列数据存在一起</td>
<td align="center">查找速度快，可扩展性强，更容易进行分布式扩展</td>
<td align="center">功能相对局限</td>
</tr>
<tr>
<td align="center">文档型数据库</td>
<td align="center">CouchDB, MongoDB</td>
<td align="center">Web应用（与Key-Value类似，Value是结构化的，不同的是数据库能够了解Value的内容）</td>
<td align="center">Key-Value对应的键值对，Value为结构化数据</td>
<td align="center">数据结构要求不严格，表结构可变，不需要像关系型数据库一样需要预先定义表结构</td>
<td align="center">查询性能不高，而且缺乏统一的查询语法。</td>
</tr>
<tr>
<td align="center">图形(Graph)数据库</td>
<td align="center">Neo4J</td>
<td align="center">社交网络，推荐系统等。专注于构建关系图谱</td>
<td align="center">图结构</td>
<td align="center">利用图结构相关算法。比如最短路径寻址，N度关系查找等</td>
<td align="center">很多时候需要对整个图做计算才能得出需要的信息，而且这种结构不太好做分布式的集群方案。</td>
</tr>
</tbody></table>
<p>以下哪一项不是NoSQL的共同特征?(D)</p>
<p>A．分区 B．异步复制	C. BASE	D.CAP</p>
<p>在Neo4J集群中，数据的写入是通过主服务器来完成的，数据的读取可以通过集群中的任意一个Neo4J实例来完成。正确！！</p>
<p><strong>数据库系统面临的挑战</strong>：数据库高并发读写需求；海量数据的高效存储和处理；数据库高扩展性和高可用性需求；数据库在大数据处理方面的要求</p>
<p>以下哪一项不是大数据的特征？高密集价值数据。（是的有：高速产生、规模巨大，多样性）</p>
<p>HBASE中表和区域的关系可以是什么：1：N</p>
<p>以下哪一项不是MongoDB保留数据库：system，（是的有：local、admin、config）</p>
<p>CAP是在分布式环境下设计和部署系统时的3个核心需求。正确！！</p>
<p>Redis复制主要包括RDB复制和AOF复制。正确！！</p>
<p>HBASE中的区域和表的关系是随着数据的增加动态变化的。正确！！</p>
<p>MongoDB的分片是将一个集合的数据分别存储在不同的节点上减轻单机压力。错误</p>
<p>Neo4j的数据物理存储主要分为节点、关系、节点或关系上属性这三类数据存储。！错误</p>
<p>NoSQL数据库分类的依据是对数据的操作方式。错误</p>
<p>Redis数据库的底层实现是字典，对于数据库的增删改查操作都是通过对字典进行操作来实现的。正确！！</p>
<p>HBASE中表定义中要说明行健和表中包含的列族，列不用定义。正确！！</p>
<p>MongoDB复杂文档模型设计可以使用内嵌和引用的方法来解决。正确！！</p>
]]></content>
      <categories>
        <category>大二下期末复习</category>
      </categories>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>软件测试临考总结</title>
    <url>/2023/06/02/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/test4/</url>
    <content><![CDATA[<p>由于老师明确说不考概念记忆题😆，并且从我们这届开始改版全部是大题😤，所以就不要背那么多干巴巴的知识点啦~，但是一些必要的概念还是得大致知道啥意思吧，以下内容都基于老师发的PPT(●’◡’●)</p>
<h2 id="第一章-引论"><a href="#第一章-引论" class="headerlink" title="第一章 引论"></a>第一章 引论</h2><p><strong>软件测试(Software Testing）</strong>是一种检测软件的正确性、完整性、安全性和评估其质量的活动过程。换句话说，软件测试是一种以发现程序错误、衡量软件质量为目的，并对其是否满足用户需求进行评估的活动过程。</p>
<p><strong>软件质量保证（Software Quality Assurance，SQA）</strong>是指通过对软件产品进行有计划的评审与审计，来确保软件开发按照产品质量过程标准实施项目的管理活动。</p>
<p>软件质量保证与软件测试的关系：</p>
<blockquote>
<p>SQA指导软件测试的计划与执行，监督测试工作结果的客观性、准确性与有效性，并协助软件测试的工作流程改进。</p>
<p>软件测试是SQA工作落实的重要手段，它为SQA提供所需的质量数据，作为软件质量评价的客观依据。</p>
<p>SQA是一项<em><strong>软件质量管理性工作</strong></em>，侧重于对软件开发流程进行评审与监控。</p>
<p>软件测试是一项<em><strong>技术性工作</strong></em>，侧重于对软件质量特性进行检测与验证。</p>
</blockquote>
<p><strong>测试驱动开发(Test-Driven Development，简称TDD）</strong>是一种不同于传统软件开发流程的过程模型。它要求在编写某个功能的代码之前先编写测试代码，然后编写功能代码，通过测试来推动整个软件开发工作的进行。</p>
<p>下面哪项活动不是软件测试范畴</p>
<p>A．需求文档评审	B.设计评审	C.代码测试	D.过程评审</p>
<blockquote>
<p>过程评审是质量保证活动的一部分，用于评估软件开发过程是否符合既定标准和流程。</p>
</blockquote>
<p>编程完成后才进行测试存在哪些问题?</p>
<blockquote>
<p>测试的时间很有限，很难达到测试的覆盖率要求和测试的质量要求。同时，假如在项目开发的后期，发现一些软件需求阶段和概要设计阶段的错误和问题，修改这些缺陷导致的成本将是非常高的。</p>
</blockquote>
<h2 id="第二章-软件测试基本概念"><a href="#第二章-软件测试基本概念" class="headerlink" title="第二章 软件测试基本概念"></a>第二章 <strong>软件测试基本概念</strong></h2><p><strong>缺陷</strong>(Defect)是指欠缺或不够完备的地方。因为缺陷是相对质量要求而存在的，任何违背了质量要求、违背了客户的意愿，不能满足用户的要求，都可以认为是缺陷。</p>
<p>IEEE STD729关于<strong>软件质量</strong>定义:软件产品或服务满足用户需求的程度。</p>
<blockquote>
<p>①软件缺陷在开发早期出现的概率大，在早期进行缺陷修复的成本低。</p>
<p>②软件在开发后期出现缺陷的概率小，但修复成本高。</p>
<p>③软件测试工作应尽早开展。</p>
</blockquote>
<p><a href="https://smms.app/image/Oc54oYf2KPN81hg" target="_blank"><img src="https://s2.loli.net/2023/06/02/Oc54oYf2KPN81hg.png" ></a></p>
<p>在代码审查中，静态测试可发现如下编程缺陷:</p>
<blockquote>
<p>变量在初始化前使用、变量声明后未使用、变量在两次赋值之间从未使用</p>
<p>数组访问越界</p>
<p>存在不可到达代码</p>
<p>循环中无条件分支</p>
<p>接口参数类型或数目不匹配</p>
<p>空指针或指针类型错误</p>
<p>存在未被调用的函数和过程</p>
</blockquote>
<p>案例一</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;(<span class="type">int</span>)attributeList.length();i++)&#123;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>如果把判断条件放在for语句内，每一次判断都要重新计算length， 浪费资源</p>
<p>正确代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> tmp_iListLength=attributeList.length()</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=O;i&lt;tmp_iListLength; i++)</span><br><span class="line">&#123;</span><br><span class="line">......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>案例二</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> i ;</span><br><span class="line">...</span><br><span class="line">printf(<span class="string">&quot;i= %d \n&quot;</span>,i) ;</span><br></pre></td></tr></table></figure>

<p>正确代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> i=<span class="number">0</span> ;</span><br><span class="line">printf (<span class="string">&quot;i= %d \n&quot;</span>,i) ;</span><br></pre></td></tr></table></figure>

<p>案例三</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">        <span class="type">int</span> array[] = <span class="literal">null</span>; <span class="comment">//声明数组</span></span><br><span class="line">        array = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];<span class="comment">//为数组开辟空间，大小为3</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= array.length; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;array[&quot;</span> + i + <span class="string">&quot;]=&quot;</span> + array[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>缺陷应该是数组下标可能越界</p>
<p>个人修改的代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">        <span class="type">int</span> array[] = <span class="literal">null</span>; <span class="comment">//声明数组</span></span><br><span class="line">        array = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];<span class="comment">//为数组开辟空间，大小为3</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;array[&quot;</span> + i + <span class="string">&quot;]=&quot;</span> + array[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>案例四</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExceptionDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;**********计算开始***********&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;      <span class="comment">// 定义整型变量</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;      <span class="comment">//定义整型变量</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> args[<span class="number">0</span>];  <span class="comment">// 接收第一个参数</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> args[<span class="number">1</span>];  <span class="comment">// 接收第二个参数</span></span><br><span class="line">            i = Integer.parseInt(str1);<span class="comment">//将第一个参数由字符串变为整型</span></span><br><span class="line">            j = Integer.parseInt(str2);<span class="comment">//将第二个参数由字符串变为整型</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> i / j;           <span class="comment">//进行除法计算</span></span><br><span class="line">            System.out.println(<span class="string">&quot;两个数字相除的结果:&quot;</span> + temp);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ArithmeticException e) &#123;<span class="comment">// 捕获算术异常System.out.println(&quot;出现异常了: &quot; + e);</span></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;**********计算结束***********&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可能的缺陷：</p>
<blockquote>
<ul>
<li>在try块中，使用args数组来接收命令行参数。然而，没有对args数组的长度进行检查或验证。如果没有传递足够的参数，将会导致ArrayIndexOutOfBoundsException(数组索引越界异常)。</li>
<li>在try块中，将args数组的元素作为字符串参数传递给parseInt()方法进行整数转换。然而，如果传递的参数无法解析为整数，将会导致NumberFormatException(数字格式异常)。</li>
<li>在catch块中，捕获了ArithmeticException异常，但是该异常只能捕获除以0导致的算术异常。如果出现其他类型的异常，将无法被捕获和处理。</li>
</ul>
</blockquote>
<p>正确代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExceptionDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;********** 计算开始 ***********&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (args.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;缺少必要的参数&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> Integer.parseInt(args[<span class="number">0</span>]);</span><br><span class="line">            <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> Integer.parseInt(args[<span class="number">1</span>]);</span><br><span class="line">            </span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> i / j;</span><br><span class="line">            System.out.println(<span class="string">&quot;两个数字相除的结果: &quot;</span> + temp);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;参数格式错误: &quot;</span> + e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ArithmeticException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;除数不能为0: &quot;</span> + e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalArgumentException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;参数错误: &quot;</span> + e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;********** 计算结束 ***********&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>动态测试是通过运行被测软件程序，观察该程序在运行过程中的系统行为、变量结果、内存、堆栈等运行数据，来判断软件系统是否存在缺陷的测试活动。<br>动态测试可发现的主要缺陷:</p>
<blockquote>
<p>程序逻辑错误</p>
<p>异常输入的功能失效</p>
<p>空指针使用</p>
<p>内存没有及时释放关闭的对象资源</p>
<p>Session失效</p>
<p>没有处理在空输入时点取Enter键情况</p>
</blockquote>
<p>案例一</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    String name; <span class="comment">// 声明姓名属性</span></span><br><span class="line">    <span class="type">int</span> age; <span class="comment">// 声明年龄属性</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">tell</span><span class="params">()</span> &#123; <span class="comment">// 取得信息</span></span><br><span class="line">        System.out.println(<span class="string">&quot;姓名: &quot;</span> + name + <span class="string">&quot;，年龄: &quot;</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClassDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">per</span> <span class="operator">=</span> <span class="literal">null</span>; <span class="comment">// 声明对象</span></span><br><span class="line">        per.name = <span class="string">&quot;张三&quot;</span>; <span class="comment">// 为姓名赋值</span></span><br><span class="line">        per.age = <span class="number">30</span>; <span class="comment">// 为年龄赋值</span></span><br><span class="line">        per.print(); <span class="comment">// 调用方法，打印信息</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在ClassDemo类的main方法中，创建了一个Person对象per，但没有实际实例化该对象，而是将其初始化为null。这意味着per对象没有被正确地创建和初始化，因此在尝试为per对象的name和age属性赋值时会导致NullPointerException(空指针异常)。<br>在Person类的tell()方法中，打印信息的语句使用了per.print()，但实际上应该调用的是per.tell()，因为tell()方法是定义在Person类的。</p>
</blockquote>
<p>案例二</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">OutputStream os=<span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    os=<span class="keyword">new</span> <span class="title class_">OutputStream</span>();</span><br><span class="line">      <span class="comment">//Do something with os here.</span></span><br><span class="line">    os.close();</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">        <span class="keyword">if</span>(os!=<span class="literal">null</span>)</span><br><span class="line">         os.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>正确代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">OutputStream os=<span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    os=<span class="keyword">new</span> <span class="title class_">OutputStream</span>();</span><br><span class="line">      <span class="comment">//Do something with os here.</span></span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(os!=<span class="literal">null</span>)</span><br><span class="line">     os.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改后的代码使用了 <code>finally</code> 块来确保在无论是否发生异常的情况下都能关闭输出流。</p>
<p><strong>软件验证（(verification）</strong>是指在开发软件过程中，检验软件是否已正确地实现了产品规格说明书所定义的系统功能和特性。<br><strong>软件确认(validation）</strong>是指在开发软件完成后，检查软件产品是否符合用户的真实需求。</p>
<blockquote>
<p>验证:我们正确地构造了产品吗?</p>
<p>确认:我们构造了正确的产品吗?</p>
</blockquote>
<p><em><strong>黑盒测试</strong></em>是指在测试中，把程序看作一个不能打开的黑盒子。在完全不考虑程序内部结构和内部特性的情况下，对程序功能进行测试，检查程序功能是否按照需求规格说明进行有效实现、是否能适当地接收输入数据而产生正确的输出信息。</p>
<p>黑盒测试是从用户观点出发开展的测试，其目的是尽可能发现软件的外部行为错误。黑盒测试常用于发现以下缺陷:</p>
<blockquote>
<p>检测软件是否有错误的功能或有功能遗漏<br>不能正确地接收输入数据、输出错误的结果<br>功能操作不够方便<br>界面出错、扭曲或不美观<br>安装过程中出现问题，安装步骤不清晰、不灵活<br>系统初始化存在问题</p>
</blockquote>
<p><em><strong>白盒测试</strong></em>是指在了解被测程序内部逻辑结构情况下，对该程序的内部变量、逻辑结构、运行路径进行测试，检验被测程序的内部动作或运行功能是否符合设计规格要求。</p>
<p>白盒测试常用于发现以下缺陷:</p>
<blockquote>
<p>程序逻辑错误<br>程序状态异常<br>程序路径无法跳转<br>变量遗漏初始化</p>
</blockquote>
<p><em><strong>单元测试</strong></em></p>
<blockquote>
<p>单元测试针对软件程序中的<strong>最小功能单元代码</strong>（类、函数、模块或组件)进行测试。<br>主要采用白盒测试方法，从程序的内部结构出发设计测试用例，检查单元程序已实现功能与设计规格是否一致、以及编码中是否存在逻辑错误。<br>单元测试一般由编程人员和测试人员共同完成，而以开发人员为主。通常需要编写<strong>驱动模块</strong>和<strong>桩模块</strong>。<br>单元测试还采用代码评审方法（走读、静态分析、评审）检查程序错误，代码评审可以发现程序**50%～70%**代码的缺陷。</p>
</blockquote>
<p><strong>集成测试</strong>（也称组装测试、联合测试）是一种在单元测试的基础上，将若干单元模块按照设计要求组装起来所进行的测试，其目标是发现模块接口相关问题。</p>
<p><strong>系统测试</strong>是在集成测试之后，在系统层面所进行的功能特性测试和非功能特性测试。</p>
<p><strong>验收测试</strong>是在软件提交用户前，在实际用户环境中，验证软件系统功能、性能及其它特性是否符合用户需求。</p>
<ul>
<li>α测试——软件公司在其产品推向市场前，采用实际运行环境和真实数据在软件公司内部进行的验收测试。</li>
<li>β测试——软件公司在其产品推向市场前，还需要在公司外部用户中进行试用测试。通过收集试用户的反馈意见，对该版本软件进行修正与完善，最终得到正式发布的版本。</li>
</ul>
<h2 id="第三章-软件测试方法"><a href="#第三章-软件测试方法" class="headerlink" title="第三章 软件测试方法"></a>第三章 软件测试方法</h2><h3 id="基于直觉和经验的方法"><a href="#基于直觉和经验的方法" class="headerlink" title="基于直觉和经验的方法"></a>基于直觉和经验的方法</h3><blockquote>
<p><strong>Ad-hoc测试方法</strong>强调测试人员更多根据自己的专业经验，不受测试用例约束，放开思路、灵活地进行各种测试。<br><strong>ALAC ( Act-like-a-customer，像客户那样做</strong>）测试方法是一种基于客户使用产品的经验知识进行系统测试，其出发点是应用帕累托(Pareto）二八法则进行重点测试。<br><strong>错误推测法</strong>是测试者根据自己的工作经验、专业知识和直觉来来推测出软件中可能存在的各种错误，从而对被测软件采用针对性的测试。</p>
</blockquote>
<h3 id="基于输入域方法（数据驱动测试）"><a href="#基于输入域方法（数据驱动测试）" class="headerlink" title="基于输入域方法（数据驱动测试）"></a>基于输入域方法（数据驱动测试）</h3><p><em><strong>等价类划分法：</strong></em></p>
<p>一个程序P有两个整型输入变量I1、I2，输出变量为Out,其计算函数为Out&#x3D;P(l1,I2)，假定在字长32位计算机上运行。所有输入数据组合有多少?	<em><strong>2³²x 2³²&#x3D;2⁶⁴</strong></em></p>
<p>例：采购收货单报表系统，要求用户输入处理报表的日期。假定日期限定在2000年1月1日到2023年12月30日。请设计“日期”输入数据验证的等价类。</p>
<blockquote>
<p>有效日期的等价类:2000年1月1日到2023年12月30日的日期值<br>无效日期的等价类:小于2000年1月1日的日期值<br>无效日期的等价类:大于2023年12月30日的日期值</p>
</blockquote>
<p>例：采购收货单报表系统，对于商品数量输入数据，应为大于0的整数，才能符合业务要求。请设计“数量”输入数据验证的等价类。</p>
<blockquote>
<p>有效“数量”字段输入等价类:大于0的整数。<br>无效“数量”字段输入等价类:小于等于0的整数。</p>
</blockquote>
<p>例：航班计划系统，对于某航班设定是否为往返航班，其输入数据应采用布尔数值，才能符合业务要求。请设计“来回程”输入数据验证的等价类。</p>
<blockquote>
<p>有效的“来回程”字段数据输入等价类:真&#x2F;假布尔值。<br>无效的“来回程”字段数据输入等价类:其它任何值。</p>
</blockquote>
<p>例：对于计算器软件的加法运算功能进行测试。请设计“+”功能测试的等价类。</p>
<blockquote>
<p>有效的数据输入等价类:整型数值<br>有效的数据输入等价类:实数数值<br>有效的数据输入等价类:负数数值<br>无效的数据输入等价类:非数字符号</p>
</blockquote>
<p>例:四川地税发票查询页面的发票金额字段输入检查功能测试。</p>
<blockquote>
<p>有效的“发票金额”字段数据输入等价类:大于0的数值数据。<br>无效的“发票金额”字段数据输入等价类:非数值数据。<br>无效的“发票金额”字段数据输入等价类:小于等于0的数值</p>
</blockquote>
<p><em><strong>边界值分析法</strong></em>就是在某个输入变量范围的边界上，输入一些特定数据，分析验证系统功能是否正常运行的测试方法。</p>
<p>例：酒店预订系统业务规定客户最多可提前20天预订酒店客房。请按边界值分析法设计酒店搜索功能的测试用例。</p>
<blockquote>
<p>假定客人在2023-3-12进行订房操作，预订后面10到20天内入住客房，其测试边界值可设置为:2023-3-21、2023-3-31、2023-4-1</p>
</blockquote>
<p>等价类划分法和边界值分析法仅适用于单因素（单变量）输入的数据测试。</p>
<h3 id="基于组合及其优化方法（多变量）"><a href="#基于组合及其优化方法（多变量）" class="headerlink" title="基于组合及其优化方法（多变量）"></a>基于组合及其优化方法（多变量）</h3><p><strong>判定表方法</strong>是一种借助表格方式完成多条件输入组合下测试用例设计，达至完全覆盖输出结果的测试方法。其表格组成样式如下:</p>
<table>
<thead>
<tr>
<th></th>
<th>序号</th>
<th>1</th>
<th>2</th>
<th>3</th>
<th>4</th>
<th>5</th>
<th>6</th>
<th>7</th>
<th>8</th>
</tr>
</thead>
<tbody><tr>
<td>条件</td>
<td>正确输入年Y</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
<td>N</td>
<td>N</td>
<td>N</td>
<td>N</td>
</tr>
<tr>
<td>条件</td>
<td>正确输入月M</td>
<td>Y</td>
<td>Y</td>
<td>N</td>
<td>N</td>
<td>Y</td>
<td>Y</td>
<td>N</td>
<td>N</td>
</tr>
<tr>
<td>条件</td>
<td>正确输入日D</td>
<td>Y</td>
<td>N</td>
<td>Y</td>
<td>N</td>
<td>Y</td>
<td>N</td>
<td>Y</td>
<td>N</td>
</tr>
<tr>
<td>动作</td>
<td>函数运行成功</td>
<td>√</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>动作</td>
<td>函数运行失败</td>
<td></td>
<td>√</td>
<td>√</td>
<td>√</td>
<td>√</td>
<td>√</td>
<td>√</td>
<td>√</td>
</tr>
</tbody></table>
<p><strong>因果图法</strong>是一种利用图解法分析输入的各种组合情况，从而设计测试用例的形式化方法。它适合于检查程序输入、输出错误，还能判定程序规范中的二义性、不完全性等错误。</p>
<p>因果图PPT上面举了好几页例子，肯定很重要哒~</p>
<p><img src="https://s2.loli.net/2023/06/02/WxI9MwjJepmurfE.png" alt="Snipaste_2023-06-02_15-46-16.png"></p>
<p><img src="https://s2.loli.net/2023/06/02/jCuF49rsNHEm1a5.png" alt="Snipaste_2023-06-02_15-46-38.png"></p>
<p><img src="https://s2.loli.net/2023/06/02/GqM7ES6sPwaBRKt.png" alt="Snipaste_2023-06-02_15-46-47.png"></p>
<p><img src="https://s2.loli.net/2023/06/02/1QmJtbZgpjdr5x7.png" alt="Snipaste_2023-06-02_15-46-56.png"></p>
<p><img src="https://s2.loli.net/2023/06/02/t8moTlbkVwfOLN3.png" alt="Snipaste_2023-06-02_15-47-10.png"></p>
<p><img src="https://s2.loli.net/2023/06/02/L9t3abT6hHxMXNJ.png" alt="Snipaste_2023-06-02_15-48-36.png"></p>
<p><img src="https://s2.loli.net/2023/06/02/2n1okyQVmwI9RrF.png" alt="Snipaste_2023-06-02_15-49-01.png"></p>
<p><img src="https://s2.loli.net/2023/06/02/NWK8wLlgq2Q5AEB.png" alt="Snipaste_2023-06-02_15-50-08.png"></p>
<p><img src="https://s2.loli.net/2023/06/02/CiUFqs6Q2tdLbj4.png" alt="Snipaste_2023-06-02_15-50-14.png"></p>
<p><img src="https://s2.loli.net/2023/06/02/YUzawnXV9oFRgex.png" alt="Snipaste_2023-06-02_15-50-20.png"></p>
<p>当有多个输入变量、每个变量又有多个取值。若要执行全覆盖组合测试，其工作量非常大。为了有效地减少测试组合数，可以采用<strong>成对组合测试方法</strong>，其基本思想是每两个输入变量所有取值组合形成不同测试用例。</p>
<p>例：</p>
<p>测试一个登录页面在不同浏览器和语言下的功能正确性，其输入条件如下:</p>
<p>1）输入项（账号、密码）</p>
<p>2）浏览器（IE、chrome、FireFox、360）</p>
<p>3）语言（中文、英文）</p>
<p>成对组合测试用例表</p>
<table>
<thead>
<tr>
<th>用例</th>
<th>账号</th>
<th>密码</th>
<th>浏览器</th>
<th>语言</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>空值</td>
<td>空值</td>
<td>IE</td>
<td>中文</td>
</tr>
<tr>
<td>2</td>
<td>空值</td>
<td>有值</td>
<td>chrome</td>
<td>英文</td>
</tr>
<tr>
<td>3</td>
<td>有值</td>
<td>空值</td>
<td>FireFox</td>
<td>中文</td>
</tr>
<tr>
<td>4</td>
<td>有值</td>
<td>有值</td>
<td>360</td>
<td>英文</td>
</tr>
<tr>
<td>5</td>
<td>空值</td>
<td>空值</td>
<td>360</td>
<td>中文</td>
</tr>
<tr>
<td>6</td>
<td>空值</td>
<td>有值</td>
<td>FireFox</td>
<td>英文</td>
</tr>
<tr>
<td>7</td>
<td>有值</td>
<td>空值</td>
<td>chrome</td>
<td>中文</td>
</tr>
<tr>
<td>8</td>
<td>有值</td>
<td>有值</td>
<td>IE</td>
<td>英文</td>
</tr>
</tbody></table>
<p><strong>正交实验测试法</strong>是一种依据伽罗华(Galois)理论，从大量实验数据中挑选适量的、具有代表性的数据进行实验，以达到降低实验成本的方法。</p>
<p>正交表构成</p>
<blockquote>
<p>行数:正交表中的行个数，即实验的次数，也是我们通过正交实验法设计的测试用例个数。行数(即&gt;测试用例次数)&#x3D;∑(每列水平数-1)+1</p>
<p>因素数:正交表中列的个数，即测试功能点的因子数。</p>
<p>水平数:任何单个因素能够取值的个数。正交表中包含值为从0到“水平数-1”或从1到“水平数”。即要测试功能点的输入取值数。</p>
<p>L代表正交表，它是运用数学理论在拉丁方和正交拉丁方基础上构造的规格化数据表格，常用的有L₈(2⁷)、L₉(3⁴)、L₁₆(4⁵)等。</p>
</blockquote>
<p>正交表特性</p>
<blockquote>
<p>1)每一列中各数字出现的次数都一样多;<br>2)任何两列所构成的各有序数对出现的次数都一样多。<br>例如在两水平正交表中，任何两列(同一横行内）有序对子共有4种:(1，1)、 (1，2)、(2，1)、 (2，2)。每种对数出现次数相等。在三水平情况下，任何两列(同一横行内）有序对共有9种，1.1、1.2、1.3、<br>2.1、2.2、2.3、<br>3.1、3.2、3.3，且每对出现数也均相等。</p>
</blockquote>
<p> 在一个客户信息查询界面中，输入条件有“姓名”、“身份证号”、“手机”，采用正交表方式设计该界面查询功能的测试用例。</p>
<p>针对本测试有3个输入条件，每个输入有2种取值情况，可以选择L₄(2³)正交表，其正交表值如下表所示：</p>
<table>
<thead>
<tr>
<th>实验数\列号</th>
<th>姓名</th>
<th>身份证号</th>
<th>手机</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>2</td>
<td>1</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>3</td>
<td>0</td>
<td>1</td>
<td>0</td>
</tr>
<tr>
<td>4</td>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
</tbody></table>
<p>测试用例：</p>
<table>
<thead>
<tr>
<th>测试用例&#x2F;查询条件</th>
<th>姓名</th>
<th>身份证号</th>
<th>手机</th>
</tr>
</thead>
<tbody><tr>
<td>测试用例1</td>
<td>填写</td>
<td>填写</td>
<td>填写</td>
</tr>
<tr>
<td>测试用例2</td>
<td>填写</td>
<td>空</td>
<td>空</td>
</tr>
<tr>
<td>测试用例3</td>
<td>空</td>
<td>填写</td>
<td>空</td>
</tr>
<tr>
<td>测试用例4</td>
<td>空</td>
<td>空</td>
<td>填写</td>
</tr>
</tbody></table>
<h3 id="基于逻辑覆盖方法"><a href="#基于逻辑覆盖方法" class="headerlink" title="基于逻辑覆盖方法"></a>基于逻辑覆盖方法</h3><p><strong>语句覆盖法</strong>的基本思想是设计若干测试用例，使得被测程序中的每个可执行语句至少被执行一次。如果是顺序结构，就是让测试从头执行到尾。如果有分支、条件和循环，则需要执行足够的测试用例覆盖全部语句。</p>
<p><strong>语句覆盖测试能解决的问题</strong>:发现程序中一些永远不能被执行的语句缺陷，但不能发现程序中语句逻辑错误。</p>
<p>语句覆盖测试即使覆盖了程序中每个语句，但并不一定测试覆盖所有分支。试图覆盖程序中所有路径的测试方法称为<strong>路径覆盖</strong>。路径测试的最简单形式就是<strong>判定覆盖测试</strong>。<br><strong>判定覆盖测试基本思想</strong>:设计若干用例，运行被测程序，使得程序中每个判断语句的取真分支和取假分支至少执行一次，即判断真假值均可被满足。一个判定往往代表程序的一个分支，所以判定覆盖测试也称为<strong>分支覆盖测试</strong>。</p>
<p>判定覆盖测试能发现程序中一些永远不能被执行的分支缺陷，可以发现部分逻辑缺陷。</p>
<p><strong>条件覆盖</strong>的基本思想是设计若干测试用例，使其对被测程序进行测试，使每个判断中每个条件的可能取值至少满足一次。</p>
<p>符合条件覆盖的测试用例并不一定满足判定覆盖要求，反之，符合判定覆盖的测试用例也不一定满足条件覆盖要求。因此，需要找出符合两者的测试用例交集，该方法称为<strong>判定-条件覆盖</strong>。</p>
<p><strong>条件组合覆盖</strong>的基本思想是设计足够的测试用例，使得判断中每个条件的所有取值情况至少出现一次，并且每个判断本身的判定结果也至少出现一次。条件组合测试不一定能覆盖所有路径。</p>
<p><strong>基本路径覆盖</strong>就是设计测试用例，覆盖程序中所有可能的基本分支路径。<br>基本路径覆盖局限:不能保证覆盖所有条件组合</p>
<p>基本路径覆盖测试用例设计步骤:</p>
<blockquote>
<p>依据代码绘制流程图<br>确定流程图的环路复杂度<br>确定各个独立路径的基本集合<br>设计测试用例覆盖每条基本路径</p>
</blockquote>
<p>计算环路复杂度：</p>
<blockquote>
<p>（1）流图中的区域数等于环形复杂度。<br>（2）流图G的环形复杂度V(G)&#x3D;E-N+2，其中，E是流图中边的条数，N是结点数。<br>（3）流图G的环形复杂度V(G)&#x3D;P+1，其中，P是流图中判定结点的数目。</p>
</blockquote>
<h2 id="第四章-测试流程和规范"><a href="#第四章-测试流程和规范" class="headerlink" title="第四章  测试流程和规范"></a>第四章  测试流程和规范</h2><p>软件测试过程：</p>
<p>软件工程角度<br>需求评审→设计评审→单元测试→集成测试→系统测试→验收测试</p>
<p>项目管理角度<br>测试计划→测试设计→执行与监控→结果分析与评估→项目总结</p>
<p><strong>敏捷测试</strong>（自动化测试）是一种遵从敏捷软件开发原则，支持敏捷软件开发实现质量控制的测试实践。<br><strong>TMap</strong> (Test Management Approach，测试管理方法)是一种业务驱动的、基于风险策略的、结构化的测试管理方法，其目标是尽早地发现缺陷，以最小的成本、有效地、彻底地完成测试任务，以减少软件发布后的支持成本。</p>
<p><strong>基于脚本测试</strong>(Scripted Testing，ST），无论是手工测试，还是自动化测试，都需要先设计用例，生成测试脚本，然后执行脚本实施测试。<br><strong>探索式测试</strong>(Exploratory Testing，ET），不需要设计用例，一边思考，一边测试。<br><em><strong>在敏捷测试中，则主要采用探索式测试，基于脚本测试则作为补充</strong></em>;而在传统测试中，主要采用基于脚本测试，探索式测试作为补充。</p>
<h2 id="第五章-单元测试与集成测试"><a href="#第五章-单元测试与集成测试" class="headerlink" title="第五章 单元测试与集成测试"></a>第五章 单元测试与集成测试</h2><p><strong>单元静态测试</strong>是指不运行被测程序本身，仅通过分析或检查源程序的语法、结构、过程、接口等来检查程序的正确性。主要采用互查、走查、评审方法进行测试，也可通过代码缺陷扫描工具进行分析处理。</p>
<p>代码示例1：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过用户UI界面输入的用户名，传递到Action层，进行用户角色识别操作</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> request HttpServletRequest对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> String 用户角色，如管理员/普通用户/...</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getUserRole</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">userRole</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">userName</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;userName&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (userName.equals(<span class="string">&quot;schadmin&quot;</span>)) &#123;</span><br><span class="line">        <span class="comment">// 这是系统初始化时默认的管理员账号，如果是，则进行以下验证操作...      </span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 非系统初始化的账号，进行以下验证操作...</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> userRole;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>userName可能会出现空指针情况</p>
<p>修改：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过用户UI界面输入的用户名，传递到Action层，进行用户角色识别操作</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> request HttpServletRequest对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> String 用户角色，如管理员/普通用户/...</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getUserRole</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">userRole</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">userName</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;userName&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;schadmin&quot;</span>.equals(userName)) &#123;</span><br><span class="line">        <span class="comment">// 这是系统初始化时默认的管理员账号，如果是，则进行以下验证操作...      </span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 非系统初始化的账号，进行以下验证操作...</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> userRole;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码示例2</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过用户输入的年龄，转换为数值型</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> request HttpServletRequest对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> Integer 用户年龄</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getUserAge</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">userAge</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;userAge&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (userAge != <span class="literal">null</span>) &#123;</span><br><span class="line">        age = Integer.parseInt(userAge);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>userAge可能不是字符型数字。</p>
<p>建议写一个Util工具类，实现一些常见的数据转换方法，以供调用:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 传入的字符串转换为整型</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> intStr String</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> Integer</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getIntValue</span><span class="params">(String intStr)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">parseInt</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (isNumeric(intStr)) &#123;</span><br><span class="line">        parseInt = Integer.parseInt(intStr);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> parseInt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>示例代码3</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 假设电话号码字符串设计的标准格式为: 国家编码-区位号码-电话号码-分机号</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> strPhoneNumber String</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> String 电话号码 (如: 例子中的2313222)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getPhoneNumber</span><span class="params">(String strPhoneNumber)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (strPhoneNumber == <span class="literal">null</span> || <span class="string">&quot;&quot;</span>.equals(strPhoneNumber)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    String[] arrPhone = strPhoneNumber.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> arrPhone[<span class="number">2</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可能出现数组越界错误。</p>
<p>修改：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getPhoneNumber</span><span class="params">(String strPhoneNumber)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (strPhoneNumber == <span class="literal">null</span> || <span class="string">&quot;&quot;</span>.equals(strPhoneNumber)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    String[] arrPhone = strPhoneNumber.split(<span class="string">&quot;, &quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (arrPhone.length &gt; <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> arrPhone[<span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>示例代码4</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">writeString</span><span class="params">(File file, String writeContent, String encoding)</span> <span class="keyword">throws</span> FileOperatorException &#123;</span><br><span class="line">    <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">            file.createNewFile();</span><br><span class="line">        &#125;</span><br><span class="line">        fos = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file);</span><br><span class="line">        fos.write(writeContent.getBytes(encoding));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FileOperatorException</span>(ex);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">writeString</span><span class="params">(File file, String writeContent, String encoding)</span> <span class="keyword">throws</span> FileOperatorException &#123;</span><br><span class="line">    <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">            file.createNewFile();</span><br><span class="line">        &#125;</span><br><span class="line">        fos = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file);</span><br><span class="line">        fos.write(writeContent.getBytes(encoding));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FileOperatorException</span>(ex);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;<span class="comment">//如果没有finally下面的段语句，就无法释放文件资源</span></span><br><span class="line">         <span class="keyword">if</span> (fos != <span class="literal">null</span>)&#123;</span><br><span class="line">             <span class="keyword">try</span> &#123;</span><br><span class="line">                fos.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FileOperatorException</span>(e);</span><br><span class="line">             &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>为了确保代码在运行可靠、功能正确并且能够有良好的性能响应，仅仅进行静态测试是不够的，必须将该单元代码运行起来，验证代码业务逻辑合理性，并了解单元代码的实际表现，即对单元代码进行<strong>动态测试</strong>。</p>
<p>动态测试实现原理</p>
<blockquote>
<p>驱动程序(Driver)<br>被测单元(Unit)<br>桩程序(Stub)</p>
</blockquote>
<p>桩模块和驱动模块的概念搞不清楚，那么下面来介绍这两个概念： </p>
<blockquote>
<p>　　假设现在项目组把任务分给了7个人，每个人负责实现一个模块。你负责的是B模块，你很优秀，第一个完成了编码工作，现在需要开展单元测试工作，先分析结构图：<br>　　1、由于B模块不是最顶层模块，所以它一定不包含main函数(A模块包含main函数)，也就不能独立运行。<br>　　2、B模块调用了D模块和E模块，而目前D模块和E模块都还没有开发好，那么想让B模块通过编译器的编译也是不可能的。<br>　　那么怎样才能测试B模块呢?需要做：<br>　　1、写两个模块Sd和Se分别代替D模块和E模块(函数名、返回值、传递的参数相同)，这样B模块就可以通过编译了。Sd模块和Se模块就是桩模块。<br>　　2、写一个模块Da用来代替A模块，里面包含main函数，可以在main函数中调用B模块，让B模块运行起来。Da模块就是驱动模块。<br>　　桩模块的使命除了使得程序能够编译通过之外，还需要模拟返回被代替的模块的各种可能返回值(什么时候返回什么值需要根据测试用例的情况来决定)。<br>　　驱动模块的使命就是根据测试用例的设计去调用被测试模块，并且判断被测试模块的返回值是否与测试用例的预期结果相符</p>
</blockquote>
<p>集成测试模式:</p>
<blockquote>
<p><strong>非渐增式集成测试</strong><br>先分别测试每个模块，再把所有模块按设计要求组装在一起，然后再进行集成程序的测试。<br><strong>渐增式集成测试</strong><br>把下一个待测试的模块同已经测试好的模块结合起来进行测试，测试完以后再把下一个待测试模块结合进来测试。</p>
</blockquote>
<p><a href="https://smms.app/image/rnOYwCVIDNeBuol" target="_blank"><img src="https://s2.loli.net/2023/06/02/rnOYwCVIDNeBuol.png" alt="HU3PI_3`VKVH_46F9W_GL_4.png"></a></p>
<p><img src="https://s2.loli.net/2023/06/02/qkVeM75SoWYvXg4.png" alt="E_Y5_DZ_B7D_8_Y_B__R_Q8.png"></p>
<p>以上两种测试模式都属于渐增式集成测试。</p>
<p>针对叶节点模块进行单元测试，下面哪项不是必须的?<br>A.测试数据	B.被测单元	C.驱动程序	D.桩程序</p>
<blockquote>
<p>然而，对于叶节点模块的单元测试而言，通常不需要使用桩程序。叶节点模块是指在软件系统中没有其他依赖的最底层模块，也被称为叶子节点或叶子模块。由于它们不依赖其他模块或外部系统，所以不需要模拟或替代任何外部依赖项的行为。</p>
</blockquote>
<h2 id="第六章-系统测试"><a href="#第六章-系统测试" class="headerlink" title="第六章 系统测试"></a>第六章 系统测试</h2><p><strong>功能测试</strong>就是对软件系统的各功能进行验证，根据系统功能需求，逐项测试系统功能是否达到用户要求。</p>
<p><strong>回归测试</strong>是指修改了源代码后，重新进行系统功能测试以确认修改没有引入新的错误或导致其他代码产生错误（<strong>回归缺陷</strong>）。</p>
<p><strong>性能测试</strong>是一种为了发现系统性能问题或获取系统性能相关指标而进行的测试。一般在真实环境、特定负载条件下，通过测试工具模拟实际软件系统的运行及其操作，同时监控性能各项指标，最后对测试结果进行分析来确定系统的性能状况。</p>
<p>常见系统性能问题</p>
<blockquote>
<p>资源耗尽:CPU使用率达到100%<br>资源泄露:内存泄露导致资源耗尽<br>资源瓶颈:缺少可用线程、DB连接资源</p>
</blockquote>
<p><strong>负载测试</strong>（Load Test）：负载测试是一种性能测试，指数据在超负荷环境中运行，程序是否能够承担。 关注点：how much</p>
<p><strong>压力测试</strong>（Stress Test）： 压力测试（又叫强度测试）也是一种性能测试，它在系统资源特别低的情况下软件系统运行情况，目的是找到系统在哪里失效以及如何失效的地方。</p>
<p><strong>容量测试</strong>(Volume Test)：确定系统可处理同时在线的最大用户数 关注点：how much（而不是how fast） 容量测试，通常和数据库有关，容量和负载的区别在于：容量关注的是大容量，而不需要关注使用中的实际表现。</p>
<p>其中，容量测试、负载测试、压力测试的英文解释为：</p>
<blockquote>
<p>Volume Testing &#x3D; Large amounts of data<br>Load Testing &#x3D; Large amount of users<br>Stress Testing &#x3D; Too many users, too much data, too little time and too little room</p>
</blockquote>
<p>假设一个业务系统有1万个注册用户，每天有1半用户会在上班时间（8小时)访问该系统，平均在线时间为1个小时。那么访问该系统的上班时间平均每分钟在线用户数为多少?<br>5000×60&#x2F;(8×60)&#x3D;625</p>
<p><img src="https://s2.loli.net/2023/06/02/TSQZBrG6hRD1NCn.png" alt="Y_TBOAQ0UR1TJ27T2@S4SQY.png"></p>
<p><strong>容错性测试</strong>是检查系统容错能力，即系统在异常条件下自身是否具有防护性的措施或者某种灾难性恢复的手段。</p>
<p><strong>兼容性测试</strong>是指测试软件在特定的硬件平台上、不同的应用软件之间、不同的操纵系统平台上、不同的网络等环境中是否能够很友好的运行。</p>
<p><strong>软件可靠性</strong>是指软件系统在规定时间内及规定环境条件下，完成特定功能的能力。</p>
<p>软件可靠性评估：<br>MTTF (Mean Time To Failure)——系统平均无故障时间</p>
<p>MTTR (Mean Time To Recover)——故障平均修复时间</p>
<p>可用性度量&#x3D; MTTF &#x2F; (MTTF+MTTR）<br>例:如果系统每运行100个时间单位，会有1个时间单位无法提供服务，其系统的可用性是99%。</p>
<p>下面哪项不是系统性能降低的原因?<br>A．资源耗尽	<em><strong>B．响应时间慢</strong></em>	C．内存泄漏	D．网络拥挤</p>
<h2 id="第七章-验收测试"><a href="#第七章-验收测试" class="headerlink" title="第七章 验收测试"></a>第七章 验收测试</h2><p><strong>验收测试</strong>是在软件产品完成了系统测试之后、产品发布之前所进行的软件测试活动，它是软件测试的最后一个阶段，也称<strong>交付测试</strong>。</p>
<p>有些内容在第二章说到啦！</p>
<h2 id="第八章-软件本地化测试"><a href="#第八章-软件本地化测试" class="headerlink" title="第八章 软件本地化测试"></a>第八章 软件本地化测试</h2><p><strong>软件本地化</strong>是指将某软件产品的用户界面、文档资料、在线帮助等从其源语言向目标语言进行转化，使之适应目标语言及文化的处理过程。</p>
<p><strong>软件国际化</strong>是指为保证所开发软件产品能适应国际市场需要，通过特定的系统架构设计、代码编程技术支持软件能在不同语言、不同文化的国家及地区使用，使其在进行本地化时不需要修改软件的程序代码。</p>
<p><strong>软件本地化测试</strong>是根据软件本地化开发完成后，设计测试用例，并利用这些测试用例去运行被测试软件，以发现软件程序缺陷的过程。（含<strong>翻译验证</strong>）</p>
<h2 id="第九章-测试自动化及其框架"><a href="#第九章-测试自动化及其框架" class="headerlink" title="第九章 测试自动化及其框架"></a>第九章 测试自动化及其框架</h2><p><strong>自动化测试</strong>是指采用测试工具实现程序驱动替代人驱动所开展的软件测试活动。测试自动化除包括自动化测试之外，还包括测试辅助工作的自动化。</p>
<p>自动化测试不能完成下面哪项质量指标测试?</p>
<p>A.正确性	B.可靠性	C.性能效率 	D.易用性</p>
<p>自动化测试可以用于测试正确性、可靠性和性能效率等质量指标，但对于易用性的测试则相对有限。易用性通常涉及到用户界面的可操作性、用户体验和用户友好性等方面，这些特征难以完全通过自动化测试来覆盖和评估。易用性测试通常需要人工参与，通过用户实际操作和反馈来评估系统的易用性。</p>
<p><strong>JUnit</strong>是一种白盒测试工具，因为它主要用于单元测试，可以直接访问和测试代码的内部结构和逻辑。它通常用于Java开发环境中，用于测试Java应用程序的各个单元和模块。<strong>UFT</strong>（Unified Functional Testing）是一种黑盒测试工具，用于功能测试和自动化测试。它主要用于测试应用程序的外部行为和用户界面，而不需要了解应用程序的内部实现。<br><strong>Load Runner</strong>是一种性能测试工具，用于测试应用程序在负载和压力条件下的性能表现。它通常用于模拟多个用户同时访问应用程序，以评估其性能和可靠性。<br><strong>Selenium</strong>是一种自动化测试工具，主要用于Web应用程序的功能测试和回归测试。它可以模拟用户操作和交互，并对应用程序的用户界面进行测试。由于它主要关注应用程序的外部行为，因此它也被归类为黑盒测试工具。</p>
<h2 id="第十章-测试需求分析与测试计划"><a href="#第十章-测试需求分析与测试计划" class="headerlink" title="第十章 测试需求分析与测试计划"></a>第十章 测试需求分析与测试计划</h2><p>功能测试范围</p>
<blockquote>
<p>页面链接:页面是否存在、页面是否正确跳转<br>控件功能:按钮功能是否正确、列表内容是否正确、光标位置移动是否顺序正确<br>输入文本框:数据格式、数据类型、数据长度是否检查<br>Web图形测试:图片文字提示是否正确、图片链接是否正确、图片在不同分辨率下显示是否正确<br>表单测试:请求是否响应、脚本是否正确执行</p>
</blockquote>
<p>非功能测试范围。</p>
<blockquote>
<p>性能测试——响应时间、吞吐量等<br>安全测试——用户验证、授权访问、数据安全等<br>容错测试——部件损坏后系统仍正常运行能力<br>兼容性测试——硬件兼容性、操作系统兼容性、浏览器兼容性·可伸缩性测试——增加容量的能力<br>可用性测试——正常运行时间&#x2F;总运行时间</p>
</blockquote>
<h2 id="第十一章-软件质量保证"><a href="#第十一章-软件质量保证" class="headerlink" title="第十一章 软件质量保证"></a>第十一章 软件质量保证</h2><p><strong>软件度量</strong>是根据一定规则对软件项目、软件过程、软件产品进行数据定义、数据收集及量化处理，其目的是为了清晰地理解、预测、评估、控制和改善软件质量。</p>
<p><img src="https://s2.loli.net/2023/06/02/sZKupSB7FxJXjwI.png" alt="NK38BB~K_`__MF0`3SH_VC9.png"></p>
<p><a href="https://smms.app/image/VIRA859hNGcTP1H" target="_blank"><img src="https://s2.loli.net/2023/06/02/VIRA859hNGcTP1H.png" alt="_RF_ABD_90`8@LYLXYP4R@A.png"></a></p>
<p><a href="https://smms.app/image/1rZ85Mps9dmJN3z" target="_blank"><img src="https://s2.loli.net/2023/06/02/1rZ85Mps9dmJN3z.png" alt="_Q1DGL`_SUS_P_RW~_TX6_N.png"></a></p>
<p>再举个上机考试考的题吧，细思也不是不能出大题：</p>
<p>针对如下Java程序进行单元测试，找出该程序的缺陷。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 对传入参数telCode（电话号码）进行处理，从中提取该电话号码的座机号码，并将其输出返回。 </span></span><br><span class="line"><span class="comment"> * 例如，输入电话号码为“86,28,83202112”， 返回值应为“83202112” */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">getPhoneNo</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">getPhoneNumber</span><span class="params">(String telCode)</span> &#123; </span><br><span class="line">	  <span class="keyword">if</span> (telCode == <span class="literal">null</span> ) &#123; </span><br><span class="line">	    <span class="keyword">return</span> <span class="string">&quot;输入了空字符串&quot;</span>;&#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">		String localPhone[] = telCode.split(<span class="string">&quot;,&quot;</span>); </span><br><span class="line">		<span class="keyword">return</span> localPhone[<span class="number">2</span>]; &#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>设计单元测试用例表，在该表中填写测试用例的输入数据和预期结果数据。</p>
<table>
<thead>
<tr>
<th>用例</th>
<th>telCode值</th>
<th>预期结果</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>86,28,83202112</td>
<td>83202112</td>
</tr>
<tr>
<td>2</td>
<td>Null</td>
<td>输入了空字符串</td>
</tr>
<tr>
<td>3</td>
<td>空格</td>
<td>输入电话号码格式错误</td>
</tr>
<tr>
<td>4</td>
<td>86,83202112</td>
<td>输入电话号码格式错误</td>
</tr>
<tr>
<td>5</td>
<td>86,28,83202112%</td>
<td>输入电话号码格式错误</td>
</tr>
</tbody></table>
<p>缺陷如下：</p>
<ol>
<li><p>电话号码为空时无法提示输入了空字符串。</p>
</li>
<li><p>电话号码输入为空格，或者其位数不符合要求，该程序报错而无法继续运行，应该提示输入电话号码格式错误。</p>
</li>
<li><p>当电话号码含有非法字符，该程序没有提示输入了非法字符，而是继续输出了非法字符，应该提示输入电话号码格式错误才对。</p>
</li>
</ol>
<p>测试代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.After;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">getPhoneNoTest_83202112</span> &#123;</span><br><span class="line">    getPhoneNo getPhoneNo=<span class="keyword">new</span> <span class="title class_">getPhoneNo</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">tearDown</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getPhoneNumber</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getPhoneNo1</span><span class="params">()</span> &#123;</span><br><span class="line">        String expectedResult=<span class="string">&quot;83202112&quot;</span>;</span><br><span class="line">        assertEquals(expectedResult,getPhoneNo.getPhoneNumber(<span class="string">&quot;86,28,83202112&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getPhoneNo2</span><span class="params">()</span> &#123;</span><br><span class="line">        String expectedResult=<span class="string">&quot;输入了空字符串&quot;</span>;</span><br><span class="line">        assertEquals(expectedResult,getPhoneNo.getPhoneNumber(<span class="literal">null</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getPhoneNo3</span><span class="params">()</span> &#123;</span><br><span class="line">        String expectedResult=<span class="string">&quot;输入电话号码格式错误&quot;</span>;</span><br><span class="line">        assertEquals(expectedResult,getPhoneNo.getPhoneNumber(<span class="string">&quot; &quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getPhoneNo4</span><span class="params">()</span> &#123;</span><br><span class="line">        String expectedResult=<span class="string">&quot;输入电话号码格式错误&quot;</span>;</span><br><span class="line">        assertEquals(expectedResult,getPhoneNo.getPhoneNumber(<span class="string">&quot;86,83202112&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getPhoneNo5</span><span class="params">()</span> &#123;</span><br><span class="line">        String expectedResult=<span class="string">&quot;输入电话号码格式错误&quot;</span>;</span><br><span class="line">        assertEquals(expectedResult,getPhoneNo.getPhoneNumber(<span class="string">&quot;86,28,83202112%&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改后的源程序：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">getPhoneNo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPhoneNumber</span><span class="params">(String telCode)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (telCode == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;输入了空字符串&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            String localPhone[] = telCode.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (localPhone.length &lt; <span class="number">3</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;输入电话号码格式错误&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">String</span> <span class="variable">phoneNumber</span> <span class="operator">=</span> localPhone[<span class="number">2</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; phoneNumber.length(); i++) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> phoneNumber.charAt(i);</span><br><span class="line">                <span class="keyword">if</span> (c &lt; <span class="string">&#x27;0&#x27;</span> ||c &gt; <span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&quot;输入电话号码格式错误&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> phoneNumber;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>大二下期末复习</category>
      </categories>
      <tags>
        <tag>软件测试</tag>
      </tags>
  </entry>
</search>
