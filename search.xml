<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>flask框架(1-2)</title>
    <url>/2023/05/29/Flask/1/</url>
    <content><![CDATA[<h2 id="Flask简介"><a href="#Flask简介" class="headerlink" title="Flask简介"></a>Flask简介</h2><p>​		Flask是一个轻量级的可定制框架，使用Python语言编写，较其他同类型框架更为灵活、轻便、安全且容易上手。它可以很好地结合<a href="https://baike.baidu.com/item/MVC%E6%A8%A1%E5%BC%8F/713147?fromModule=lemma_inlink">MVC模式</a>进行开发，开发人员分工合作，小型团队在短时间内就可以完成功能丰富的中小型网站或<a href="https://baike.baidu.com/item/Web%E6%9C%8D%E5%8A%A1/2837593?fromModule=lemma_inlink">Web服务</a>的实现。另外，Flask还有很强的定制性，用户可以根据自己的需求来添加相应的功能，在保持核心功能简单的同时实现功能的丰富与扩展，其强大的插件库可以让用户实现个性化的网站定制，开发出功能强大的网站。</p>
<p>​		Flask是目前十分流行的web框架，采用Python编程语言来实现相关功能。它被称为微框架(microframework)，“微”并不是意味着把整个Web应用放入到一个Python文件，微框架中的“微”是指Flask旨在保持代码简洁且易于扩展，Flask框架的主要特征是核心构成比较简单，但具有很强的扩展性和兼容性，程序员可以使用Python语言快速实现一个网站或Web服务。一般情况下，它不会指定数据库和模板引擎等对象，用户可以根据需要自己选择各种数据库。Flask自身不会提供表单验证功能，在项目实施过程中可以自由配置，从而为应用程序开发提供数据库抽象层基础组件，支持进行表单数据合法性验证、文件上传处理、用户身份认证和数据库集成等功能。Flask主要包括Werkzeug和Jinja2两个核心函数库，它们分别负责业务处理和安全方面的功能，这些基础函数为web项目开发过程提供了丰富的基础组件。Werkzeug库十分强大，功能比较完善，支持URL路由请求集成，一次可以响应多个用户的访问请求；支持Cookie和会话管理，通过身份缓存数据建立长久连接关系，并提高用户访问速度；支持交互式Javascript调试，提高用户体验；可以处理HTTP基本事务，快速响应客户端推送过来的访问请求。Jinja2库支持自动HTML转义功能，能够很好控制外部黑客的脚本攻击。系统运行速度很快，页面加载过程会将源码进行编译形成Python字节码，从而实现模板的高效运行；模板继承机制可以对模板内容进行修改和维护，为不同需求的用户提供相应的模板。</p>
<h2 id="路由和请求响应对象"><a href="#路由和请求响应对象" class="headerlink" title="路由和请求响应对象"></a>路由和请求响应对象</h2><ul>
<li>装饰器其实就是将rule字符串跟视图函数进行了绑定，通过add_url_rule()实现的绑定。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/index&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;welcome everyone！&#x27;</span></span><br></pre></td></tr></table></figure>

<p>等效</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;welcome everyone！&#x27;</span></span><br><span class="line">app.add_url_rule(<span class="string">&#x27;/index&#x27;</span>, view_func=index)</span><br></pre></td></tr></table></figure>

<h3 id="路由变量规则"><a href="#路由变量规则" class="headerlink" title="路由变量规则"></a>路由变量规则</h3><p>string  （缺省值） 接受任何不包含斜杠的文本   *<br>int      接受正整数  *<br>float    接受正浮点数<br>path     类似 string ，但可以包含斜杠<br>uuid     接受 UUID 字符串</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/index/&lt;path:p&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_path</span>(<span class="params">p</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;******&gt;&#x27;</span>, <span class="built_in">type</span>(p))  <span class="comment"># str类型</span></span><br><span class="line">    <span class="built_in">print</span>(p)</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/test/&lt;uuid:uid&gt;&#x27;</span></span>)  </span><span class="comment"># 必须传递uuid的格式，uuid模块， uuid.uuid4() ----&gt;UUID类型</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">uid</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;#######&gt;&gt;&gt;&gt;&gt;&#x27;</span>, <span class="built_in">type</span>(uid))</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;获取唯一的标识码&#x27;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 所有的路由搜索规则都是自上而下搜索，在写路由的是有定义的路由是唯一的。</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/projects&#x27;</span></span>)  </span><span class="comment"># 请求路由中如果添加了/：http://127.0.0.1:5000/about/  显示Not Found</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">about</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;The about page&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/projects/&#x27;</span></span>)  </span><span class="comment"># 路由中定义&#x27;/&#x27;，无论请求的URL是否带有/，都可以执行视图函数。如果请求的是有/，浏览器做了一次重定向</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">projects</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;The project page&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h3><p>返回值：其实返回值返回的都是一个响应对象。</p>
<blockquote>
<p>视图函数的返回值：<br>response响应：<br>1.str     自动转成response对象<br>2.dict    json<br>3.response对象  response对象<br>4.make_response()  response对象<br>5.redirect()   重定向  302状态码<br>6.render_template()  模板渲染 + 模板</p>
</blockquote>
<p>response响应对象</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(response.content_type)</span><br><span class="line"><span class="built_in">print</span>(response.headers)</span><br><span class="line"><span class="built_in">print</span>(response.status_code)  <span class="comment"># 200</span></span><br><span class="line"><span class="built_in">print</span>(response.status)  <span class="comment"># 200 OK</span></span><br><span class="line">response.set_cookie(<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;wxy&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>request请求对象：只需要导入，通过from flask import request<br>导入之后可以获取对象的属性和方法<br>属性：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(request.headers)  <span class="comment"># request对象 对象访问属性，也可以调用方法</span></span><br><span class="line"><span class="built_in">print</span>(request.path)</span><br><span class="line"><span class="built_in">print</span>(request.full_path)</span><br><span class="line"><span class="built_in">print</span>(request.base_url)</span><br><span class="line"><span class="built_in">print</span>(request.url)</span><br></pre></td></tr></table></figure>

<h4 id="获取提交的数据"><a href="#获取提交的数据" class="headerlink" title="获取提交的数据"></a>获取提交的数据</h4><p>跟请求方法相关的</p>
<ul>
<li><p>get：<br>request.args 底层是字典的形式   主要获取get提交的请求参数<br>如果是get请求格式是这个样子的：&#x2F;register2?username&#x3D;zhangsan&amp;address&#x3D;Beijing<br>此时的username是form表单中表单元素的name值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(request.args.get(<span class="string">&#x27;username&#x27;</span>))   <span class="comment"># 获取值</span></span><br><span class="line"><span class="built_in">print</span>(request.args.get(<span class="string">&#x27;address&#x27;</span>))</span><br></pre></td></tr></table></figure>
</li>
<li><p>post:<br>request.form 底层是字典的形式   主要获取post提交的请求参数<br>注意post提交必须在路由中进行设置，通过methods &#x3D; [‘GET’,’POST’]<br>按照此种形式：<br>@app.route(‘&#x2F;register2’, methods&#x3D;[‘GET’, ‘POST’])<br>def register2():  # 获取页面提交的内容<br>…….  内容省略<br>获取数据：<br>print(request.form)  # 如果请求方法是post则需要通过request.form取值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(request.form.get(<span class="string">&#x27;username&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(request.form.get(<span class="string">&#x27;address&#x27;</span>))</span><br></pre></td></tr></table></figure></li>
</ul>
<p>定制响应头</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">response = make_response(content)  <span class="comment"># 返回值就是一个response对象</span></span><br><span class="line">   <span class="comment"># 定制响应头</span></span><br><span class="line">   response.headers[<span class="string">&#x27;mytest&#x27;</span>] = <span class="string">&#x27;123abc&#x27;</span></span><br><span class="line">   response.headers[<span class="string">&#x27;myhello&#x27;</span>] = <span class="string">&#x27;hellohello&#x27;</span></span><br><span class="line">   <span class="comment"># 将定制好的response返回</span></span><br><span class="line">   <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Flask</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>大二自学</tag>
      </tags>
  </entry>
  <entry>
    <title>学习go的准备工作</title>
    <url>/2023/06/01/Go/1/</url>
    <content><![CDATA[<h2 id="一-golang环境配置"><a href="#一-golang环境配置" class="headerlink" title="一.golang环境配置"></a>一.golang环境配置</h2><ol>
<li><p><strong>下载SDK</strong></p>
<p>由于我用的是goland专业版，可以直接在上面下载Go SDK，很方便也不需要解压</p>
<p>也可以去官网安装，<strong><a href="https://golang.google.cn/dl/">https://golang.google.cn/dl/</a></strong></p>
<p><em><strong>🤡其实sdk和下文Gopath路径简洁一点更加方便~</strong></em></p>
<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2f0639cd12d544b5a19868c934ad34b4~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20230512213759389.png"></p>
</li>
<li><p><strong>将go的bin路径添加至Path环境变量中</strong></p>
<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5390cc87df4744d9950fa570b1b99604~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20230512214558987.png"></p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5e1571d984c048b9bdbcadf2ac0cd68d~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20230512214829533.png"></p>
</li>
<li><p><strong>新建工作目录go_workspace，测试环境</strong></p>
<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2001ee1accac4628b96c8515a23edd46~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20230512215418478.png"></p>
<p>​	在该目录里创建test.txt文件，代码如下</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main </span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123; </span><br><span class="line">    fmt.Println(<span class="string">&quot;Hello, world!&quot;</span>) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e8a01a5064104a60b490755a1b2f0fd2~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20230512215631547"></p>
<p>​	将文件后缀名改为go</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0031456c4f894df5b7e1810e74d56e09~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20230512215705515"></p>
<p>​	打开命令行，进入go_workspace的目录</p>
<p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0af7b34cb1224a6dab550296b0f3ae83~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20230512220156250.png"></p>
<p>​	输入以下命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">go run test.go</span></span><br></pre></td></tr></table></figure>

<p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0af7b34cb1224a6dab550296b0f3ae83~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20230512220740795"></p>
<p>​	输出Hello world!，证明环境配置成功</p>
<ol start="4">
<li><p><strong>设置模块代理</strong></p>
<p>如果访问 github 速度比较慢，建议配置 go mod proxy，下载第三方依赖包的速度可以大大加快</p>
</li>
</ol>
<blockquote>
<ol>
<li>打开“开始”并搜索“env” </li>
<li>选择“编辑系统环境变量” </li>
<li>点击“环境变量…”按钮 </li>
<li>在“&lt;**你的用户名**&gt; 的用户变量”章节下（上半部分）</li>
<li>点击“新建…”按钮</li>
<li>选择“变量名”输入框并输入“GO111MODULE” </li>
<li>选择“变量值”输入框并输入“on” </li>
<li>点击“确定”按钮 </li>
<li>点击“新建…”按钮 </li>
<li>选择“变量名”输入框并输入“GOPROXY” </li>
<li>选择“变量值”输入框并输入“<a href="https://goproxy.cn”/">https://goproxy.cn”</a> </li>
<li>点击“确定”按钮</li>
</ol>
</blockquote>
<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2906b6d25e1743d08166f72c5fb8abdc~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20230513094942468"></p>
<p>或者打开终端并执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">go <span class="built_in">env</span> -w GO111MODULE=on</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">go <span class="built_in">env</span> -w GOPROXY=https://goproxy.cn,direct</span></span><br></pre></td></tr></table></figure>

<p>如果不放心配置是否准确，当然也可以命令行输入go env检验</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7da62670712f41b487dfefbaa7be4a70~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20230513100243945"></p>
<p><em><strong>当然还可以设置自托管go模块代理</strong></em>，参照<a href="https://goproxy.cn/">https://goproxy.cn/</a></p>
<p>​	以下列出自托管go模块代理的一些好处：</p>
<ul>
<li>在没有网络连接的情况下使用代码，因为代码和依赖项都在本地存储。</li>
<li>更好地控制你的代码和依赖项，因为它们都在本地存储。</li>
<li>更好地保护你的代码和依赖项，因为它们不会被外部访问。</li>
<li>更快地构建和测试代码，因为它们不需要从远程服务器下载依赖项。</li>
</ul>
</li>
</ol>
<h2 id="二-goland配置"><a href="#二-goland配置" class="headerlink" title="二.goland配置"></a>二.goland配置</h2><p><strong>系统变量</strong>中新建GOROOT和GOPATH，GOROOT为go的安装路径（Go语言安装目录），GOPATH为go_workspace的路径</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/922f246f49bc482f805f451d9fcd1120~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20230512223852340.png"></p>
<p>并将<strong>用户变量</strong>中的GOPATH改为go_workspace的路径</p>
<p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/98d3ba81f6e9403eadd02764531eb944~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20230512224220984.png"></p>
<p>命令行输入go env，配置成功</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f3da83af8fa14d5e95df99a62efabccf~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20230512224355670.png"></p>
<p>新建go工程，GOROOT为go语言安装目录</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/309a90dc08704cb096f68bd1ba1003fd~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20230513082400448.png"></p>
<p>新建main目录，创建test.go文件，代码如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;Hello, world!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>右键并单击运行</p>
<p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9e97edf2697f44c9ac6989f149b432a6~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20230513084354777.png"></p>
<p>输出Hello world！配置成功</p>
<h2 id="三-goland常用快捷键"><a href="#三-goland常用快捷键" class="headerlink" title="三.goland常用快捷键"></a>三.goland常用快捷键</h2><p>文件相关快捷键：</p>
<blockquote>
<p>CTRL+E，打开最近浏览过的文件。<br>CTRL+SHIFT+E，打开最近更改的文件。<br>CTRL+N，可以快速打开struct结构体。<br>CTRL+SHIFT+N，可以快速打开文件。</p>
</blockquote>
<p>代码格式化：</p>
<blockquote>
<p>CTRL+ALT+T，可以把代码包在一个块内，例如if{…}else{…}。<br>CTRL+ALT+L，格式化代码。<br>CTRL+空格，代码提示。<br>CTRL+&#x2F;，单行注释。CTRL+SHIFT+&#x2F;，进行多行注释。<br>CTRL+B，快速打开光标处的结构体或方法（跳转到定义处）。<br>CTRL+“+&#x2F;-”，可以将当前方法进行展开或折叠。</p>
</blockquote>
<p>查找和定位:</p>
<blockquote>
<p>CTRL+R，替换文本。<br>CTRL+F，查找文本。<br>CTRL+SHIFT+F，进行全局查找。<br>CTRL+G，快速定位到某行。</p>
</blockquote>
<p>代码编辑:</p>
<blockquote>
<p>ALT+Q，可以看到当前方法的声明。<br>CTRL+Backspace，按单词进行删除。<br>SHIFT+ENTER，可以向下插入新行，即使光标在当前行的中间。<br>CTRL+X，删除当前光标所在行。<br>CTRL+D，复制当前光标所在行。<br>ALT+SHIFT+UP&#x2F;DOWN，可以将光标所在行的代码上下移动。<br>CTRL+SHIFT+U，可以将选中内容进行大小写转化。</p>
</blockquote>
<p>原文链接：<a href="https://juejin.cn/post/7232459954580947000">Windows系统下golang和goland详细配置|青训营笔记 - 掘金 (juejin.cn)</a></p>
]]></content>
      <categories>
        <category>青训营</category>
      </categories>
      <tags>
        <tag>大二自学</tag>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>go的编码规范</title>
    <url>/2023/06/01/Go/3/</url>
    <content><![CDATA[<h1 id="编码规范"><a href="#编码规范" class="headerlink" title="编码规范"></a>编码规范</h1><p>本规范旨在为日常Go项目开发提供一个代码的规范指导，方便团队形成一个统一的代码风格，提高代码的可读性，规范性和统一性。本规范将从命名规范，注释规范，代码风格和 Go 语言提供的常用的工具这几个方面做一个说明。该规范参考了 go 语言官方代码的风格制定。</p>
<h2 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h2><p>命名是代码规范中很重要的一部分，统一的命名规则有利于提高的代码的可读性，好的命名仅仅通过命名就可以获取到足够多的信息。</p>
<p>Go在命名时以字母a到Z或a到Z或下划线开头，后面跟着零或更多的字母、下划线和数字(0到9)。Go不允许在命名时中使用@、$和%等标点符号。Go是一种区分大小写的编程语言。因此，Manpower和manpower是两个不同的命名。</p>
<blockquote>
<ol>
<li>当命名（包括常量、变量、类型、函数名、结构字段等等）以一个大写字母开头，如：Group1，那么使用这种形式的标识符的对象就<strong>可以被外部包的代码所使用</strong>（客户端程序需要先导入这个包），这被称为导出（像面向对象语言中的 public）；</li>
<li><strong>命名如果以小写字母开头，则对包外是不可见的，但是他们在整个包的内部是可见并且可用的</strong>（像面向对象语言中的 private ）</li>
</ol>
</blockquote>
<h3 id="包命名：package"><a href="#包命名：package" class="headerlink" title="包命名：package"></a>包命名：package</h3><p>保持package的名字和目录保持一致，尽量采取有意义的包名，简短，有意义，尽量和标准库不要冲突。包名应该为<strong>小写</strong>单词，不要使用下划线或者混合大小写。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> demo</span><br><span class="line"><span class="keyword">package</span> main</span><br></pre></td></tr></table></figure>

<h3 id="文件命名"><a href="#文件命名" class="headerlink" title="文件命名"></a>文件命名</h3><p>尽量采取有意义的文件名，简短，有意义，应该为<strong>小写</strong>单词，使用<strong>下划线</strong>分隔各个单词。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">my_test.<span class="keyword">go</span></span><br></pre></td></tr></table></figure>

<h3 id="结构体命名"><a href="#结构体命名" class="headerlink" title="结构体命名"></a>结构体命名</h3><ul>
<li><p>采用驼峰命名法，首字母根据访问控制大写或者小写</p>
</li>
<li><p>struct 申明和初始化格式采用多行，例如下面：</p>
</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 多行申明</span></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span>&#123;</span><br><span class="line">    Username  <span class="type">string</span></span><br><span class="line">    Email     <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 多行初始化</span></span><br><span class="line">u := User&#123;</span><br><span class="line">    Username: <span class="string">&quot;astaxie&quot;</span>,</span><br><span class="line">    Email:    <span class="string">&quot;astaxie@gmail.com&quot;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="接口命名"><a href="#接口命名" class="headerlink" title="接口命名"></a>接口命名</h3><ul>
<li>命名规则基本和上面的结构体类型保持一致。</li>
<li>单个函数的结构名以 “er” 作为后缀，例如 Reader , Writer 。</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Reader <span class="keyword">interface</span> &#123;</span><br><span class="line">        Read(p []<span class="type">byte</span>) (n <span class="type">int</span>, err <span class="type">error</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="变量命名"><a href="#变量命名" class="headerlink" title="变量命名"></a>变量命名</h3><ul>
<li>和结构体类似，变量名称一般遵循驼峰法，首字母根据访问控制原则大写或者小写，但遇到特有名词时，需要遵循以下规则： <ul>
<li>如果变量为私有，且特有名词为首个单词，则使用小写，如 apiClient</li>
<li>其它情况都应当使用该名词原有的写法，如 APIClient、repoID、UserID</li>
<li>错误示例：UrlArray，应该写成 urlArray 或者 URLArray</li>
</ul>
</li>
<li>若变量类型为 bool 类型，则名称应以 has, is, can 或 allow 开头</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> isExist <span class="type">bool</span></span><br><span class="line"><span class="keyword">var</span> hasConflict <span class="type">bool</span></span><br><span class="line"><span class="keyword">var</span> canManage <span class="type">bool</span></span><br><span class="line"><span class="keyword">var</span> allowGitHook <span class="type">bool</span></span><br></pre></td></tr></table></figure>

<h3 id="常量命名"><a href="#常量命名" class="headerlink" title="常量命名"></a>常量命名</h3><p>常量均需使用全部大写字母组成，并使用下划线分词</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> APP_VER = <span class="string">&quot;1.0&quot;</span></span><br></pre></td></tr></table></figure>


<p>如果是枚举类型的常量，需要先创建相应类型：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Scheme <span class="type">string</span></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    HTTP  Scheme = <span class="string">&quot;http&quot;</span></span><br><span class="line">    HTTPS Scheme = <span class="string">&quot;https&quot;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><p>下面的列表显示了Go中的保留字。这些保留字不能用作常量或变量或任何其他标识符名称。</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/24fd930b2dd64516845b351960d1df8b~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="guanjianzi"></p>
<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>Go提供C风格的<code>/* */</code>块注释和C ++风格的<code>//</code>行注释。行注释是常态；块注释主要显示为包注释，但在表达式中很有用或禁用大量代码。</p>
<ul>
<li>单行注释是最常见的注释形式，你可以在任何地方使用以 &#x2F;&#x2F; 开头的单行注释</li>
<li>多行注释也叫块注释，均已以 &#x2F;* 开头，并以 *&#x2F; 结尾，且不可以嵌套使用，多行注释一般用于包的文档描述或注释成块的代码片段</li>
</ul>
<p>go 语言自带的 godoc 工具可以根据注释生成文档，生成可以自动生成对应的网站（ golang.org 就是使用 godoc 工具直接生成的），注释的质量决定了生成的文档的质量。每个包都应该有一个包注释，在package子句之前有一个块注释。对于多文件包，包注释只需要存在于一个文件中，任何一个都可以。包评论应该介绍包，并提供与整个包相关的信息。它将首先出现在<code>godoc</code>页面上，并应设置下面的详细文档。</p>
<p>详细的如何写注释可以<br>参考：<a href="http://golang.org/doc/effective_go.html#commentary">http://golang.org/doc/effective_go.html#commentary</a></p>
<h3 id="包注释"><a href="#包注释" class="headerlink" title="包注释"></a>包注释</h3><p>每个包都应该有一个包注释，一个位于package子句之前的块注释或行注释。包如果有多个go文件，只需要出现在一个go文件中（一般是和包同名的文件）即可。 包注释应该包含下面基本信息(请严格按照这个顺序，简介，创建人，创建时间）：</p>
<ul>
<li>包的基本简介（包名，简介）</li>
<li>创建者，格式： 创建人： rtx 名</li>
<li>创建时间，格式：创建时间： yyyyMMdd</li>
</ul>
<p>例如 util 包的注释示例如下</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// util 包， 该包包含了项目共用的一些常量，封装了项目中一些共用函数。</span></span><br><span class="line"><span class="comment">// 创建人： wxy</span></span><br><span class="line"><span class="comment">// 创建时间： 20230601</span></span><br></pre></td></tr></table></figure>

<h3 id="结构（接口）注释"><a href="#结构（接口）注释" class="headerlink" title="结构（接口）注释"></a>结构（接口）注释</h3><p>每个自定义的结构体或者接口都应该有注释说明，该注释对结构进行简要介绍，放在结构体定义的前一行，格式为： 结构体名， 结构体说明。同时结构体内的每个成员变量都要有说明，该说明放在成员变量的后面（注意对齐），实例如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// User ， 用户对象，定义了用户的基础信息</span></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span>&#123;</span><br><span class="line">    Username  <span class="type">string</span> <span class="comment">// 用户名</span></span><br><span class="line">    Email     <span class="type">string</span> <span class="comment">// 邮箱</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="函数（方法）注释"><a href="#函数（方法）注释" class="headerlink" title="函数（方法）注释"></a>函数（方法）注释</h3><p>每个函数，或者方法（结构体或者接口下的函数称为方法）都应该有注释说明，函数的注释应该包括三个方面（严格按照此顺序撰写）：</p>
<ul>
<li>简要说明，格式说明：以函数名开头，“，”分隔说明部分</li>
<li>参数列表：每行一个参数，参数名开头，“，”分隔说明部分</li>
<li>返回值： 每行一个返回值</li>
</ul>
<p>示例如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// NewtAttrModel ， 属性数据层操作类的工厂方法</span></span><br><span class="line"><span class="comment">// 参数：</span></span><br><span class="line"><span class="comment">//      ctx ： 上下文信息</span></span><br><span class="line"><span class="comment">// 返回值：</span></span><br><span class="line"><span class="comment">//      属性操作类指针</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewAttrModel</span><span class="params">(ctx *common.Context)</span></span> *AttrModel &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="代码逻辑注释"><a href="#代码逻辑注释" class="headerlink" title="代码逻辑注释"></a>代码逻辑注释</h3><p>对于一些关键位置的代码逻辑，或者局部较为复杂的逻辑，需要有相应的逻辑说明，方便其他开发者阅读该段代码，实例如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 从 Redis 中批量读取属性，对于没有读取到的 id ， 记录到一个数组里面，准备从 DB 中读取</span></span><br><span class="line">xxxxx</span><br><span class="line">xxxxxxx</span><br><span class="line">xxxxxxx</span><br></pre></td></tr></table></figure>

<h3 id="注释风格"><a href="#注释风格" class="headerlink" title="注释风格"></a>注释风格</h3><p>统一使用中文注释，对于中英文字符之间严格使用空格分隔， 这个不仅仅是中文和英文之间，英文和中文标点之间也都要使用空格分隔，例如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 从 Redis 中批量读取属性，对于没有读取到的 id ， 记录到一个数组里面，准备从 DB 中读取</span></span><br></pre></td></tr></table></figure>


<p>上面 Redis 、 id 、 DB 和其他中文字符之间都是用了空格分隔。 </p>
<ul>
<li>建议全部使用单行注释</li>
<li>和代码的规范一样，单行注释不要过长，禁止超过 120 字符。</li>
</ul>
<h2 id="代码风格"><a href="#代码风格" class="headerlink" title="代码风格"></a>代码风格</h2><h3 id="缩进和折行"><a href="#缩进和折行" class="headerlink" title="缩进和折行"></a>缩进和折行</h3><ul>
<li>缩进直接使用 gofmt 工具格式化即可（gofmt 是使用 tab 缩进的）；</li>
<li>折行方面，一行最长不超过120个字符，超过的请使用换行展示，尽量保持格式优雅。</li>
</ul>
<p>我们使用Goland开发工具，可以直接使用快捷键：ctrl+alt+L，即可。</p>
<h3 id="语句的结尾"><a href="#语句的结尾" class="headerlink" title="语句的结尾"></a>语句的结尾</h3><p>Go语言中是不需要类似于Java需要冒号结尾，默认一行就是一条数据</p>
<p>如果你打算将多个语句写在同一行，它们则必须使用 <strong>;</strong> </p>
<h3 id="括号和空格"><a href="#括号和空格" class="headerlink" title="括号和空格"></a>括号和空格</h3><p>括号和空格方面，也可以直接使用 gofmt 工具格式化（go 会强制左大括号不换行，换行会报语法错误），所有的运算符和操作数之间要留空格。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 正确的方式</span></span><br><span class="line"><span class="keyword">if</span> a &gt; <span class="number">0</span> &#123;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// 错误的方式</span></span><br><span class="line"><span class="keyword">if</span> a&gt;<span class="number">0</span>  <span class="comment">// a ，0 和 &gt; 之间应该空格</span></span><br><span class="line">&#123;       <span class="comment">// 左大括号不可以换行，会报语法错误</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="import-规范"><a href="#import-规范" class="headerlink" title="import 规范"></a>import 规范</h3><p>import在多行的情况下，goimports会自动帮你格式化，但是我们这里还是规范一下import的一些规范，如果你在一个文件里面引入了一个package，还是建议采用如下格式：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>如果你的包引入了三种类型的包，标准库包，程序内部包，第三方包，建议采用如下方式进行组织你的包：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;encoding/json&quot;</span></span><br><span class="line">    <span class="string">&quot;strings&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;myproject/models&quot;</span></span><br><span class="line">    <span class="string">&quot;myproject/controller&quot;</span></span><br><span class="line">    <span class="string">&quot;myproject/utils&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;github.com/astaxie/beego&quot;</span></span><br><span class="line">    <span class="string">&quot;github.com/go-sql-driver/mysql&quot;</span></span><br><span class="line">)   </span><br></pre></td></tr></table></figure>

<p>有顺序的引入包，不同的类型采用空格分离，第一种是标准库，第二是项目包，第三是第三方包。</p>
<p>在项目中不要使用相对路径引入包：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这是不好的导入</span></span><br><span class="line"><span class="keyword">import</span> “../net”</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这是正确的做法</span></span><br><span class="line"><span class="keyword">import</span> “github.com/repo/proj/src/net”</span><br></pre></td></tr></table></figure>

<p>但是如果是引入本项目中的其他包，最好使用相对路径。</p>
<h3 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h3><ul>
<li>错误处理的原则就是不能丢弃任何有返回err的调用，不要使用 _ 丢弃，必须全部处理。接收到错误，要么返回err，或者使用log记录下来</li>
<li>尽早return：一旦有错误发生，马上返回</li>
<li>尽量不要使用panic，除非你知道你在做什么</li>
<li>错误描述如果是英文必须为小写，不需要标点结尾</li>
<li>采用独立的错误流进行处理</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 错误写法</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="comment">// error handling</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// normal code</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确写法</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="comment">// error handling</span></span><br><span class="line">    <span class="keyword">return</span> <span class="comment">// or continue, etc.</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// normal code</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>单元测试文件名命名规范为 example_test.go<br>测试用例的函数名称必须以 Test 开头，例如：TestExample<br>每个重要的函数都要首先编写测试用例，测试用例和正规代码一起提交方便进行回归测试</p>
<h2 id="常用工具"><a href="#常用工具" class="headerlink" title="常用工具"></a>常用工具</h2><p>上面提到了很过规范， go 语言本身在代码规范性这方面也做了很多努力，很多限制都是强制语法要求，例如左大括号不换行，引用的包或者定义的变量不使用会报错，此外 go 还是提供了很多好用的工具帮助我们进行代码的规范，</p>
<p><strong>gofmt</strong><br>大部分的格式问题可以通过gofmt解决， gofmt 自动格式化代码，保证所有的 go 代码与官方推荐的格式保持一致，于是所有格式有关问题，都以 gofmt 的结果为准。</p>
<p><strong>goimport</strong><br>我们强烈建议使用 goimport ，该工具在 gofmt 的基础上增加了自动删除和引入包.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">go get golang.org/x/tools/cmd/goimports</span></span><br></pre></td></tr></table></figure>

<p><em><strong>以上两种工具上一篇文章已经介绍过怎么配置</strong></em></p>
<p><strong>go vet</strong><br>vet工具可以帮我们静态分析我们的源码存在的各种问题，例如多余的代码，提前return的逻辑，struct的tag是否符合标准等。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">go get golang.org/x/tools/cmd/vet</span></span><br></pre></td></tr></table></figure>


<p>使用如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">go vet .</span></span><br></pre></td></tr></table></figure>















]]></content>
      <categories>
        <category>青训营</category>
      </categories>
      <tags>
        <tag>大二自学</tag>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>变量与常量</title>
    <url>/2023/06/01/Go/4/</url>
    <content><![CDATA[<h1 id="基本语法——变量var"><a href="#基本语法——变量var" class="headerlink" title="基本语法——变量var"></a>基本语法——变量var</h1><h2 id="变量的使用"><a href="#变量的使用" class="headerlink" title="变量的使用"></a>变量的使用</h2><h3 id="什么是变量"><a href="#什么是变量" class="headerlink" title="什么是变量"></a>什么是变量</h3><p>变量是为存储特定类型的值而提供给内存位置的名称。在go中声明变量有多种语法。</p>
<p>所以变量的本质就是一小块内存，用于存储数据，在程序运行过程中数值可以改变</p>
<h3 id="声明变量"><a href="#声明变量" class="headerlink" title="声明变量"></a>声明变量</h3><p>var名称类型是声明单个变量的语法。</p>
<blockquote>
<p>以字母或下划线开头，由一个或多个字母、数字、下划线组成</p>
</blockquote>
<p>声明一个变量</p>
<p>第一种，指定变量类型，声明后若不赋值，使用<em><strong>默认值</strong></em></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name <span class="keyword">type</span></span><br><span class="line">name = value</span><br></pre></td></tr></table></figure>

<p>第二种，根据值自行判定变量类型(类型推断Type inference)</p>
<p>如果一个变量有一个初始值，Go将自动能够使用初始值来推断该变量的类型。因此，如果变量具有初始值，则可以省略变量声明中的类型。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = value</span><br></pre></td></tr></table></figure>

<p>第三种，省略var, 注意 :&#x3D;左侧的变量不应该是已经声明过的(多个变量同时声明时，至少保证一个是新变量)，否则会导致编译错误(简短声明)</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">name := value</span><br><span class="line"><span class="comment">// 例如</span></span><br><span class="line"><span class="keyword">var</span> a <span class="type">int</span> = <span class="number">10</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="number">10</span></span><br><span class="line">c : = <span class="number">10</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>这种方式它只能被用在函数体内，而不可以用于全局变量的声明与赋值</p>
</blockquote>
<p>示例代码：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="string">&quot;Hello&quot;</span></span><br><span class="line"><span class="keyword">var</span> b <span class="type">string</span> = <span class="string">&quot;World&quot;</span></span><br><span class="line"><span class="keyword">var</span> c <span class="type">bool</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">println</span>(a, b, c)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Hello World false</span><br></pre></td></tr></table></figure>

<h4 id="多变量声明"><a href="#多变量声明" class="headerlink" title="多变量声明"></a>多变量声明</h4><p>第一种，以逗号分隔，声明与赋值分开，若不赋值，存在默认值</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name1, name2, name3 <span class="keyword">type</span></span><br><span class="line">name1, name2, name3 = v1, v2, v3</span><br></pre></td></tr></table></figure>

<p>第二种，直接赋值，下面的变量类型可以是不同的类型</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name1, name2, name3 = v1, v2, v3</span><br></pre></td></tr></table></figure>

<p>第三种，集合类型</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> (</span><br><span class="line">    name1 type1</span><br><span class="line">    name2 type2</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>如果在相同的代码块中，我们不可以再次对于相同名称的变量使用初始化声明，例如：a :&#x3D; 20 就是不被允许的，编译器会提示错误 no new variables on left side of :&#x3D;，但是 a &#x3D; 20 是可以的，因为这是给相同的变量赋予一个新的值。</p>
<p>如果你在定义变量 a 之前使用它，则会得到编译错误 undefined: a。如果你声明了一个局部变量却没有在相同的代码块中使用它，同样会得到编译错误，例如下面这个例子当中的变量 a：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="keyword">var</span> a <span class="type">string</span> = <span class="string">&quot;abc&quot;</span></span><br><span class="line">   fmt.Println(<span class="string">&quot;hello, world&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>尝试编译这段代码将得到错误 a declared and not used</p>
<p>此外，单纯地给 a 赋值也是不够的，这个值必须被使用</p>
<p>在同一个作用域中，已存在同名的变量，则之后的声明初始化，则退化为赋值操作。但这个前提是，最少要有一个新的变量被定义，且在同一作用域，例如，下面的y就是新定义的变量</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	x := <span class="number">140</span></span><br><span class="line">	fmt.Println(&amp;x)</span><br><span class="line">	x, y := <span class="number">200</span>, <span class="string">&quot;abc&quot;</span></span><br><span class="line">	fmt.Println(&amp;x, x)</span><br><span class="line">	fmt.Print(y)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0xc04200a2b0</span><br><span class="line">0xc04200a2b0 200</span><br><span class="line">abc</span><br></pre></td></tr></table></figure>

<h1 id="基本语法——常量constant"><a href="#基本语法——常量constant" class="headerlink" title="基本语法——常量constant"></a>基本语法——常量constant</h1><h2 id="常量的使用"><a href="#常量的使用" class="headerlink" title="常量的使用"></a>常量的使用</h2><h3 id="常量声明"><a href="#常量声明" class="headerlink" title="常量声明"></a>常量声明</h3><p>常量是一个简单值的标识符，在程序运行时，不会被修改的量。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> identifier [<span class="keyword">type</span>] = value</span><br></pre></td></tr></table></figure>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//显式类型定义： </span></span><br><span class="line"><span class="keyword">const</span> b <span class="type">string</span> = <span class="string">&quot;abc&quot;</span></span><br><span class="line"><span class="comment">//隐式类型定义：</span></span><br><span class="line"><span class="keyword">const</span> b = <span class="string">&quot;abc&quot;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="keyword">const</span> LENGTH <span class="type">int</span> = <span class="number">10</span></span><br><span class="line">   <span class="keyword">const</span> WIDTH <span class="type">int</span> = <span class="number">5</span>   </span><br><span class="line">   <span class="keyword">var</span> area <span class="type">int</span></span><br><span class="line">   <span class="keyword">const</span> a, b, c = <span class="number">1</span>, <span class="literal">false</span>, <span class="string">&quot;str&quot;</span> <span class="comment">//多重赋值</span></span><br><span class="line"></span><br><span class="line">   area = LENGTH * WIDTH</span><br><span class="line">   fmt.Printf(<span class="string">&quot;面积为 : %d&quot;</span>, area)</span><br><span class="line">   <span class="built_in">println</span>()</span><br><span class="line">   <span class="built_in">println</span>(a, b, c)   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">面积为 : 50</span><br><span class="line">1 false str</span><br></pre></td></tr></table></figure>

<p>常量可以作为枚举，常量组</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    Unknown = <span class="number">0</span></span><br><span class="line">    Female = <span class="number">1</span></span><br><span class="line">    Male = <span class="number">2</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>常量组中如不指定类型和初始化值，则与上一行非空常量右值相同</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">const</span> (</span><br><span class="line">		x <span class="type">uint16</span> = <span class="number">16</span></span><br><span class="line">		y</span><br><span class="line">		s = <span class="string">&quot;abc&quot;</span></span><br><span class="line">		z</span><br><span class="line">	)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%T,%v\n&quot;</span>, y, y)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%T,%v\n&quot;</span>, z, z)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">uint16,16</span><br><span class="line">string,abc</span><br></pre></td></tr></table></figure>

<p>常量的注意事项：</p>
<ul>
<li><p>常量中的数据类型只可以是布尔型、数字型（整数型、浮点型和复数）和字符串型</p>
</li>
<li><p><em><strong>不曾使用的常量，在编译的时候，是不会报错的</strong></em></p>
</li>
<li><p>显示指定类型的时候，必须确保常量左右值类型一致，需要时可做显示类型转换。这与变量就不一样了，变量是可以是不同的类型值</p>
</li>
</ul>
<h3 id="iota关键字"><a href="#iota关键字" class="headerlink" title="iota关键字"></a>iota关键字</h3><p>iota，特殊常量，可以认为是一个可以被编译器修改的常量</p>
<p>iota 可以被用作枚举值：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    a = <span class="literal">iota</span></span><br><span class="line">    b = <span class="literal">iota</span></span><br><span class="line">    c = <span class="literal">iota</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>第一个 iota 等于 0，每当 iota 在新的一行被使用时，它的值都会自动加 1；所以 a&#x3D;0, b&#x3D;1, c&#x3D;2 可以简写为如下形式：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    a = <span class="literal">iota</span></span><br><span class="line">    b</span><br><span class="line">    c</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p><strong>iota 用法</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">const</span> (</span><br><span class="line">            a = <span class="literal">iota</span>   <span class="comment">//0</span></span><br><span class="line">            b          <span class="comment">//1</span></span><br><span class="line">            c          <span class="comment">//2</span></span><br><span class="line">            d = <span class="string">&quot;ha&quot;</span>   <span class="comment">//独立值，iota += 1</span></span><br><span class="line">            e          <span class="comment">//&quot;ha&quot;   iota += 1</span></span><br><span class="line">            f = <span class="number">100</span>    <span class="comment">//iota +=1</span></span><br><span class="line">            g          <span class="comment">//100  iota +=1</span></span><br><span class="line">            h = <span class="literal">iota</span>   <span class="comment">//7,恢复计数</span></span><br><span class="line">            i          <span class="comment">//8</span></span><br><span class="line">    )</span><br><span class="line">    fmt.Println(a,b,c,d,e,f,g,h,i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0 1 2 ha ha 100 100 7 8</span><br></pre></td></tr></table></figure>

<p>如果中断iota自增，则必须显式恢复。且后续自增值按行序递增</p>
<p>自增默认是int类型，可以自行进行显示指定类型</p>
<p>数字常量不会分配存储空间，无须像变量那样通过内存寻址来取值，因此无法获取地址</p>
<h1 id="变量与常量的示例"><a href="#变量与常量的示例" class="headerlink" title="变量与常量的示例"></a>变量与常量的示例</h1><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;math&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> a = <span class="string">&quot;initial&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> b, c <span class="type">int</span> = <span class="number">1</span>, <span class="number">2</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> d = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> e <span class="type">float64</span></span><br><span class="line"></span><br><span class="line">	f := <span class="type">float32</span>(e)</span><br><span class="line"></span><br><span class="line">	g := a + <span class="string">&quot;foo&quot;</span></span><br><span class="line">	fmt.Println(a, b, c, d, e, f) <span class="comment">// initial 1 2 true 0 0</span></span><br><span class="line">	fmt.Println(g)                <span class="comment">// initialapple</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">const</span> s <span class="type">string</span> = <span class="string">&quot;constant&quot;</span></span><br><span class="line">	<span class="keyword">const</span> h = <span class="number">500000000</span></span><br><span class="line">	<span class="keyword">const</span> i = <span class="number">3e20</span> / h</span><br><span class="line">	fmt.Println(s, h, i, math.Sin(h), math.Sin(i))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">initial 1 2 true 0 0</span><br><span class="line">initialfoo</span><br><span class="line">constant 500000000 6e+11 -0.28470407323754404 0.7591864109375384</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>青训营</category>
      </categories>
      <tags>
        <tag>大二自学</tag>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>数据类型与输入输出</title>
    <url>/2023/06/02/Go/5/</url>
    <content><![CDATA[<h1 id="基本语法——数据类型"><a href="#基本语法——数据类型" class="headerlink" title="基本语法——数据类型"></a>基本语法——数据类型</h1><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><p>以下是go中可用的基本数据类型</p>
<p><a href="https://smms.app/image/mkKRra8JejXWM4V" target="_blank"><img src="https://s2.loli.net/2023/06/02/mkKRra8JejXWM4V.jpg" ></a></p>
<h3 id="布尔型bool"><a href="#布尔型bool" class="headerlink" title="布尔型bool"></a>布尔型bool</h3><p>布尔型的值只可以是常量 true 或者 false。一个简单的例子：var b bool &#x3D; true</p>
<h3 id="数值型"><a href="#数值型" class="headerlink" title="数值型"></a>数值型</h3><p><strong>1、</strong>整数型</p>
<ul>
<li><p>int8<br>有符号 8 位整型 (-128 到 127)<br>长度：8bit</p>
</li>
<li><p>int16<br>有符号 16 位整型 (-32768 到 32767)</p>
</li>
<li><p>int32<br>有符号 32 位整型 (-2147483648 到 2147483647)</p>
</li>
<li><p>int64<br>有符号 64 位整型 (-9223372036854775808 到 9223372036854775807)</p>
</li>
<li><p>uint8<br>无符号 8 位整型 (0 到 255)<br>8位都用于表示数值：</p>
</li>
<li><p>uint16<br>无符号 16 位整型 (0 到 65535)</p>
</li>
<li><p>uint32<br>无符号 32 位整型 (0 到 4294967295)</p>
</li>
<li><p>uint64<br>无符号 64 位整型 (0 到 18446744073709551615)</p>
</li>
</ul>
<blockquote>
<p>int和uint:根据底层平台，表示32或64位整数。除非需要使用特定大小的整数，否则通常应该使用int来表示整数。<br>大小:32位系统32位，64位系统64位。<br>范围:-2147483648到2147483647的32位系统和-9223372036854775808到9223372036854775807的64位系统。</p>
</blockquote>
<p><strong>2、浮点型</strong></p>
<ul>
<li><p>float32</p>
<p>IEEE-754 32位浮点型数</p>
</li>
<li><p>float64</p>
<p>IEEE-754 64位浮点型数</p>
</li>
<li><p>complex64</p>
<p>32 位实数和虚数</p>
</li>
<li><p>complex128</p>
<p>64 位实数和虚数</p>
</li>
</ul>
<p><strong>3、其他</strong></p>
<ul>
<li><p>byte</p>
<p>类似 uint8</p>
</li>
<li><p>rune</p>
<p>类似 int32</p>
</li>
<li><p>uint</p>
<p>32 或 64 位</p>
</li>
<li><p>int</p>
<p>与 uint 一样大小</p>
</li>
<li><p>uintptr</p>
<p>无符号整型，用于存放一个指针</p>
</li>
</ul>
<h3 id="字符串型"><a href="#字符串型" class="headerlink" title="字符串型"></a>字符串型</h3><p>字符串就是一串固定长度的字符连接起来的字符序列。Go的字符串是由单个字节连接起来的。Go语言的字符串的字节使用UTF-8编码标识Unicode文本</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str <span class="type">string</span></span><br><span class="line">str = <span class="string">&quot;Hello World&quot;</span></span><br></pre></td></tr></table></figure>



<h3 id="数据类型转换：Type-Convert"><a href="#数据类型转换：Type-Convert" class="headerlink" title="数据类型转换：Type Convert"></a>数据类型转换：Type Convert</h3><p>语法格式：Type(Value)</p>
<p>常数：在有需要的时候，会自动转型</p>
<p>变量：需要手动转型	T(V)</p>
<p>注意点：兼容类型可以转换</p>
<h2 id="复合类型-派生类型"><a href="#复合类型-派生类型" class="headerlink" title="复合类型(派生类型)"></a>复合类型(派生类型)</h2><p>1、指针类型（Pointer）<br>2、数组类型<br>3、结构化类型(struct)<br>4、Channel 类型<br>5、函数类型<br>6、切片类型<br>7、接口类型（interface）<br>8、Map 类型</p>
<h1 id="键盘输入和打印输出"><a href="#键盘输入和打印输出" class="headerlink" title="键盘输入和打印输出"></a>键盘输入和打印输出</h1><h2 id="打印输出"><a href="#打印输出" class="headerlink" title="打印输出"></a>打印输出</h2><h3 id="fmt包"><a href="#fmt包" class="headerlink" title="fmt包"></a>fmt包</h3><p>fmt包实现了类似C语言printf和scanf的格式化I&#x2F;O。格式化verb（’verb’）源自C语言但更简单。</p>
<p>详见官网fmt的API：<a href="https://golang.google.cn/pkg/fmt/">https://golang.google.cn/pkg/fmt/</a></p>
<h3 id="导入包"><a href="#导入包" class="headerlink" title="导入包"></a>导入包</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="常用打印函数"><a href="#常用打印函数" class="headerlink" title="常用打印函数"></a>常用打印函数</h3><p><strong>打印：</strong></p>
<p><a href="https://golang.google.cn/pkg/fmt/#Print">func Print(a …interface{}) (n int, err error)</a></p>
<p><strong>格式化打印：</strong></p>
<p><a href="https://golang.google.cn/pkg/fmt/#Printf">func Printf(format string, a …interface{}) (n int, err error)</a></p>
<p><strong>打印后换行</strong></p>
<p><a href="https://golang.google.cn/pkg/fmt/#Println">func Println(a …interface{}) (n int, err error)</a></p>
<p>格式化打印中的常用占位符：</p>
<blockquote>
<p>格式化打印占位符：<br>            %v,原样输出<br>            %T，打印类型<br>            %t,bool类型<br>            %s，字符串<br>            %f，浮点<br>            %d，10进制的整数<br>            %b，2进制的整数<br>            %o，8进制<br>            %x，%X，16进制<br>                %x：0-9，a-f<br>                %X：0-9，A-F<br>            %c，打印字符<br>            %p，打印地址</p>
</blockquote>
<p>示例代码：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	a := <span class="number">100</span>           <span class="comment">//int</span></span><br><span class="line">	b := <span class="number">3.14</span>          <span class="comment">//float64</span></span><br><span class="line">	c := <span class="literal">true</span>          <span class="comment">// bool</span></span><br><span class="line">	d := <span class="string">&quot;Hello World&quot;</span> <span class="comment">//string</span></span><br><span class="line">	e := <span class="string">`Ruby`</span>        <span class="comment">//string</span></span><br><span class="line">	f := <span class="string">&#x27;A&#x27;</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;%T,%b\n&quot;</span>, a, a)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%T,%f\n&quot;</span>, b, b)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%T,%t\n&quot;</span>, c, c)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%T,%s\n&quot;</span>, d, d)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%T,%s\n&quot;</span>, e, e)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%T,%d,%c\n&quot;</span>, f, f, f)</span><br><span class="line">	fmt.Println(<span class="string">&quot;-----------------------&quot;</span>)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, a)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, b)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, c)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, d)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, e)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, f)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int,1100100</span><br><span class="line">float64,3.140000</span><br><span class="line">bool,true</span><br><span class="line">string,Hello World</span><br><span class="line">string,Ruby</span><br><span class="line">int32,65,A</span><br><span class="line">-----------------------</span><br><span class="line">100</span><br><span class="line">3.14</span><br><span class="line">true</span><br><span class="line">Hello World</span><br><span class="line">Ruby</span><br><span class="line">65</span><br></pre></td></tr></table></figure>



<h2 id="键盘输入"><a href="#键盘输入" class="headerlink" title="键盘输入"></a>键盘输入</h2><h3 id="fmt包读取键盘输入"><a href="#fmt包读取键盘输入" class="headerlink" title="fmt包读取键盘输入"></a>fmt包读取键盘输入</h3><p>常用方法：</p>
<ul>
<li><a href="https://golang.google.cn/pkg/fmt/#Scan">func Scan(a …interface{}) (n int, err error)</a></li>
</ul>
<p>​		Scan 从标准输入扫描文本，读取由 <strong>空白符</strong> 分隔的值分别保存到本函数的参数中。（换行符也被视为空白符）</p>
<ul>
<li><p><a href="https://golang.google.cn/pkg/fmt/#Scanf">func Scanf(format string, a …interface{}) (n int, err error)</a></p>
<p>Scanf从标准输入扫描文本，按照 format 参数指定的格式去读取由空白符分隔的值保存到传递给本函数的参数中。</p>
</li>
<li><p><a href="https://golang.google.cn/pkg/fmt/#Scanln">func Scanln(a …interface{}) (n int, err error)</a></p>
<p>Scanln类似Scan，它在遇到换行时停止扫描。最后一个数据后面必须有换行或者到达结束位置。</p>
</li>
</ul>
<p>示例代码：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> x <span class="type">int</span></span><br><span class="line">	<span class="keyword">var</span> y <span class="type">float64</span></span><br><span class="line">	fmt.Println(<span class="string">&quot;请输入一个整数，一个浮点类型：&quot;</span>)</span><br><span class="line">	fmt.Scanln(&amp;x,&amp;y)<span class="comment">//读取键盘的输入，通过操作地址，赋值给x和y   阻塞式</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;x的数值：%d，y的数值：%f\n&quot;</span>,x,y)</span><br><span class="line"></span><br><span class="line">	fmt.Scanf(<span class="string">&quot;%d,%f&quot;</span>,&amp;x,&amp;y)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;x:%d,y:%f\n&quot;</span>,x,y)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">请输入一个整数，一个浮点类型：</span><br><span class="line">100 3.14</span><br><span class="line">x的数值：100，y的数值：3.140000</span><br><span class="line">100,5.20</span><br><span class="line">x:100,y:5.200000</span><br></pre></td></tr></table></figure>

<h3 id="bufio包读取"><a href="#bufio包读取" class="headerlink" title="bufio包读取"></a>bufio包读取</h3><p><a href="https://golang.google.cn/pkg/bufio/">https://golang.google.cn/pkg/bufio/</a></p>
<p>bufio包中都是IO操作的方法：</p>
<p>先创建Reader对象,然后就可以各种读取了。</p>
<p>示例代码：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;os&quot;</span></span><br><span class="line">	<span class="string">&quot;bufio&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;请输入一个字符串：&quot;</span>)</span><br><span class="line">	reader := bufio.NewReader(os.Stdin)</span><br><span class="line">	s1, _ := reader.ReadString(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">	fmt.Println(<span class="string">&quot;读到的数据：&quot;</span>, s1)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行效果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">请输入一个字符串：</span><br><span class="line">hello wxy</span><br><span class="line">读到的数据： hello wxy</span><br></pre></td></tr></table></figure>

<p>解释：</p>
<ul>
<li><code>reader := bufio.NewReader(os.Stdin)</code>：这行代码创建了一个用于读取用户输入的读取器。<code>bufio.NewReader</code> 函数接受一个参数 <code>os.Stdin</code>，它表示标准输入（通常是键盘输入）。<code>reader</code> 是一个读取器对象，我们可以使用它来读取用户输入的字符串。</li>
<li><code>s1, _ := reader.ReadString(&#39;\n&#39;)</code>：这行代码使用读取器 <code>reader</code> 从标准输入读取字符串，直到遇到换行符 (<code>&#39;\n&#39;</code>) 为止。它将读取的字符串赋值给变量 <code>s1</code>。注意，这里使用了 <code>_</code>（下划线）来忽略函数的第二个返回值（表示可能的错误），因为我们不关心错误处理。</li>
</ul>
]]></content>
      <categories>
        <category>青训营</category>
      </categories>
      <tags>
        <tag>大二自学</tag>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>条件语句与循环语句</title>
    <url>/2023/06/02/Go/6/</url>
    <content><![CDATA[<h1 id="程序的流程结构"><a href="#程序的流程结构" class="headerlink" title="程序的流程结构"></a>程序的流程结构</h1><p>程序的流程控制结构一共有三种：顺序结构，选择结构，循环结构。</p>
<p>顺序结构：从上向下，逐行执行。</p>
<p>选择结构：条件满足，某些代码才会执行。0-1次</p>
<p>​	分支语句：if，switch，select</p>
<p>循环结构：条件满足，某些代码会被反复的执行多次。0-N次</p>
<p>​	循环语句：for</p>
<h1 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h1><h2 id="If语句"><a href="#If语句" class="headerlink" title="If语句"></a>If语句</h2><p>语法格式：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> 布尔表达式 &#123;</span><br><span class="line">   <span class="comment">/* 在布尔表达式为 true 时执行 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> 布尔表达式 &#123;</span><br><span class="line">   <span class="comment">/* 在布尔表达式为 true 时执行 */</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">/* 在布尔表达式为 false 时执行 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> 布尔表达式<span class="number">1</span> &#123;</span><br><span class="line">   <span class="comment">/* 在布尔表达式1为 true 时执行 */</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> 布尔表达式<span class="number">2</span>&#123;</span><br><span class="line">   <span class="comment">/* 在布尔表达式1为 false ,布尔表达式2为true时执行 */</span></span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">   <span class="comment">/* 在上面两个布尔表达式都为false时，执行*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>示例代码：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="comment">/* 定义局部变量 */</span></span><br><span class="line">   <span class="keyword">var</span> a <span class="type">int</span> = <span class="number">10</span></span><br><span class="line"> </span><br><span class="line">   <span class="comment">/* 使用 if 语句判断布尔表达式 */</span></span><br><span class="line">   <span class="keyword">if</span> a &lt; <span class="number">20</span> &#123;</span><br><span class="line">       <span class="comment">/* 如果条件为 true 则执行以下语句 */</span></span><br><span class="line">       fmt.Printf(<span class="string">&quot;a 小于 20\n&quot;</span> )</span><br><span class="line">   &#125;</span><br><span class="line">   fmt.Printf(<span class="string">&quot;a 的值为 : %d\n&quot;</span>, a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果其中包含一个可选的语句组件(在评估条件之前执行)，则还有一个变体。它的语法是</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> statement; condition &#123;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> condition&#123;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>示例代码：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> <span class="number">7</span>%<span class="number">2</span> == <span class="number">0</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;7 is even&quot;</span>)</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;7 is odd&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> <span class="number">8</span>%<span class="number">4</span> == <span class="number">0</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;8 is divisible by 4&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> num := <span class="number">9</span>; num &lt; <span class="number">0</span> &#123;</span><br><span class="line">		fmt.Println(num, <span class="string">&quot;is negative&quot;</span>)</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> num &lt; <span class="number">10</span> &#123;</span><br><span class="line">		fmt.Println(num, <span class="string">&quot;has 1 digit&quot;</span>)</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		fmt.Println(num, <span class="string">&quot;has multiple digits&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>需要注意的是，num的定义在if里，那么只能够在该if..else语句块中使用，否则编译器会报错的。</p>
</blockquote>
<h2 id="switch语句：“开关”"><a href="#switch语句：“开关”" class="headerlink" title="switch语句：“开关”"></a>switch语句：“开关”</h2><p>switch是一个条件语句，它计算表达式并将其与可能匹配的列表进行比较，并根据匹配执行代码块。它可以被认为是一种惯用的方式来写多个if else子句。</p>
<p>switch 语句用于基于不同条件执行不同动作，每一个 case 分支都是唯一的，从上直下逐一测试，直到匹配为止。<br>switch 语句执行的过程从上至下，直到找到匹配项，匹配项后面也<em><strong>不需要再加break</strong></em>。</p>
<p><em><strong>而如果switch没有表达式，它会匹配true</strong></em></p>
<p><em>Go里面switch默认相当于每个case最后带有break</em>，匹配成功后不会自动向下执行其他case，而是跳出整个switch, 但是可以使用fallthrough强制执行后面的case代码。</p>
<p>变量 var1 可以是任何类型，而 val1 和 val2 则可以是同类型的任意值。类型不被局限于常量或整数，但必须是相同的类型；或者最终结果为相同类型的表达式。<br>可以<strong>同时测试多个可能符合条件的值，使用逗号分割它们</strong>，例如：case val1, val2, val3。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> var1 &#123;</span><br><span class="line">    <span class="keyword">case</span> val1:</span><br><span class="line">        ...</span><br><span class="line">    <span class="keyword">case</span> val2:</span><br><span class="line">        ...</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>示例代码：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">/* 定义局部变量 */</span></span><br><span class="line">	<span class="keyword">var</span> grade = <span class="string">&quot;B&quot;</span></span><br><span class="line">	<span class="keyword">var</span> marks = <span class="number">90</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">switch</span> marks &#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">90</span>:</span><br><span class="line">		grade = <span class="string">&quot;A&quot;</span></span><br><span class="line">	<span class="keyword">case</span> <span class="number">80</span>:</span><br><span class="line">		grade = <span class="string">&quot;B&quot;</span></span><br><span class="line">	<span class="keyword">case</span> <span class="number">50</span>, <span class="number">60</span>, <span class="number">70</span>:</span><br><span class="line">		grade = <span class="string">&quot;C&quot;</span> <span class="comment">//case 后可以由多个数值</span></span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		grade = <span class="string">&quot;D&quot;</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">switch</span> &#123;</span><br><span class="line">	<span class="keyword">case</span> grade == <span class="string">&quot;A&quot;</span>:</span><br><span class="line">		fmt.Printf(<span class="string">&quot;优秀!\n&quot;</span>)</span><br><span class="line">	<span class="keyword">case</span> grade == <span class="string">&quot;B&quot;</span>, grade == <span class="string">&quot;C&quot;</span>:</span><br><span class="line">		fmt.Printf(<span class="string">&quot;良好\n&quot;</span>)</span><br><span class="line">	<span class="keyword">case</span> grade == <span class="string">&quot;D&quot;</span>:</span><br><span class="line">		fmt.Printf(<span class="string">&quot;及格\n&quot;</span>)</span><br><span class="line">	<span class="keyword">case</span> grade == <span class="string">&quot;F&quot;</span>:</span><br><span class="line">		fmt.Printf(<span class="string">&quot;不及格\n&quot;</span>)</span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		fmt.Printf(<span class="string">&quot;差\n&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;你的等级是 %s\n&quot;</span>, grade)</span><br><span class="line">    </span><br><span class="line">    t := time.Now()</span><br><span class="line">	<span class="keyword">switch</span> &#123;</span><br><span class="line">	<span class="keyword">case</span> t.Hour() &lt; <span class="number">12</span>:</span><br><span class="line">		fmt.Println(<span class="string">&quot;It&#x27;s before noon&quot;</span>)</span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		fmt.Println(<span class="string">&quot;It&#x27;s after noon&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">优秀!</span><br><span class="line">你的等级是 A</span><br><span class="line">It&#x27;s before noon</span><br></pre></td></tr></table></figure>



<h3 id="fallthrough"><a href="#fallthrough" class="headerlink" title="fallthrough"></a>fallthrough</h3><p>如需贯通后续的case，就添加fallthrough</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">switch</span> x := <span class="number">5</span>; x &#123;</span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		fmt.Println(x)</span><br><span class="line">	<span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">		x += <span class="number">10</span></span><br><span class="line">		fmt.Println(x)</span><br><span class="line">		<span class="keyword">fallthrough</span></span><br><span class="line">	<span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">		x += <span class="number">20</span></span><br><span class="line">		fmt.Println(x)</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">15</span><br><span class="line">35</span><br></pre></td></tr></table></figure>

<hr>
<p>解释：</p>
<p>根据switch语句的逻辑，首先会执行default分支，但是由于我们没有在default分支中写入任何代码，所以会直接跳过。在case 5分支的最后，我们使用了fallthrough关键字。fallthrough关键字的作用是强制执行下一个case分支的代码，而不进行条件判断。</p>
<p>在<code>switch</code>语句中，<code>default</code>用于处理没有匹配到任何<code>case</code>的情况。当<code>switch</code>表达式的值与所有的<code>case</code>都不匹配时，程序会执行<code>default</code>分支中的代码。</p>
<p><code>default</code>分支是可选的，也就是说可以选择是否在<code>switch</code>语句中包含它。如果没有<code>default</code>分支，而且没有任何一个<code>case</code>匹配到<code>switch</code>表达式的值，那么<code>switch</code>语句将不会执行任何代码。</p>
<p><code>default</code>分支通常被用作最后一个分支，用于处理不常见或者意外的情况。它可以用来提供一个默认的处理逻辑，或者给用户一个错误提示。</p>
<p>以下是一个示例，展示了<code>default</code>的使用：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	num := <span class="number">10</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">switch</span> num &#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>:</span><br><span class="line">		fmt.Println(<span class="string">&quot;小数&quot;</span>)</span><br><span class="line">	<span class="keyword">case</span> <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>:</span><br><span class="line">		fmt.Println(<span class="string">&quot;中数&quot;</span>)</span><br><span class="line">	<span class="keyword">case</span> <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>:</span><br><span class="line">		fmt.Println(<span class="string">&quot;大数&quot;</span>)</span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		fmt.Println(<span class="string">&quot;未知数&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在上面的示例中，如果<code>num</code>的值不属于1到9之间的任何一个数，那么就会执行<code>default</code>分支，并输出”未知数”。<code>default</code>分支可以用来处理一些边缘情况或者未预料到的情况，确保程序的健壮性。</p>
<hr>
<p><em>case中的表达式是可选的，可以省略。如果该表达式被省略，则被认为是switch true，并且每个case表达式都被计算为true，并执行相应的代码块</em>。</p>
<p>示例代码：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (  </span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;  </span><br><span class="line">    num := <span class="number">75</span></span><br><span class="line">    <span class="keyword">switch</span> &#123; <span class="comment">// expression is omitted</span></span><br><span class="line">    <span class="keyword">case</span> num &gt;= <span class="number">0</span> &amp;&amp; num &lt;= <span class="number">50</span>:</span><br><span class="line">        fmt.Println(<span class="string">&quot;num is greater than 0 and less than 50&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> num &gt;= <span class="number">51</span> &amp;&amp; num &lt;= <span class="number">100</span>:</span><br><span class="line">        fmt.Println(<span class="string">&quot;num is greater than 51 and less than 100&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> num &gt;= <span class="number">101</span>:</span><br><span class="line">        fmt.Println(<span class="string">&quot;num is greater than 100&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">num is greater than 51 and less than 100</span><br></pre></td></tr></table></figure>

<blockquote>
<p>switch的注意事项</p>
<ol>
<li>case后的常量值不能重复</li>
<li>case后可以有多个常量值</li>
<li>fallthrough应该是某个case的最后一行。如果它出现在中间的某个地方，编译器就会抛出错误。</li>
</ol>
</blockquote>
<h3 id="Type-Switch"><a href="#Type-Switch" class="headerlink" title="Type Switch"></a>Type Switch</h3><p>switch 语句还可以被用于 type-switch 来判断某个 interface 变量中实际存储的变量类型。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> x.(<span class="keyword">type</span>)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">type</span>:</span><br><span class="line">       statement(s);      </span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">type</span>:</span><br><span class="line">       statement(s); </span><br><span class="line">    <span class="comment">/* 你可以定义任意个数的case */</span></span><br><span class="line">    <span class="keyword">default</span>: <span class="comment">/* 可选 */</span></span><br><span class="line">       statement(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>示例代码：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="keyword">var</span> x <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">     </span><br><span class="line">   <span class="keyword">switch</span> i := x.(<span class="keyword">type</span>) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="literal">nil</span>:	  </span><br><span class="line">         fmt.Printf(<span class="string">&quot; x 的类型 :%T&quot;</span>,i)                </span><br><span class="line">      <span class="keyword">case</span> <span class="type">int</span>:	  </span><br><span class="line">         fmt.Printf(<span class="string">&quot;x 是 int 型&quot;</span>)                       </span><br><span class="line">      <span class="keyword">case</span> <span class="type">float64</span>:</span><br><span class="line">         fmt.Printf(<span class="string">&quot;x 是 float64 型&quot;</span>)           </span><br><span class="line">      <span class="keyword">case</span> <span class="function"><span class="keyword">func</span><span class="params">(<span class="type">int</span>)</span></span> <span class="type">float64</span>:</span><br><span class="line">         fmt.Printf(<span class="string">&quot;x 是 func(int) 型&quot;</span>)                      </span><br><span class="line">      <span class="keyword">case</span> <span class="type">bool</span>, <span class="type">string</span>:</span><br><span class="line">         fmt.Printf(<span class="string">&quot;x 是 bool 或 string 型&quot;</span> )       </span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">         fmt.Printf(<span class="string">&quot;未知型&quot;</span>)     </span><br><span class="line">   &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">x 的类型 :&lt;<span class="literal">nil</span>&gt;</span><br></pre></td></tr></table></figure>

<p>解释：</p>
<p>在这段代码中，变量<code>x</code>的类型被声明为<code>interface&#123;&#125;</code>，它是一个空接口。空接口可以表示任意类型的值，包括<code>nil</code>。当我们使用类型断言<code>x.(type)</code>来获取<code>x</code>的具体类型时，如果<code>x</code>的值是<code>nil</code>，那么<code>case nil</code>分支会匹配成功。这里需要注意的是，<code>nil</code>是一个特殊的值，表示一个指针类型或接口类型的零值，表示该指针或接口不指向任何具体的对象。在这种情况下，我们可以将其视为一种特殊的类型。因此，<code>case nil</code>分支被用来处理<code>x</code>为<code>nil</code>的情况。</p>
<h1 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h1><p>循环语句表示条件满足，可以反复的执行某段代码。</p>
<p>for是唯一的循环语句。(Go没有while循环)</p>
<h2 id="for语句"><a href="#for语句" class="headerlink" title="for语句"></a>for语句</h2><p>语法结构：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for init; condition; post &#123; &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>初始化语句只执行一次。在初始化循环之后，将检查该条件。如果条件计算为true，那么{}中的循环体将被执行，然后是post语句。post语句将在循环的每次成功迭代之后执行。在执行post语句之后，该条件将被重新检查。如果它是正确的，循环将继续执行，否则循环终止。</p>
</blockquote>
<p>示例代码：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (  </span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;  </span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++ &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot; %d&quot;</span>,i)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在for循环中声明的变量仅在循环范围内可用。因此，i不能在外部访问循环。</p>
</blockquote>
<p><strong>所有的三个组成部分，即初始化、条件和post都是可选的。</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> condition &#123; &#125;</span><br></pre></td></tr></table></figure>

<p>效果与while相似</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> &#123; &#125;</span><br></pre></td></tr></table></figure>

<p>效果与for(;;) 一样</p>
<p>for 循环的 range 格式可以对 slice、map、数组、字符串等进行迭代循环</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for key, value := range oldMap &#123;</span><br><span class="line">    newMap[key] = value</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> b <span class="type">int</span> = <span class="number">9</span></span><br><span class="line">   <span class="keyword">var</span> a <span class="type">int</span></span><br><span class="line"></span><br><span class="line">   numbers := [<span class="number">6</span>]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>&#125; </span><br><span class="line"></span><br><span class="line">   <span class="comment">/* for 循环 */</span></span><br><span class="line">   <span class="keyword">for</span> a := <span class="number">0</span>; a &lt; <span class="number">5</span>; a++ &#123;</span><br><span class="line">      fmt.Printf(<span class="string">&quot;a 的值为: %d\n&quot;</span>, a)</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span> a &lt; b &#123;</span><br><span class="line">      a++</span><br><span class="line">      fmt.Printf(<span class="string">&quot;a 的值为: %d\n&quot;</span>, a)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span> i,x:= <span class="keyword">range</span> numbers &#123;</span><br><span class="line">      fmt.Printf(<span class="string">&quot;第 %d 位 x 的值 = %d\n&quot;</span>, i,x)</span><br><span class="line">   &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a 的值为: 0</span><br><span class="line">a 的值为: 1</span><br><span class="line">a 的值为: 2</span><br><span class="line">a 的值为: 3</span><br><span class="line">a 的值为: 4</span><br><span class="line">a 的值为: 1</span><br><span class="line">a 的值为: 2</span><br><span class="line">a 的值为: 3</span><br><span class="line">a 的值为: 4</span><br><span class="line">a 的值为: 5</span><br><span class="line">a 的值为: 6</span><br><span class="line">a 的值为: 7</span><br><span class="line">a 的值为: 8</span><br><span class="line">a 的值为: 9</span><br><span class="line">第 0 位 x 的值 = 1</span><br><span class="line">第 1 位 x 的值 = 2</span><br><span class="line">第 2 位 x 的值 = 3</span><br><span class="line">第 3 位 x 的值 = 5</span><br><span class="line">第 4 位 x 的值 = 0</span><br><span class="line">第 5 位 x 的值 = 0</span><br></pre></td></tr></table></figure>



<h3 id="多层for循环"><a href="#多层for循环" class="headerlink" title="多层for循环"></a>多层for循环</h3><p>for循环中又有循环嵌套，就表示多层循环了。</p>
<h2 id="跳出循环的语句"><a href="#跳出循环的语句" class="headerlink" title="跳出循环的语句"></a>跳出循环的语句</h2><h3 id="break语句"><a href="#break语句" class="headerlink" title="break语句"></a>break语句</h3><p>break：跳出循环体。break语句用于在结束其正常执行之前突然终止for循环</p>
<p>示例代码：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (  </span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;  </span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> i &gt; <span class="number">5</span> &#123;</span><br><span class="line">            <span class="keyword">break</span> <span class="comment">//loop is terminated if i &gt; 5</span></span><br><span class="line">        &#125;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;%d &quot;</span>, i)</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;\nline after for loop&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 2 3 4 5 </span><br><span class="line">line after for loop</span><br></pre></td></tr></table></figure>

<h3 id="continue语句"><a href="#continue语句" class="headerlink" title="continue语句"></a>continue语句</h3><p>continue：跳出一次循环。continue语句用于跳过for循环的当前迭代。在continue语句后面的for循环中的所有代码将不会在当前迭代中执行。循环将继续到下一个迭代。</p>
<p>示例代码：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (  </span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;  </span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> i%<span class="number">2</span> == <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;%d &quot;</span>, i)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 3 5 7 9 </span><br></pre></td></tr></table></figure>

<h3 id="goto语句"><a href="#goto语句" class="headerlink" title="goto语句"></a>goto语句</h3><p>goto：可以无条件地转移到过程中指定的行。</p>
<p>语法结构：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">goto</span> label;</span><br><span class="line">..</span><br><span class="line">..</span><br><span class="line">label: statement;</span><br></pre></td></tr></table></figure>

<p>​												<a href="https://smms.app/image/ZUna3jv2o9h5xgN" target="_blank"><img src="https://s2.loli.net/2023/06/02/ZUna3jv2o9h5xgN.jpg" ></a></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">/* 定义局部变量 */</span></span><br><span class="line">	<span class="keyword">var</span> a = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/* 循环 */</span></span><br><span class="line">LOOP:</span><br><span class="line">	<span class="keyword">for</span> a &lt; <span class="number">20</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> a == <span class="number">15</span> &#123;</span><br><span class="line">			<span class="comment">/* 跳过迭代 */</span></span><br><span class="line">			a = a + <span class="number">1</span></span><br><span class="line">			<span class="keyword">goto</span> LOOP</span><br><span class="line">		&#125;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;a的值为 : %d\n&quot;</span>, a)</span><br><span class="line">		a++</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a的值为 : 10</span><br><span class="line">a的值为 : 11</span><br><span class="line">a的值为 : 12</span><br><span class="line">a的值为 : 13</span><br><span class="line">a的值为 : 14</span><br><span class="line">a的值为 : 16</span><br><span class="line">a的值为 : 17</span><br><span class="line">a的值为 : 18</span><br><span class="line">a的值为 : 19</span><br></pre></td></tr></table></figure>

<p>统一错误处理<br>多处错误处理存在代码重复时是非常棘手的，例如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">	err := firstCheckError()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">goto</span> onExit</span><br><span class="line">    &#125;</span><br><span class="line">    err = secondCheckError()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">goto</span> onExit</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(<span class="string">&quot;done&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">onExit:</span><br><span class="line">    fmt.Println(err)</span><br><span class="line">    exitProcess()</span><br></pre></td></tr></table></figure>

<h2 id="生成随机数"><a href="#生成随机数" class="headerlink" title="生成随机数"></a>生成随机数</h2><p>示例代码：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;math/rand&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	num1 := rand.Int()</span><br><span class="line">	fmt.Println(num1)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">		num := rand.Intn(<span class="number">10</span>)</span><br><span class="line">		fmt.Println(num)</span><br><span class="line">	&#125;</span><br><span class="line">	rand.Seed(<span class="number">1000</span>)</span><br><span class="line">	num2 := rand.Intn(<span class="number">10</span>)</span><br><span class="line">	fmt.Println(<span class="string">&quot;---&gt;&quot;</span>, num2)</span><br><span class="line"></span><br><span class="line">	t1 := time.Now()</span><br><span class="line">	fmt.Println(t1)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%T\n&quot;</span>, t1)</span><br><span class="line"></span><br><span class="line">	timeStamp1 := t1.Unix()</span><br><span class="line">	fmt.Println(timeStamp1)</span><br><span class="line"></span><br><span class="line">	timestamp2 := t1.UnixNano()</span><br><span class="line">	fmt.Println(timestamp2)</span><br><span class="line"></span><br><span class="line">	rand.Seed(time.Now().UnixNano())</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;---&gt;&quot;</span>, rand.Intn(<span class="number">100</span>))</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	num3 := rand.Intn(<span class="number">46</span>) + <span class="number">3</span></span><br><span class="line">	fmt.Println(num3)</span><br><span class="line">	num4 := rand.Intn(<span class="number">62</span>) + <span class="number">15</span></span><br><span class="line">	fmt.Println(num4)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2359980755445512729</span><br><span class="line">6</span><br><span class="line">0</span><br><span class="line">9</span><br><span class="line">3</span><br><span class="line">2</span><br><span class="line">---&gt; 5</span><br><span class="line">2023-06-02 12:00:50.6796224 +0800 CST m=+0.001542201</span><br><span class="line">time.Time</span><br><span class="line">1685678450</span><br><span class="line">1685678450679622400</span><br><span class="line">---&gt; 74</span><br><span class="line">---&gt; 79</span><br><span class="line">---&gt; 18</span><br><span class="line">---&gt; 21</span><br><span class="line">---&gt; 68</span><br><span class="line">---&gt; 41</span><br><span class="line">---&gt; 33</span><br><span class="line">---&gt; 31</span><br><span class="line">---&gt; 26</span><br><span class="line">---&gt; 37</span><br><span class="line">15</span><br></pre></td></tr></table></figure>

<p>解释：</p>
<p>在随机数生成中，种子（seed）是用于初始化随机数生成器的值。种子决定了随机数序列的起始点。在某种程度上，相同种子会生成相同的随机数序列。</p>
<p>在上述代码中，<code>rand.Seed()</code>方法用于设置随机数生成器的种子。如果没有显式地设置种子，Go语言的<code>math/rand</code>包默认使用一个固定的种子，这意味着每次程序运行时都会生成相同的随机数序列。这在某些情况下可能不是我们所期望的。</p>
<p>通过调用<code>rand.Seed()</code>方法并传入一个不同的种子值，我们可以改变随机数生成器的起始点，从而产生不同的随机数序列。通常情况下，我们会使用当前时间的纳秒级时间戳作为种子，以确保每次运行程序时都能生成不同的随机数序列。</p>
<p>在代码中，<code>rand.Seed(1000)</code>将种子设置为固定值1000，因此后续生成的随机数序列将始终相同。而<code>rand.Seed(time.Now().UnixNano())</code>使用当前时间的纳秒级时间戳作为种子，可以产生不同的随机数序列。</p>
<p>但是<em><strong>自从Go 1.2 0以来,rand.Seed就已经被弃用了</strong></em>！</p>
]]></content>
      <categories>
        <category>青训营</category>
      </categories>
      <tags>
        <tag>大二自学</tag>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>电大软件测试～第一次作业</title>
    <url>/2023/05/31/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/test1/</url>
    <content><![CDATA[<h2 id="第一次作业及参考答案"><a href="#第一次作业及参考答案" class="headerlink" title="第一次作业及参考答案"></a>第一次作业及参考答案</h2><h3 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h3><p>针对电子科技大学信息门户的“密码找回”界面的邮箱输入域进行验证， 采用等价划分法设计相应的测试用例，包括尽量多的无效等价类。</p>
<p>答:</p>
<p>有效等价类如下：</p>
<blockquote>
<p>(1)邮箱输入学符串格式<u>***@uestc.edu.cn</u>或<u>***@UESTC.EDU.CN</u>(*为字母或数字)</p>
</blockquote>
<p>无效等价类:</p>
<blockquote>
<p>(2)*中带有非字母或数字的其它字符</p>
<p>(3)邮箱输入的字符串中缺少‘@’字符</p>
<p>(4)邮箱输入的字符串中有两个或多个‘@’字符</p>
<p>(5)邮箱输入字符串中‘@’字符后不是标准的域名字段</p>
</blockquote>
<p>测试用例：</p>
<table>
<thead>
<tr>
<th align="left">测试用例编号</th>
<th>测试用例</th>
<th>覆盖等价类</th>
</tr>
</thead>
<tbody><tr>
<td align="left">1</td>
<td><a href="mailto:&#101;&#120;&#x61;&#109;&#x70;&#108;&#101;&#x40;&#x75;&#101;&#x73;&#116;&#x63;&#46;&#x65;&#100;&#117;&#x2e;&#99;&#x6e;">&#101;&#120;&#x61;&#109;&#x70;&#108;&#101;&#x40;&#x75;&#101;&#x73;&#116;&#x63;&#46;&#x65;&#100;&#117;&#x2e;&#99;&#x6e;</a></td>
<td>(1)</td>
</tr>
<tr>
<td align="left">2</td>
<td>#<a href="mailto:&#x65;&#120;&#x61;&#x6d;&#112;&#108;&#101;&#x40;&#x75;&#101;&#115;&#x74;&#x63;&#46;&#x65;&#100;&#117;&#46;&#99;&#110;">&#x65;&#120;&#x61;&#x6d;&#112;&#108;&#101;&#x40;&#x75;&#101;&#115;&#x74;&#x63;&#46;&#x65;&#100;&#117;&#46;&#99;&#110;</a></td>
<td>(2)</td>
</tr>
<tr>
<td align="left">3</td>
<td>exampleuestc.edu.cn</td>
<td>(3)</td>
</tr>
<tr>
<td align="left">4</td>
<td>example@@uestc.edu.cn</td>
<td>(4)</td>
</tr>
<tr>
<td align="left">5</td>
<td>example@domaincom</td>
<td>(5)</td>
</tr>
</tbody></table>
<h3 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h3><p>综合运用边界值方法和等价类方法，针对三角形问题设计相应的测试用例。假定输入三个整数（a、b、c）作为边，分别满足一般三角形、等腰三角形和等边三角形。</p>
<p>1）判断一般三角形的有效等价类是什么? 判断一般三角形的无效等价类是什么?</p>
<p>2）判断等腰三角形的有效等价类是什么? 判断等腰三角形的无效等价类是什么?</p>
<p>3）判断等边三角形的有效等价类是什么? 判断等边三角形的无效等价类是什么?</p>
<p>答：</p>
<p>三角形判断条件如下：</p>
<blockquote>
<p>1)三角形的边长均大于0</p>
<p>2)构成一般三角形的条件：任意两边之和大于第三边</p>
<p>3)构成等腰三角形的条件：任意两边相等</p>
<p>4)构成等腰三角形的条件：三条边都相等</p>
</blockquote>
<p>(1)判断一般三角形的有效等价类与边界值规则设计：</p>
<blockquote>
<p>(a≥0)∧(b≥0)∧(c≥0)∧((a+b)&gt;c)∧((a+c)&gt;b)∧((b+c)&gt;a)</p>
</blockquote>
<p>判断一般三角形的无效等价类与边界值规则设计：</p>
<blockquote>
<p>①(a≥0)∧(b≥0)∧(c≥0)∧(((a+b)≤c)∨((a+c)≤b)∨((b+c)≤a))</p>
<p>②(a≤0)∨(b≤0)∨(c≤0)</p>
</blockquote>
<p>(2)判断等腰三角形的有效等价类与边界值规则设计：</p>
<blockquote>
<p>(a≥0)∧(b≥0)∧(c≥0)∧((a+b)&gt;c)∧((a+c)&gt;b)∧((b+c)&gt;a)∧((a&#x3D;b)∨(b&#x3D;c)∨(a&#x3D;c))</p>
</blockquote>
<p>判断等腰三角形的无效等价类与边界值规则设计：</p>
<blockquote>
<p>①(a!&#x3D;b)∧(b!&#x3D;c)∧(c!&#x3D;a) </p>
<p>②(a≤0)∨(b≤0)∨(c≤0)</p>
</blockquote>
<p>(3)判断等边三角形的有效等价类与边界值规则设计：</p>
<blockquote>
<p>(a≥0)∧(b≥0)∧(c≥0)∧((a+b)&gt;c)∧((a+c)&gt;b)∧((b+c)&gt;a)∧(a&#x3D;b&#x3D;c)</p>
</blockquote>
<p>判断等边三角形的无效等价类与边界值规则设计：</p>
<blockquote>
<p>①(a!&#x3D;b)</p>
<p>②(a≤0)∨(b≤0)∨(c≤0)</p>
</blockquote>
<p>测试用例</p>
<table>
<thead>
<tr>
<th>测试用例编号</th>
<th>测试用例输入(a,b,c)</th>
<th>预期结果</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>(5,6,8)</td>
<td>一般三角形</td>
</tr>
<tr>
<td>2</td>
<td>(5,6,5)</td>
<td>等腰三角形</td>
</tr>
<tr>
<td>3</td>
<td>(5,5,5)</td>
<td>等边三角形</td>
</tr>
<tr>
<td>4</td>
<td>(5,0,5)</td>
<td>非三角形</td>
</tr>
<tr>
<td>5</td>
<td>(2,2,5)</td>
<td>非三角形</td>
</tr>
</tbody></table>
<h3 id="第三题"><a href="#第三题" class="headerlink" title="第三题"></a>第三题</h3><p>系统的年、月、日数据由Y、M、D单元来存储相应值，若要测试NextData（Y,M,D）函数，采用判定表方法设计相应的测试用例。</p>
<p>答：</p>
<p>被测函数功能：该程序输出为输入日期的下一个日期。</p>
<p>例如：输入为2023年4月2日，函数输出为2023年4月3日。</p>
<p>函数输入变量Y，M，D，均为正整数，并满足如下条件：</p>
<p>1）1900≤Y≤2100</p>
<p>2）1≤M≤12</p>
<p>3）1≤D≤31</p>
<p>4）能被 400 整除，或者能被4整除但不能 100 整除的部是闰年(366 天)，其余的年份均为平年(365 天)</p>
<table>
<thead>
<tr>
<th>输入参数</th>
<th>有效等价类</th>
<th>无效等价类</th>
</tr>
</thead>
<tbody><tr>
<td>Y</td>
<td>1900≤Y≤2100，Y1闰年，Y2平年</td>
<td>＜1900，＞2100，非正整数，其他符号</td>
</tr>
<tr>
<td>M</td>
<td>1≤M≤12，M1{1,3,5,7,8,10}，M2{4,6,9,11}，M3{2}，M4{12}</td>
<td>&lt;1，&gt;12，非正整数，其他符号</td>
</tr>
<tr>
<td>D</td>
<td>1≤D≤31，D1{1,27}，D2{28}，D3{29}，D4{30}，D5{31}</td>
<td>&lt;1，&gt;31，D6，非正整数，其他符号</td>
</tr>
</tbody></table>
<p><em><strong>判定表设计：</strong></em></p>
<p>结果：</p>
<p>1、year,month不变,day+1</p>
<p>2、year不变,month+1,day&#x3D;1</p>
<p>3、year+1,month&#x3D;1,day&#x3D;1</p>
<p>4、错误的输入</p>
<table>
<thead>
<tr>
<th>用例</th>
<th>1</th>
<th>2</th>
<th>3</th>
<th>4</th>
<th>5</th>
<th>6</th>
<th>7</th>
<th>8</th>
<th>9</th>
<th>10</th>
<th>11</th>
<th>12</th>
</tr>
</thead>
<tbody><tr>
<td>Y</td>
<td>Y1</td>
<td>Y1</td>
<td>Y1</td>
<td>Y1</td>
<td>Y1</td>
<td>Y1</td>
<td>Y1</td>
<td>Y1</td>
<td>Y1</td>
<td>Y1</td>
<td>Y1</td>
<td>Y1</td>
</tr>
<tr>
<td>M</td>
<td>M3</td>
<td>M3</td>
<td>M3</td>
<td>M1</td>
<td>M1</td>
<td>M1</td>
<td>M2</td>
<td>M2</td>
<td>M2</td>
<td>M4</td>
<td>M4</td>
<td>M4</td>
</tr>
<tr>
<td>D</td>
<td>D3</td>
<td>D2,D1</td>
<td>D4,D5</td>
<td>D5</td>
<td>D1,D2,D3,D4</td>
<td>D6</td>
<td>D4</td>
<td>D5,D6</td>
<td>D1,D2,D3</td>
<td>D5</td>
<td>D1,D2,D3,D4</td>
<td>D6</td>
</tr>
<tr>
<td>1</td>
<td></td>
<td>√</td>
<td></td>
<td></td>
<td>√</td>
<td></td>
<td></td>
<td></td>
<td>√</td>
<td></td>
<td>√</td>
<td></td>
</tr>
<tr>
<td>2</td>
<td>√</td>
<td></td>
<td></td>
<td>√</td>
<td></td>
<td></td>
<td>√</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>3</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>√</td>
<td></td>
<td></td>
</tr>
<tr>
<td>4</td>
<td></td>
<td></td>
<td>√</td>
<td></td>
<td></td>
<td>√</td>
<td></td>
<td>√</td>
<td></td>
<td></td>
<td></td>
<td>√</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>用例</th>
<th>13</th>
<th>14</th>
<th>15</th>
<th>16</th>
<th>17</th>
<th>18</th>
<th>19</th>
<th>20</th>
<th>21</th>
<th>22</th>
<th>23</th>
<th>24</th>
</tr>
</thead>
<tbody><tr>
<td>Y</td>
<td>Y2</td>
<td>Y2</td>
<td>Y2</td>
<td>Y2</td>
<td>Y2</td>
<td>Y2</td>
<td>Y2</td>
<td>Y2</td>
<td>Y2</td>
<td>Y2</td>
<td>Y2</td>
<td>Y2</td>
</tr>
<tr>
<td>M</td>
<td>M3</td>
<td>M3</td>
<td>M3</td>
<td>M1</td>
<td>M1</td>
<td>M1</td>
<td>M2</td>
<td>M2</td>
<td>M2</td>
<td>M4</td>
<td>M4</td>
<td>M4</td>
</tr>
<tr>
<td>D</td>
<td>D2</td>
<td>D1</td>
<td>D3,D4,D5</td>
<td>D5</td>
<td>D1,D2,D3,D4</td>
<td>D6</td>
<td>D4</td>
<td>D5,D6</td>
<td>D1,D2,D3</td>
<td>D5</td>
<td>D5</td>
<td>D6</td>
</tr>
<tr>
<td>1</td>
<td></td>
<td>√</td>
<td></td>
<td></td>
<td>√</td>
<td></td>
<td></td>
<td></td>
<td>√</td>
<td></td>
<td>√</td>
<td></td>
</tr>
<tr>
<td>2</td>
<td>√</td>
<td></td>
<td></td>
<td>√</td>
<td></td>
<td></td>
<td>√</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>3</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>√</td>
<td></td>
<td></td>
</tr>
<tr>
<td>4</td>
<td></td>
<td></td>
<td>√</td>
<td></td>
<td></td>
<td>√</td>
<td></td>
<td>√</td>
<td></td>
<td></td>
<td></td>
<td>√</td>
</tr>
</tbody></table>
<p>测试用例如下：</p>
<table>
<thead>
<tr>
<th>用例序号</th>
<th>Y</th>
<th>M</th>
<th>D</th>
<th>预期输出</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>2023</td>
<td>4</td>
<td>1</td>
<td>2023,4,2</td>
</tr>
<tr>
<td>2</td>
<td>2023</td>
<td>3</td>
<td>28</td>
<td>2023,3,29</td>
</tr>
<tr>
<td>3</td>
<td>2023</td>
<td>3</td>
<td>29</td>
<td>2023,3,30</td>
</tr>
<tr>
<td>4</td>
<td>2023</td>
<td>3</td>
<td>30</td>
<td>2023,3,31</td>
</tr>
<tr>
<td>5</td>
<td>2023</td>
<td>3</td>
<td>31</td>
<td>2023,4,1</td>
</tr>
<tr>
<td>6</td>
<td>2023</td>
<td>11</td>
<td>28</td>
<td>2023,11,29</td>
</tr>
<tr>
<td>7</td>
<td>2023</td>
<td>11</td>
<td>29</td>
<td>2023,11,30</td>
</tr>
<tr>
<td>8</td>
<td>2023</td>
<td>11</td>
<td>30</td>
<td>2023,12,1</td>
</tr>
<tr>
<td>9</td>
<td>2023</td>
<td>11</td>
<td>31</td>
<td>错误</td>
</tr>
<tr>
<td>10</td>
<td>2023</td>
<td>2</td>
<td>28</td>
<td>2023,3,1</td>
</tr>
<tr>
<td>11</td>
<td>2023</td>
<td>2</td>
<td>29</td>
<td>错误</td>
</tr>
<tr>
<td>12</td>
<td>2023</td>
<td>2</td>
<td>30</td>
<td>错误</td>
</tr>
<tr>
<td>13</td>
<td>2023</td>
<td>2</td>
<td>31</td>
<td>错误</td>
</tr>
<tr>
<td>14</td>
<td>2020</td>
<td>2</td>
<td>28</td>
<td>2020,2,29</td>
</tr>
<tr>
<td>15</td>
<td>2020</td>
<td>2</td>
<td>29</td>
<td>2020,3,1</td>
</tr>
<tr>
<td>16</td>
<td>2020</td>
<td>2</td>
<td>30</td>
<td>错误</td>
</tr>
<tr>
<td>17</td>
<td>2020</td>
<td>2</td>
<td>31</td>
<td>错误</td>
</tr>
<tr>
<td>18</td>
<td>2020</td>
<td>12</td>
<td>28</td>
<td>2020,12,29</td>
</tr>
<tr>
<td>19</td>
<td>2020</td>
<td>12</td>
<td>29</td>
<td>2020,12,30</td>
</tr>
<tr>
<td>20</td>
<td>2020</td>
<td>12</td>
<td>30</td>
<td>2020,12,31</td>
</tr>
<tr>
<td>21</td>
<td>2020</td>
<td>12</td>
<td>31</td>
<td>2021,1,1</td>
</tr>
</tbody></table>
<hr>
<p>个人觉得以上判定表的设计比较复杂🥺，一般很难想到这么详细，我认为下面的判定表比较容易想到🤡</p>
<table>
<thead>
<tr>
<th></th>
<th>序号</th>
<th>1</th>
<th>2</th>
<th>3</th>
<th>4</th>
<th>5</th>
<th>6</th>
<th>7</th>
<th>8</th>
</tr>
</thead>
<tbody><tr>
<td>条件</td>
<td>正确输入年Y</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
<td>N</td>
<td>N</td>
<td>N</td>
<td>N</td>
</tr>
<tr>
<td>条件</td>
<td>正确输入月M</td>
<td>Y</td>
<td>Y</td>
<td>N</td>
<td>N</td>
<td>Y</td>
<td>Y</td>
<td>N</td>
<td>N</td>
</tr>
<tr>
<td>条件</td>
<td>正确输入日D</td>
<td>Y</td>
<td>N</td>
<td>Y</td>
<td>N</td>
<td>Y</td>
<td>N</td>
<td>Y</td>
<td>N</td>
</tr>
<tr>
<td>动作</td>
<td>函数运行成功</td>
<td>√</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>动作</td>
<td>函数运行失败</td>
<td></td>
<td>√</td>
<td>√</td>
<td>√</td>
<td>√</td>
<td>√</td>
<td>√</td>
<td>√</td>
</tr>
</tbody></table>
<p>测试用例表的话可以模仿参考答案书写✍</p>
<h3 id="第四题"><a href="#第四题" class="headerlink" title="第四题"></a>第四题</h3><p>针对某机构人员管理的业务规则需求：</p>
<p>1）年薪制员工：严重过失，扣年终风险金的4%；过失，扣年终风险金的2%。</p>
<p>2）非年薪制员工：严重过失，扣当月薪资的8%；过失，扣当月薪资的4%。</p>
<p>请绘制出因果图和判定表，并给出相应的测试用例。</p>
<p>答：</p>
<ul>
<li><p>因果分析</p>
<p>原因：</p>
<blockquote>
<p>C1：年薪制员工</p>
<p>C3：严重过失</p>
<p>C3：过失</p>
</blockquote>
<p>结果：</p>
<blockquote>
<p>e1：扣年终风险金的4%</p>
<p>e2：扣年终风险金的2%</p>
<p>e3：扣月薪资的8%</p>
<p>e4：扣月薪资的4%</p>
</blockquote>
</li>
<li><p>因果图设计</p>
<p><img src="https://s2.loli.net/2023/05/31/7xV4hjUMqRTa3ky.png" alt="3HA4ZSM3_6U1BEFKKP_2H5U.png"></p>
</li>
<li><p>判定表设计</p>
<table>
<thead>
<tr>
<th></th>
<th>序号</th>
<th>1</th>
<th>2</th>
<th>3</th>
<th>4</th>
<th>5</th>
<th>6</th>
<th>7</th>
<th>8</th>
</tr>
</thead>
<tbody><tr>
<td>条件</td>
<td>C1：年薪制员工</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>条件</td>
<td>C3：严重过失</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>条件</td>
<td>C3：过失</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
</tr>
<tr>
<td>结果</td>
<td>e1：扣年终风险金的4%</td>
<td></td>
<td>√</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>结果</td>
<td>e2：扣年终风险金的2%</td>
<td></td>
<td></td>
<td>√</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>结果</td>
<td>e3：扣月薪资的8%</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>√</td>
<td></td>
<td></td>
</tr>
<tr>
<td>结果</td>
<td>e4：扣月薪资的4%</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>√</td>
<td></td>
</tr>
<tr>
<td>结果</td>
<td>不操作</td>
<td></td>
<td></td>
<td></td>
<td>√</td>
<td></td>
<td></td>
<td></td>
<td>√</td>
</tr>
<tr>
<td>结果</td>
<td>不可能</td>
<td>√</td>
<td></td>
<td></td>
<td></td>
<td>√</td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
</li>
<li><p>有效等价类测试用例</p>
<table>
<thead>
<tr>
<th>用例</th>
<th>输入数据</th>
<th>预期输出</th>
</tr>
</thead>
<tbody><tr>
<td>TC1</td>
<td>年薪制员工，严重过失</td>
<td>扣年终风险金的4%</td>
</tr>
<tr>
<td>TC2</td>
<td>年薪制员工，过失</td>
<td>扣年终风险金的2%</td>
</tr>
<tr>
<td>TC3</td>
<td>非年薪制员工，严重过失</td>
<td>扣月薪资的8%</td>
</tr>
<tr>
<td>TC4</td>
<td>非年薪制员工，过失</td>
<td>扣月薪资的4%</td>
</tr>
</tbody></table>
</li>
</ul>
<h3 id="第五题"><a href="#第五题" class="headerlink" title="第五题"></a>第五题</h3><p>测试一个登录页面在不同浏览器和语言下的功能正确性，其输入条件如下:</p>
<p>1）输入项（账号、密码）</p>
<p>2）浏览器（IE、chrome、FireFox、360）</p>
<p>3）语言（中文、英文）</p>
<p>请问进行完整组合的兼容性测试需要多少个测试用例？采用成对组合的兼容性测试需要多少个测试用例？给出成对组合测试用例表。</p>
<p>答：</p>
<p>完整组合测试有2x2X4x2&#x3D;32 个，成对组合测试需要8个测试用例</p>
<p>成对组合测试用例表</p>
<table>
<thead>
<tr>
<th>用例</th>
<th>账号</th>
<th>密码</th>
<th>浏览器</th>
<th>语言</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>空值</td>
<td>空值</td>
<td>IE</td>
<td>中文</td>
</tr>
<tr>
<td>2</td>
<td>空值</td>
<td>有值</td>
<td>chrome</td>
<td>英文</td>
</tr>
<tr>
<td>3</td>
<td>有值</td>
<td>空值</td>
<td>FireFox</td>
<td>中文</td>
</tr>
<tr>
<td>4</td>
<td>有值</td>
<td>有值</td>
<td>360</td>
<td>英文</td>
</tr>
<tr>
<td>5</td>
<td>空值</td>
<td>空值</td>
<td>360</td>
<td>中文</td>
</tr>
<tr>
<td>6</td>
<td>空值</td>
<td>有值</td>
<td>FireFox</td>
<td>英文</td>
</tr>
<tr>
<td>7</td>
<td>有值</td>
<td>空值</td>
<td>chrome</td>
<td>中文</td>
</tr>
<tr>
<td>8</td>
<td>有值</td>
<td>有值</td>
<td>IE</td>
<td>英文</td>
</tr>
</tbody></table>
<p><em><strong>以上内容来自老师提供的原版答案，如有错误，欢迎批评指正</strong></em>😆</p>
]]></content>
      <categories>
        <category>大二下期末复习</category>
      </categories>
      <tags>
        <tag>软件测试</tag>
      </tags>
  </entry>
  <entry>
    <title>go的基本介绍</title>
    <url>/2023/06/01/Go/2/</url>
    <content><![CDATA[<h2 id="Go的特点"><a href="#Go的特点" class="headerlink" title="Go的特点"></a>Go的特点</h2><ul>
<li>高性能，该并发</li>
<li>部署简单，学习简单</li>
<li>丰富的标准库</li>
<li>完善的工具链</li>
<li>静态链接</li>
<li>快速编译</li>
<li>跨平台</li>
<li>垃圾回收</li>
</ul>
<h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  fmt.Println(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Go是一门编译型语言，Go语言的工具链将源代码及其依赖转换成计算机的机器指令（静态编译）。Go语言提供的工具都通过一个单独的命令<code>go</code>调用，<code>go</code>命令有一系列子命令。最简单的一个子命令就是run。这个命令编译一个或多个以.go结尾的源文件，链接库文件，并运行最终生成的可执行文件。要想运行上述程序，命令行进入其目录，执行命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">go run helloworld.go</span></span><br></pre></td></tr></table></figure>

<p>Go语言原生支持Unicode，它可以处理全世界任何语言的文本。</p>
<p>如果不只是一次性实验，并且希望能够编译这个程序，保存编译结果以备将来之用。可以用build子命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">go build helloworld.go</span></span><br></pre></td></tr></table></figure>

<p>这个命令生成一个名为<code>helloworld</code>的<em><strong>可执行的二进制文件（Windows系统下生成的可执行文件是helloworld.exe），之后可以随时运行它</strong></em>（在Windows系统下在命令行直接输入helloworld.exe命令运行），不需任何处理（因为静态编译，所以不用担心在系统库更新的时候冲突，<em><strong>python也有相关的库<code>pyinstaller</code>将程序转为可执行文件</strong></em>）。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./helloworld</span></span><br><span class="line">hello world </span><br></pre></td></tr></table></figure>

<h2 id="Go的简介-挺有意思的，建议看看"><a href="#Go的简介-挺有意思的，建议看看" class="headerlink" title="Go的简介(挺有意思的，建议看看)"></a>Go的简介(挺有意思的，建议看看)</h2><p>​		Go语言的代码通过<em><strong>包</strong></em>（package）组织，包类似于其它语言里的库（libraries）或者模块（modules）。一个包由位于单个目录下的一个或多个.go源代码文件组成，目录定义包的作用。每个源文件都以一条<code>package</code>声明语句开始，上述例子里就是<code>package main</code>，表示该文件属于哪个包，紧跟着一系列导入（import）的包，之后是存储在这个文件里的程序语句。</p>
<p>​		Go的标准库提供了100多个包，以支持常见功能，如输入、输出、排序以及文本处理。比如<code>fmt</code>包，就含有格式化输出、接收输入的函数。<code>Println</code>是其中一个基础函数，可以打印以空格间隔的一个或多个值，并在最后添加一个换行符，从而输出一整行。</p>
<p>​		<strong><code>	main</code>包比较特殊。它定义了一个独立可执行的程序，而不是一个库。在<code>main</code>里的<code>main</code> <em>函数</em> 也很特殊，它是整个程序执行时的入口（C系语言类似）</strong>。<code>main</code>函数所做的事情就是程序做的。当然了，<code>main</code>函数一般调用其它包里的函数完成很多工作（例如：<code>fmt.Println</code>）。</p>
<ul>
<li><p>必须告诉编译器源文件需要哪些包，这就是跟随在<code>package</code>声明后面的<code>import</code>声明扮演的角色。hello world例子只用到了一个包，大多数程序需要导入多个包。</p>
</li>
<li><p>必须恰当导入需要的包，缺少了必要的包或者导入了不需要的包，程序都无法编译通过。<em><strong>这项严格要求避免了程序开发过程中引入未使用的包</strong></em>（<em><strong>Go语言编译过程没有警告信息</strong></em>）。</p>
<p>  <code>import</code>声明必须跟在文件的<code>package</code>声明之后。随后，则是组成程序的函数、变量、常量、类型的声明语句（分别由关键字<code>func</code>、<code>var</code>、<code>const</code>、<code>type</code>定义）。这些内容的声明顺序并不重要（最好按照规范要求自己）。上述例子的程序已经尽可能短了，只声明了一个函数，其中只调用了一个其他函数。为了节省篇幅，有些时候示例程序会省略<code>package</code>和<code>import</code>声明，但是，这些声明在源代码里有，并且必须得有才能编译。</p>
<p>  一个函数的声明由<code>func</code>关键字、函数名、参数列表、返回值列表（上述例子里的<code>main</code>函数参数列表和返回值都是空的）以及包含在大括号里的函数体组成。</p>
<p>  Go语言<em><strong>不需要在语句或者声明的末尾添加分号</strong></em>，除非一行上有多条语句。实际上，编译器<em><strong>会主动把特定符号后的换行符转换为分号</strong></em>，因此<em><strong>换行符添加的位置会影响Go代码的正确解析</strong></em>（比如行末是标识符、整数、浮点数、虚数、字符或字符串文字、关键字<code>break</code>、<code>continue</code>、<code>fallthrough</code>或<code>return</code>中的一个、运算符和分隔符<code>++</code>、<code>--</code>、<code>)</code>、<code>]</code>或<code>&#125;</code>中的一个）。举个例子，函数的左括号<code>&#123;</code>必须和<code>func</code>函数声明在同一行上，且位于末尾，不能独占一行，而在表达式<code>x + y</code>中，可在<code>+</code>后换行，不能在<code>+</code>前换行（以+结尾的话不会被插入分号分隔符，但是以x结尾的话则会被分号分隔符，从而导致编译错误）</p>
</li>
</ul>
<h2 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h2><h3 id="go-clean"><a href="#go-clean" class="headerlink" title="go clean"></a><strong>go clean</strong></h3><p>go clean 命令是用来移除当前源码包里面编译生成的文件，这些文件包括</p>
<ul>
<li>_obj&#x2F; 旧的object目录，由Makefiles遗留</li>
<li>_test&#x2F; 旧的test目录，由Makefiles遗留</li>
<li>_testmain.go 旧的gotest文件，由Makefiles遗留</li>
<li>test.out 旧的test记录，由Makefiles遗留</li>
<li>build.out 旧的test记录，由Makefiles遗留</li>
<li>*.[568ao] object文件，由Makefiles遗留</li>
<li>DIR(.exe) 由 go build 产生</li>
<li>DIR.test(.exe) 由 go test -c 产生</li>
<li>MAINFILE(.exe) 由 go build MAINFILE.go产生</li>
</ul>
<h3 id="go-test"><a href="#go-test" class="headerlink" title="go test"></a><strong>go test</strong></h3><p>go test 命令，会自动读取源码目录下面名为*_test.go的文件，生成并运行测试用的可执行文件。默认的情况下，不需要任何的参数，它会自动把你源码包下面所有test文件测试完毕，当然你也可以带上参数，详情请参考go help testflag</p>
<h3 id="go-doc"><a href="#go-doc" class="headerlink" title="go doc"></a><strong>go doc</strong></h3><p>go doc 命令其实就是一个很强大的文档工具。</p>
<p>如何查看相应package的文档呢？ 例如builtin包，那么执行go doc builtin；如果是http包，那么执行go doc net&#x2F;http；查看某一个包里面的函数，那么执行go doc fmt Printf；也可以查看相应的代码，执行go doc -src fmt Printf；</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看net/http包</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">go doc net/http</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看time包</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">go doc time</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看某个包里的指定函数</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">go doc <span class="built_in">fmt</span> Printf</span></span><br></pre></td></tr></table></figure>

<p>通过命令在命令行执行 go doc -http&#x3D;:端口号，比如godoc -http&#x3D;:8080。然后在浏览器中打开127.0.0.1:8080，你将会看到一个golang.org的本地copy版本，通过它你可以查询pkg文档等其它内容。如果你设置了GOPATH，在pkg分类下，不但会列出标准包的文档，还会列出你本地GOPATH中所有项目的相关文档，这对于经常被限制访问的用户来说是一个不错的选择。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">godoc -http=:9527</span></span><br></pre></td></tr></table></figure>

<hr>
<p>go fix 用来修复以前老版本的代码到新版本，例如go1之前老版本的代码转化到go1</p>
<p>go version 查看go当前的版本</p>
<p>go env 查看当前go的环境变量</p>
<p>go list 列出当前全部安装的package</p>
<h2 id="gofmt和goimports的配置"><a href="#gofmt和goimports的配置" class="headerlink" title="gofmt和goimports的配置"></a><code>gofmt</code>和<code>goimports</code>的配置</h2><p>​		<em><strong>Go语言在代码格式上采取了很强硬的态度</strong></em>。<code>gofmt</code>工具把代码格式化为标准格式（这个格式化工具没有任何可以调整代码格式的参数，Go语言就是这么任性），并且<code>go</code>工具中的<code>fmt</code>子命令会对指定包，否则默认为当前目录中所有.go源文件应用<code>gofmt</code>命令。我们应该养成格式化自己的代码的习惯。以法令方式规定标准的代码格式可以避免无尽的无意义的琐碎争执导致了Go语言的<a href="https://baike.baidu.com/item/Tiobe/2830870?fr=aladdin"><code>TIOBE</code></a>排名较低，争议的话题较少。更重要的是，这样可以做多种自动源码转换，如果放任Go语言代码格式，这些转换就不大可能了。</p>
<p>很多文本编辑器都可以配置为保存文件时自动执行<code>gofmt</code>，这样源代码总会被恰当地格式化，<code>gofmt</code>包含在标准的分发包中。还有个相关的工具，<code>goimports</code>，可以根据代码需要，自动地添加或删除<code>import</code>声明。这个工具并没有包含在标准的分发包中，可以用下面的命令在在<code>goland</code>中在任意一个项目的终端执行：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">$ <span class="keyword">go</span> get -v golang.org/x/tools/cmd/goimports</span><br></pre></td></tr></table></figure>


<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/df0d744ab4bc4f0f9204e4f4d0eb0a90~tplv-k3u1fbpfcp-watermark.image" alt="image-20230513220732135.png"></p>
<p>进入<code>GOPATH</code>(Go语言安装目录)，执行以下命令安装<code>goimports</code>,没有加版本号会报错</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">go</span> install golang.org/x/tools/cmd/goimports@latest</span><br></pre></td></tr></table></figure>

<p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cdc5eae7c83743338f84058f08c881ca~tplv-k3u1fbpfcp-watermark.image" alt="image-20230513221248033.png"></p>
<p>至此，我们可以在 <code>GOPATH/bin </code>目录下看到 <code>goimports.exe</code></p>
<p>然后在<code>goland</code>的设置中点击工具&gt;File Watcher</p>
<p>添加<code>gofmt</code>和<code>goimports</code></p>
<p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2632d630f887491b9370e03f4b43b1ba~tplv-k3u1fbpfcp-watermark.image" alt="image-20230513221553805.png"></p>
<p><code>goimports.exe</code>在<code>GOPATH/bin </code>目录下,其实<code>goland</code>能够自动找到它</p>
<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cc409d417dc34f17a299b7e35691e9d6~tplv-k3u1fbpfcp-watermark.image" alt="image-20230513221658244.png"></p>
<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6c31c5998d814a3f9e30de7b2b7c91af~tplv-k3u1fbpfcp-watermark.image" alt="image-20230513221724453.png"></p>
<p>点击确定，<code>gofmt</code>和<code>goimports</code>配置成功</p>
<p>原文链接：<a href="https://juejin.cn/post/7232689996821495865">Go的基本介绍（附gofmt和goimports配置）|青训营笔记 - 掘金 (juejin.cn)</a></p>
]]></content>
      <categories>
        <category>青训营</category>
      </categories>
      <tags>
        <tag>大二自学</tag>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>电大软件测试～第二次作业</title>
    <url>/2023/05/31/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/test2/</url>
    <content><![CDATA[<h2 id="第二次作业及参考答案"><a href="#第二次作业及参考答案" class="headerlink" title="第二次作业及参考答案"></a>第二次作业及参考答案</h2><h3 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h3><p> 在一个客户信息查询界面中，输入条件有“姓名”、“身份证号”、“手机”，采用正交表方式设计该界面查询功能的测试用例。</p>
<p>答：</p>
<p>针对本测试有3个输入条件，每个输入有2种取值情况，可以选择L₄(2³)正交表，其正交表值如下表所示：</p>
<table>
<thead>
<tr>
<th>实验数\列号</th>
<th>姓名</th>
<th>身份证号</th>
<th>手机</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>2</td>
<td>1</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>3</td>
<td>0</td>
<td>1</td>
<td>0</td>
</tr>
<tr>
<td>4</td>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
</tbody></table>
<p>测试用例：</p>
<table>
<thead>
<tr>
<th>测试用例&#x2F;查询条件</th>
<th>姓名</th>
<th>身份证号</th>
<th>手机</th>
</tr>
</thead>
<tbody><tr>
<td>测试用例1</td>
<td>填写</td>
<td>填写</td>
<td>填写</td>
</tr>
<tr>
<td>测试用例2</td>
<td>填写</td>
<td>空</td>
<td>空</td>
</tr>
<tr>
<td>测试用例3</td>
<td>空</td>
<td>填写</td>
<td>空</td>
</tr>
<tr>
<td>测试用例4</td>
<td>空</td>
<td>空</td>
<td>填写</td>
</tr>
</tbody></table>
<h3 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h3><p>根据如下图所示的程序流程图，分别使用语句覆盖测试、判定覆盖测试、条件覆盖测试和路径覆盖测试进行测试用例设计。</p>
<p><img src="https://s2.loli.net/2023/05/31/YaGS6fzEgLuwdKp.png" alt="VD_MD_EUXLQ_O~DDYPO_G_R.png"></p>
<p>答：</p>
<p><em><strong>1）语句覆盖</strong></em></p>
<p>设计测试用例，使得被测试程序中的每条可执行语句至少被执行一次。其测试用例表如下所示。</p>
<table>
<thead>
<tr>
<th>用例序号</th>
<th>输入数据</th>
<th>预期输出</th>
<th>覆盖语句</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>(X,Y)&#x3D;(1,11)</td>
<td>(X,Y)&#x3D;(1,11)</td>
<td>X&gt;0 AND Y&gt;10;Y&#x3D;Y&#x2F;X;X&lt;-10 OR Y&lt;0</td>
</tr>
<tr>
<td>2</td>
<td>(X,Y)&#x3D;(0,-1)</td>
<td>(X,Y)&#x3D;(0,1)</td>
<td>X&gt;0 AND Y&gt;10;X&lt;-10 OR Y&lt;0;Y&#x3D;-(Y+X)</td>
</tr>
</tbody></table>
<p><em><strong>2）判定覆盖</strong></em></p>
<p>设计测试用例,使得被测试程序中的每个判断的”真”、”假”分支至少被执行一次。设X&gt;0 AND Y&gt;10为判定条件M，X&lt;-10 OR Y&lt;0为判定条件N。<br>设计的判定覆盖测试用例如下表所示。</p>
<table>
<thead>
<tr>
<th>用例序号</th>
<th>输入数据</th>
<th>预期输出</th>
<th>覆盖判定条件</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>(X,Y)&#x3D;(1,11)</td>
<td>(X,Y)&#x3D;(1,11)</td>
<td>M为真，N为假</td>
</tr>
<tr>
<td>2</td>
<td>(X,Y)&#x3D;(0,-1)</td>
<td>(X,Y)&#x3D;(0,1)</td>
<td>M为假，N为真</td>
</tr>
</tbody></table>
<p><em><strong>3）条件覆盖</strong></em></p>
<p>设计测试用例,使得被测试程序中分支判断语句中每个条件的可能值至少被满足一次。<br>设</p>
<blockquote>
<p>条件X&gt;0:<br>取真时为T1，取假时为F1<br>条件Y&gt;10:<br>取真时为T2，取假时为F2<br>条件x&lt;-10:<br>取真时为T3，取假时为F3<br>条件Y&lt;0:<br>取真时为T4,取假时为 F4</p>
</blockquote>
<p>设计的条件覆盖测试用例如下表所示。</p>
<table>
<thead>
<tr>
<th>用例序号</th>
<th>输入数据</th>
<th>预期输出</th>
<th>覆盖条件</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>(X,Y)&#x3D;(1,-1)</td>
<td>(X,Y)&#x3D;(1,0)</td>
<td>T1，F2，F3，T4</td>
</tr>
<tr>
<td>2</td>
<td>(X,Y)&#x3D;(-11,11)</td>
<td>(X,Y)&#x3D;(-11,0)</td>
<td>F1，T2，T3，F4</td>
</tr>
</tbody></table>
<p><em><strong>4）基本路径覆盖</strong></em></p>
<p>设计测试用例,使得被测试程序中的基本路径至少被覆盖一次。依据该程序控制流图计算环路复杂度&#x3D;3（判断节点数目+1）,因此,该程序的基本路径有3条。</p>
<p>设计的基本路径覆盖测试用例如下表所示</p>
<table>
<thead>
<tr>
<th>用例序号</th>
<th>输入数据</th>
<th>预期输出</th>
<th>覆盖路径</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>(X,Y)&#x3D;(0,0)</td>
<td>(X,Y)&#x3D;(0,0)</td>
<td>ace</td>
</tr>
<tr>
<td>2</td>
<td>(X,Y)&#x3D;(1,11)</td>
<td>(X,Y)&#x3D;(1,11)</td>
<td>abce</td>
</tr>
<tr>
<td>3</td>
<td>(X,Y)&#x3D;(-11,1)</td>
<td>(X,Y)&#x3D;(-11,10)</td>
<td>acde</td>
</tr>
<tr>
<td>4</td>
<td>不存在</td>
<td>不存在</td>
<td>abcde</td>
</tr>
</tbody></table>
<h3 id="第三题"><a href="#第三题" class="headerlink" title="第三题"></a>第三题</h3><p>针对如下样本程序，分析该程序逻辑覆盖测试方法中的语句覆盖、判定覆盖、条件覆盖和基本路径覆盖，并说明哪种方法覆盖率高？为什么？</p>
<p>被测样本程序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Coverage</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;start main function:path a...&quot;</span>);</span><br><span class="line">  <span class="type">int</span> A=<span class="number">0</span>,B=<span class="number">0</span>,X=<span class="number">0</span>;</span><br><span class="line">  <span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">  System.out.println(<span class="string">&quot;输入A：&quot;</span>);  A = s.nextInt();</span><br><span class="line">  System.out.println(<span class="string">&quot;输入B=&quot;</span>);  B = s.nextInt();</span><br><span class="line">  System.out.println(<span class="string">&quot;输入X=&quot;</span>);  X = s.nextInt();</span><br><span class="line">  s.close();  </span><br><span class="line">  <span class="keyword">if</span> (A&gt;<span class="number">1</span> &amp;&amp; B==<span class="number">0</span>) &#123;</span><br><span class="line">	X=X/A;</span><br><span class="line">	System.out.println(<span class="string">&quot;path c&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;path b&quot;</span>);  &#125;</span><br><span class="line">  <span class="keyword">if</span> (A==<span class="number">2</span> || X&gt;<span class="number">1</span>) &#123;</span><br><span class="line">	X=X+<span class="number">1</span>;</span><br><span class="line">	System.out.println(<span class="string">&quot;path e&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;path d&quot;</span>);  &#125;</span><br><span class="line">  System.out.println(<span class="string">&quot;end main function.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​	答：</p>
<p>​	<u><em><strong>注：以下答案只参考了标准答案的一部分</strong></em></u></p>
<p><img src="https://s2.loli.net/2023/05/31/P7NxLnZ9QhsHmyW.png" alt="VF1D1EJ2__LKYS_1_GPGJ5W.png"></p>
<ol>
<li><p>语句覆盖测试</p>
<table>
<thead>
<tr>
<th>用例序号</th>
<th>输入数据</th>
<th>预期输出</th>
<th>覆盖路径</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>(A,B,X)&#x3D;(2,0,2)</td>
<td>start main function:path a…，输入A：，输入B&#x3D;，输入X&#x3D;，path c，path e，end main function.</td>
<td>ace</td>
</tr>
<tr>
<td>2</td>
<td>(A,B,X)&#x3D;(0,1,1)</td>
<td>start main function:path a…，输入A：，输入B&#x3D;，输入X&#x3D;，path b，path d，end main function.</td>
<td>abd</td>
</tr>
</tbody></table>
</li>
<li><p>判定覆盖测试</p>
<table>
<thead>
<tr>
<th>用例序号</th>
<th>输入数据</th>
<th>预期输出</th>
<th>覆盖路径</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>(A,B,X)&#x3D;(2,0,2)</td>
<td>start main function:path a…，输入A：，输入B&#x3D;，输入X&#x3D;，path c，path e，end main function.</td>
<td>ace</td>
</tr>
<tr>
<td>2</td>
<td>(A,B,X)&#x3D;(0,1,1)</td>
<td>start main function:path a…，输入A：，输入B&#x3D;，输入X&#x3D;，path b，path d，end main function.</td>
<td>abd</td>
</tr>
</tbody></table>
</li>
<li><p>条件覆盖测试</p>
<table>
<thead>
<tr>
<th>用例序号</th>
<th>输入数据</th>
<th>预期输出</th>
<th>覆盖路径</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>(A,B,X)&#x3D;(2,0,2)</td>
<td>start main function:path a…，输入A：，输入B&#x3D;，输入X&#x3D;，path c，path e，end main function.</td>
<td>ace</td>
</tr>
<tr>
<td>2</td>
<td>(A,B,X)&#x3D;(0,1,1)</td>
<td>start main function:path a…，输入A：，输入B&#x3D;，输入X&#x3D;，path b，path d，end main function.</td>
<td>abd</td>
</tr>
</tbody></table>
</li>
<li><p>基本路径覆盖测试</p>
<table>
<thead>
<tr>
<th>用例序号</th>
<th>输入数据</th>
<th>预期输出</th>
<th>覆盖路径</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>(A,B,X)&#x3D;(2,0,2)</td>
<td>start main function:path a…，输入A：，输入B&#x3D;，输入X&#x3D;，path c，path e，end main function.</td>
<td>ace</td>
</tr>
<tr>
<td>2</td>
<td>(A,B,X)&#x3D;(0,1,1)</td>
<td>start main function:path a…，输入A：，输入B&#x3D;，输入X&#x3D;，path b，path d，end main function.</td>
<td>abd</td>
</tr>
<tr>
<td>3</td>
<td>(A,B,X)&#x3D;(0,1,2)</td>
<td>start main function:path a…，输入A：，输入B&#x3D;，输入X&#x3D;，path b，path e，end main function.</td>
<td>abe</td>
</tr>
</tbody></table>
</li>
</ol>
<p>综上所述，基本路径覆盖测试用的测试用例最多，覆盖的路径也最多，故基本路径覆盖的覆盖率最高。</p>
<p><em><strong>注：<a href="https://blog.csdn.net/The_Azur/article/details/117936347">环形复杂度必定是基本路径个数的上限。</a></strong></em></p>
<p><img src="https://s2.loli.net/2023/05/31/HtDjYwSso3WKVFn.png" alt="Snipaste_2023-05-31_21-48-19.png"></p>
<h3 id="第四题"><a href="#第四题" class="headerlink" title="第四题"></a>第四题</h3><p>使用PMD代码分析工具针对如下被测程序，找出该程序存在的潜在缺陷，给出结果界面截图，并说明各个缺陷出现的原因。</p>
<p>被测样本程序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Coverage</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;start main function:path a...&quot;</span>);</span><br><span class="line">  <span class="type">int</span> A=<span class="number">0</span>,B=<span class="number">0</span>,X=<span class="number">0</span>;</span><br><span class="line">  <span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">  System.out.println(<span class="string">&quot;输入A：&quot;</span>);  A = s.nextInt();</span><br><span class="line">  System.out.println(<span class="string">&quot;输入B=&quot;</span>);  B = s.nextInt();</span><br><span class="line">  System.out.println(<span class="string">&quot;输入X=&quot;</span>);  X = s.nextInt();</span><br><span class="line">  s.close();  </span><br><span class="line">  <span class="keyword">if</span> (A&gt;<span class="number">1</span> &amp;&amp; B==<span class="number">0</span>) &#123;</span><br><span class="line">	X=X/A;</span><br><span class="line">	System.out.println(<span class="string">&quot;path c&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;path b&quot;</span>);  &#125;</span><br><span class="line">  <span class="keyword">if</span> (A==<span class="number">2</span> || X&gt;<span class="number">1</span>) &#123;</span><br><span class="line">	X=X+<span class="number">1</span>;</span><br><span class="line">	System.out.println(<span class="string">&quot;path e&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;path d&quot;</span>);  &#125;</span><br><span class="line">  System.out.println(<span class="string">&quot;end main function.&quot;</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>答：</p>
<p><u><em><strong>注：以下答案只参考了标准答案的一部分</strong></em></u></p>
<p><a href="https://smms.app/image/5I4amZs2cXEldHv" target="_blank"><img src="https://s2.loli.net/2023/05/31/5I4amZs2cXEldHv.jpg" alt="Z__LBIY38___C`L5GCFZSVF.jpg"></a></p>
<p>以下是可能的缺陷（感觉每个人做出来都不一样哈哈哈哈😆）：</p>
<blockquote>
<p>（1）VariableNamingConventions：</p>
<p>​		①变量应以小写字符开头，’A’’B’’X’均以大写字符开头</p>
<p>（2）UseUtilityClass：</p>
<p>​		①所有方法都是静态的，可以考虑使用实用工具类，或添加一个私		有构造函数，或使类抽象来屏蔽这个警告</p>
<p>（3）LocalVariableCouldBeFinal：</p>
<p>​		①局部变量’s’可以声明为final</p>
<p>（4）LocalVaraiableNamingConventions：</p>
<p>​		①局部变量名’A’’B’’X’不匹配’[a-z][a-zA-Z0-9]*’</p>
<p>（5）MethodArgumentCouldBeFinal：</p>
<p>​		①参数’args’未赋值，可以声明为final</p>
<p>（6）CommentRequired：</p>
<p>​		①类注释是必需的</p>
<p>​		②公共方法和构造函数的注释是必需的</p>
<p>（7）OneDeclarationPerLine：</p>
<p>​		①int A&#x3D;0,B&#x3D;0,X&#x3D;0; 每个声明为一行，可以增强代码的可读性</p>
<p>（8）UnusedAssignment：</p>
<p>​		①变量’B’的初始化式从未使用（后被重写）</p>
<p>​		②变量’A’的初始化式从未使用（后被覆盖）</p>
<p>​		③变量’X’的初始化式从未使用（后被覆盖）</p>
<p>​		④ X&#x3D;X+1; 赋给变量’X’的值从未使用过</p>
<p>（9）SystemPrintln：</p>
<p>​		①使用System.out.println</p>
<p>（10）ShortVariable：</p>
<p>​		① Scanner s &#x3D; new Scanner(System.in); 避免使用像s这样名字较		短的变量</p>
<p>​		②避免使用短名称的变量：如A,B,X</p>
<p>（11）DataflowAnomalyAnalysis：</p>
<p>​		①发现变量’A’的’DD’异常</p>
<p>​			int A&#x3D;0,B&#x3D;0,X&#x3D;0;</p>
<p>​			Scanner s &#x3D; new Scanner(System.in);</p>
<p>​		    System.out.println(“输入A：”);A &#x3D; s.nextInt();</p>
<p>​		②发现变量’X’的’DU’异常</p>
<p>​		X&#x3D;X+1;</p>
<p>​		System.out.println(“path e”);</p>
<p>​	} else {</p>
<p>​		System.out.println(“path d”);  }</p>
<p>​		System.out.println(“end main function.”);</p>
<p>​	}</p>
<p>​		③发现变量’X’的’DD’异常</p>
<p>​		int A&#x3D;0,B&#x3D;0,X&#x3D;0;</p>
<p> ​		Scanner s &#x3D; new Scanner(System.in);</p>
<p>​		System.out.println(“输入A：”);  A &#x3D; s.nextInt();</p>
<p>​		 System.out.println(“输入B&#x3D;”);  B &#x3D; s.nextInt();</p>
<p>​        System.out.println(“输入X&#x3D;”);  X &#x3D; s.nextInt();</p>
<p>​		④发现变量’B’的’DD’异常</p>
<p>​		int A&#x3D;0,B&#x3D;0,X&#x3D;0;</p>
<p>​	Scanner s &#x3D; new Scanner(System.in);</p>
<p>​	System.out.println(“输入A：”);  A &#x3D; s.nextInt();</p>
<p>​	System.out.println(“输入B&#x3D;”);  B &#x3D; s.nextInt();</p>
<p>（12）CloseResource：</p>
<p>​		①Scanner s &#x3D; new Scanner(System.in); 确保像InputStream对象		这样的资源在使用后被关闭</p>
</blockquote>
<p>我感觉第四题应该不会考🙂</p>
<p><em><strong>声明：除特殊标注外（综合考虑其他同学的答案），答案均为老师原版答案</strong></em></p>
]]></content>
      <categories>
        <category>大二下期末复习</category>
      </categories>
      <tags>
        <tag>软件测试</tag>
      </tags>
  </entry>
  <entry>
    <title>软件测试临考总结</title>
    <url>/2023/06/02/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/test4/</url>
    <content><![CDATA[<p>由于老师明确说不考概念记忆题😆，并且从我们这届开始改版全部是大题😤，所以就不要背那么多干巴巴的知识点啦~，但是一些必要的概念还是得大致知道啥意思吧，以下内容都基于老师发的PPT(●’◡’●)</p>
<h2 id="第一章-引论"><a href="#第一章-引论" class="headerlink" title="第一章 引论"></a>第一章 引论</h2><p><strong>软件测试(Software Testing）</strong>是一种检测软件的正确性、完整性、安全性和评估其质量的活动过程。换句话说，软件测试是一种以发现程序错误、衡量软件质量为目的，并对其是否满足用户需求进行评估的活动过程。</p>
<p><strong>软件质量保证（Software Quality Assurance，SQA）</strong>是指通过对软件产品进行有计划的评审与审计，来确保软件开发按照产品质量过程标准实施项目的管理活动。</p>
<p>软件质量保证与软件测试的关系：</p>
<blockquote>
<p>SQA指导软件测试的计划与执行，监督测试工作结果的客观性、准确性与有效性，并协助软件测试的工作流程改进。</p>
<p>软件测试是SQA工作落实的重要手段，它为SQA提供所需的质量数据，作为软件质量评价的客观依据。</p>
<p>SQA是一项<em><strong>软件质量管理性工作</strong></em>，侧重于对软件开发流程进行评审与监控。</p>
<p>软件测试是一项<em><strong>技术性工作</strong></em>，侧重于对软件质量特性进行检测与验证。</p>
</blockquote>
<p><strong>测试驱动开发(Test-Driven Development，简称TDD）</strong>是一种不同于传统软件开发流程的过程模型。它要求在编写某个功能的代码之前先编写测试代码，然后编写功能代码，通过测试来推动整个软件开发工作的进行。</p>
<p>下面哪项活动不是软件测试范畴</p>
<p>A．需求文档评审	B.设计评审	C.代码测试	D.过程评审</p>
<blockquote>
<p>过程评审是质量保证活动的一部分，用于评估软件开发过程是否符合既定标准和流程。</p>
</blockquote>
<p>编程完成后才进行测试存在哪些问题?</p>
<blockquote>
<p>测试的时间很有限，很难达到测试的覆盖率要求和测试的质量要求。同时，假如在项目开发的后期，发现一些软件需求阶段和概要设计阶段的错误和问题，修改这些缺陷导致的成本将是非常高的。</p>
</blockquote>
<h2 id="第二章-软件测试基本概念"><a href="#第二章-软件测试基本概念" class="headerlink" title="第二章 软件测试基本概念"></a>第二章 <strong>软件测试基本概念</strong></h2><p>**缺陷(Defect)**是指欠缺或不够完备的地方。因为缺陷是相对质量要求而存在的，任何违背了质量要求、违背了客户的意愿，不能满足用户的要求，都可以认为是缺陷。</p>
<p>IEEE STD729关于<strong>软件质量</strong>定义:软件产品或服务满足用户需求的程度。</p>
<blockquote>
<p>①软件缺陷在开发早期出现的概率大，在早期进行缺陷修复的成本低。</p>
<p>②软件在开发后期出现缺陷的概率小，但修复成本高。</p>
<p>③软件测试工作应尽早开展。</p>
</blockquote>
<p><a href="https://smms.app/image/Oc54oYf2KPN81hg" target="_blank"><img src="https://s2.loli.net/2023/06/02/Oc54oYf2KPN81hg.png" ></a></p>
<p>在代码审查中，静态测试可发现如下编程缺陷:</p>
<blockquote>
<p>变量在初始化前使用、变量声明后未使用、变量在两次赋值之间从未使用</p>
<p>数组访问越界</p>
<p>存在不可到达代码</p>
<p>循环中无条件分支</p>
<p>接口参数类型或数目不匹配</p>
<p>空指针或指针类型错误</p>
<p>存在未被调用的函数和过程</p>
</blockquote>
<p>案例一</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;(<span class="type">int</span>)attributeList.length();i++)&#123;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>如果把判断条件放在for语句内，每一次判断都要重新计算length， 浪费资源</p>
<p>正确代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> tmp_iListLength=attributeList.length()</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=O;i&lt;tmp_iListLength; i++)</span><br><span class="line">&#123;</span><br><span class="line">......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>案例二</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> i ;</span><br><span class="line">...</span><br><span class="line">printf(<span class="string">&quot;i= %d \n&quot;</span>,i) ;</span><br></pre></td></tr></table></figure>

<p>正确代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> i=<span class="number">0</span> ;</span><br><span class="line">printf (<span class="string">&quot;i= %d \n&quot;</span>,i) ;</span><br></pre></td></tr></table></figure>

<p>案例三</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">        <span class="type">int</span> array[] = <span class="literal">null</span>; <span class="comment">//声明数组</span></span><br><span class="line">        array = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];<span class="comment">//为数组开辟空间，大小为3</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= array.length; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;array[&quot;</span> + i + <span class="string">&quot;]=&quot;</span> + array[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>缺陷应该是数组下标可能越界</p>
<p>个人修改的代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">        <span class="type">int</span> array[] = <span class="literal">null</span>; <span class="comment">//声明数组</span></span><br><span class="line">        array = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];<span class="comment">//为数组开辟空间，大小为3</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;array[&quot;</span> + i + <span class="string">&quot;]=&quot;</span> + array[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>案例四</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExceptionDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;**********计算开始***********&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;      <span class="comment">// 定义整型变量</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;      <span class="comment">//定义整型变量</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> args[<span class="number">0</span>];  <span class="comment">// 接收第一个参数</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> args[<span class="number">1</span>];  <span class="comment">// 接收第二个参数</span></span><br><span class="line">            i = Integer.parseInt(str1);<span class="comment">//将第一个参数由字符串变为整型</span></span><br><span class="line">            j = Integer.parseInt(str2);<span class="comment">//将第二个参数由字符串变为整型</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> i / j;           <span class="comment">//进行除法计算</span></span><br><span class="line">            System.out.println(<span class="string">&quot;两个数字相除的结果:&quot;</span> + temp);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ArithmeticException e) &#123;<span class="comment">// 捕获算术异常System.out.println(&quot;出现异常了: &quot; + e);</span></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;**********计算结束***********&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可能的缺陷：</p>
<blockquote>
<ul>
<li>在try块中，使用args数组来接收命令行参数。然而，没有对args数组的长度进行检查或验证。如果没有传递足够的参数，将会导致ArrayIndexOutOfBoundsException(数组索引越界异常)。</li>
<li>在try块中，将args数组的元素作为字符串参数传递给parseInt()方法进行整数转换。然而，如果传递的参数无法解析为整数，将会导致NumberFormatException(数字格式异常)。</li>
<li>在catch块中，捕获了ArithmeticException异常，但是该异常只能捕获除以0导致的算术异常。如果出现其他类型的异常，将无法被捕获和处理。</li>
</ul>
</blockquote>
<p>正确代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExceptionDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;********** 计算开始 ***********&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (args.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;缺少必要的参数&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> Integer.parseInt(args[<span class="number">0</span>]);</span><br><span class="line">            <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> Integer.parseInt(args[<span class="number">1</span>]);</span><br><span class="line">            </span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> i / j;</span><br><span class="line">            System.out.println(<span class="string">&quot;两个数字相除的结果: &quot;</span> + temp);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;参数格式错误: &quot;</span> + e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ArithmeticException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;除数不能为0: &quot;</span> + e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalArgumentException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;参数错误: &quot;</span> + e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;********** 计算结束 ***********&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>动态测试是通过运行被测软件程序，观察该程序在运行过程中的系统行为、变量结果、内存、堆栈等运行数据，来判断软件系统是否存在缺陷的测试活动。<br>动态测试可发现的主要缺陷:</p>
<blockquote>
<p>程序逻辑错误</p>
<p>异常输入的功能失效</p>
<p>空指针使用</p>
<p>内存没有及时释放关闭的对象资源</p>
<p>Session失效</p>
<p>没有处理在空输入时点取Enter键情况</p>
</blockquote>
<p>案例一</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    String name; <span class="comment">// 声明姓名属性</span></span><br><span class="line">    <span class="type">int</span> age; <span class="comment">// 声明年龄属性</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">tell</span><span class="params">()</span> &#123; <span class="comment">// 取得信息</span></span><br><span class="line">        System.out.println(<span class="string">&quot;姓名: &quot;</span> + name + <span class="string">&quot;，年龄: &quot;</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClassDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">per</span> <span class="operator">=</span> <span class="literal">null</span>; <span class="comment">// 声明对象</span></span><br><span class="line">        per.name = <span class="string">&quot;张三&quot;</span>; <span class="comment">// 为姓名赋值</span></span><br><span class="line">        per.age = <span class="number">30</span>; <span class="comment">// 为年龄赋值</span></span><br><span class="line">        per.print(); <span class="comment">// 调用方法，打印信息</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在ClassDemo类的main方法中，创建了一个Person对象per，但没有实际实例化该对象，而是将其初始化为null。这意味着per对象没有被正确地创建和初始化，因此在尝试为per对象的name和age属性赋值时会导致NullPointerException(空指针异常)。<br>在Person类的tell()方法中，打印信息的语句使用了per.print()，但实际上应该调用的是per.tell()，因为tell()方法是定义在Person类r的。</p>
</blockquote>
<p>案例二</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">OutputStream os=<span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    os=<span class="keyword">new</span> <span class="title class_">OutputStream</span>();</span><br><span class="line">      <span class="comment">//Do something with os here.</span></span><br><span class="line">    os.close();</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">        <span class="keyword">if</span>(os!=<span class="literal">null</span>)</span><br><span class="line">         os.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>正确代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">OutputStream os=<span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    os=<span class="keyword">new</span> <span class="title class_">OutputStream</span>();</span><br><span class="line">      <span class="comment">//Do something with os here.</span></span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(os!=<span class="literal">null</span>)</span><br><span class="line">     os.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改后的代码使用了 <code>finally</code> 块来确保在无论是否发生异常的情况下都能关闭输出流。</p>
<p><strong>软件验证（(verification）</strong>是指在开发软件过程中，检验软件是否已正确地实现了产品规格说明书所定义的系统功能和特性。<br><strong>软件确认(validation）</strong>是指在开发软件完成后，检查软件产品是否符合用户的真实需求。</p>
<blockquote>
<p>验证:我们正确地构造了产品吗?</p>
<p>确认:我们构造了正确的产品吗?</p>
</blockquote>
<p><em><strong>黑盒测试</strong></em>是指在测试中，把程序看作一个不能打开的黑盒子。在完全不考虑程序内部结构和内部特性的情况下，对程序功能进行测试，检查程序功能是否按照需求规格说明进行有效实现、是否能适当地接收输入数据而产生正确的输出信息。</p>
<p>黑盒测试是从用户观点出发开展的测试，其目的是尽可能发现软件的外部行为错误。黑盒测试常用于发现以下缺陷:</p>
<blockquote>
<p>检测软件是否有错误的功能或有功能遗漏<br>不能正确地接收输入数据、输出错误的结果<br>功能操作不够方便<br>界面出错、扭曲或不美观<br>安装过程中出现问题，安装步骤不清晰、不灵活<br>系统初始化存在问题</p>
</blockquote>
<p><em><strong>白盒测试</strong></em>是指在了解被测程序内部逻辑结构情况下，对该程序的内部变量、逻辑结构、运行路径进行测试，检验被测程序的内部动作或运行功能是否符合设计规格要求。</p>
<p>白盒测试常用于发现以下缺陷:</p>
<blockquote>
<p>程序逻辑错误<br>程序状态异常<br>程序路径无法跳转<br>变量遗漏初始化</p>
</blockquote>
<p><em><strong>单元测试</strong></em></p>
<blockquote>
<p>单元测试针对软件程序中的<strong>最小功能单元代码</strong>（类、函数、模块或组件)进行测试。<br>主要采用白盒测试方法，从程序的内部结构出发设计测试用例，检查单元程序已实现功能与设计规格是否一致、以及编码中是否存在逻辑错误。<br>单元测试一般由编程人员和测试人员共同完成，而以开发人员为主。通常需要编写<strong>驱动模块</strong>和<strong>桩模块</strong>。<br>单元测试还采用代码评审方法（走读、静态分析、评审）检查程序错误，代码评审可以发现程序**50%～70%**代码的缺陷。</p>
</blockquote>
<p><strong>集成测试</strong>（也称组装测试、联合测试）是一种在单元测试的基础上，将若干单元模块按照设计要求组装起来所进行的测试，其目标是发现模块接口相关问题。</p>
<p><strong>系统测试</strong>是在集成测试之后，在系统层面所进行的功能特性测试和非功能特性测试。</p>
<p><strong>验收测试</strong>是在软件提交用户前，在实际用户环境中，验证软件系统功能、性能及其它特性是否符合用户需求。</p>
<ul>
<li>α测试——软件公司在其产品推向市场前，采用实际运行环境和真实数据在软件公司内部进行的验收测试。</li>
<li>β测试——软件公司在其产品推向市场前，还需要在公司外部用户中进行试用测试。通过收集试用户的反馈意见，对该版本软件进行修正与完善，最终得到正式发布的版本。</li>
</ul>
<h2 id="第三章-软件测试方法"><a href="#第三章-软件测试方法" class="headerlink" title="第三章 软件测试方法"></a>第三章 软件测试方法</h2><h3 id="基于直觉和经验的方法"><a href="#基于直觉和经验的方法" class="headerlink" title="基于直觉和经验的方法"></a>基于直觉和经验的方法</h3><blockquote>
<p><strong>Ad-hoc测试方法</strong>强调测试人员更多根据自己的专业经验，不受测试用例约束，放开思路、灵活地进行各种测试。<br><strong>ALAC ( Act-like-a-customer，像客户那样做</strong>）测试方法是一种基于客户使用产品的经验知识进行系统测试，其出发点是应用帕累托(Pareto）二八法则进行重点测试。<br><strong>错误推测法</strong>是测试者根据自己的工作经验、专业知识和直觉来来推测出软件中可能存在的各种错误，从而对被测软件采用针对性的测试。</p>
</blockquote>
<h3 id="基于输入域方法（数据驱动测试）"><a href="#基于输入域方法（数据驱动测试）" class="headerlink" title="基于输入域方法（数据驱动测试）"></a>基于输入域方法（数据驱动测试）</h3><p><em><strong>等价类划分法：</strong></em></p>
<p>一个程序P有两个整型输入变量I1、I2，输出变量为Out,其计算函数为Out&#x3D;P(l1,I2)，假定在字长32位计算机上运行。所有输入数据组合有多少?	<em><strong>2³²x 2³²&#x3D;2⁶⁴</strong></em></p>
<p>例：采购收货单报表系统，要求用户输入处理报表的日期。假定日期限定在2000年1月1日到2023年12月30日。请设计“日期”输入数据验证的等价类。</p>
<blockquote>
<p>有效日期的等价类:2000年1月1日到2023年12月30日的日期值<br>无效日期的等价类:小于2000年1月1日的日期值<br>无效日期的等价类:大于2023年12月30日的日期值</p>
</blockquote>
<p>例：采购收货单报表系统，对于商品数量输入数据，应为大于0的整数，才能符合业务要求。请设计“数量”输入数据验证的等价类。</p>
<blockquote>
<p>有效“数量”字段输入等价类:大于0的整数。<br>无效“数量”字段输入等价类:小于等于0的整数。</p>
</blockquote>
<p>例：航班计划系统，对于某航班设定是否为往返航班，其输入数据应采用布尔数值，才能符合业务要求。请设计“来回程”输入数据验证的等价类。</p>
<blockquote>
<p>有效的“来回程”字段数据输入等价类:真&#x2F;假布尔值。<br>无效的“来回程”字段数据输入等价类:其它任何值。</p>
</blockquote>
<p>例：对于计算器软件的加法运算功能进行测试。请设计“+”功能测试的等价类。</p>
<blockquote>
<p>有效的数据输入等价类:整型数值<br>有效的数据输入等价类:实数数值<br>有效的数据输入等价类:负数数值<br>无效的数据输入等价类:非数字符号</p>
</blockquote>
<p>例:四川地税发票查询页面的发票金额字段输入检查功能测试。</p>
<blockquote>
<p>有效的“发票金额”字段数据输入等价类:大于0的数值数据。<br>无效的“发票金额”字段数据输入等价类:非数值数据。<br>无效的“发票金额”字段数据输入等价类:小于等于0的数值</p>
</blockquote>
<p><em><strong>边界值分析法</strong></em>就是在某个输入变量范围的边界上，输入一些特定数据，分析验证系统功能是否正常运行的测试方法。</p>
<p>例：酒店预订系统业务规定客户最多可提前20天预订酒店客房。请按边界值分析法设计酒店搜索功能的测试用例。</p>
<blockquote>
<p>假定客人在2023-3-12进行订房操作，预订后面10到20天内入住客房，其测试边界值可设置为:2023-3-21、2023-3-31、2023-4-1</p>
</blockquote>
<p>等价类划分法和边界值分析法仅适用于单因素（单变量）输入的数据测试。</p>
<h3 id="基于组合及其优化方法（多变量）"><a href="#基于组合及其优化方法（多变量）" class="headerlink" title="基于组合及其优化方法（多变量）"></a>基于组合及其优化方法（多变量）</h3><p><strong>判定表方法</strong>是一种借助表格方式完成多条件输入组合下测试用例设计，达至完全覆盖输出结果的测试方法。其表格组成样式如下:</p>
<table>
<thead>
<tr>
<th></th>
<th>序号</th>
<th>1</th>
<th>2</th>
<th>3</th>
<th>4</th>
<th>5</th>
<th>6</th>
<th>7</th>
<th>8</th>
</tr>
</thead>
<tbody><tr>
<td>条件</td>
<td>正确输入年Y</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
<td>N</td>
<td>N</td>
<td>N</td>
<td>N</td>
</tr>
<tr>
<td>条件</td>
<td>正确输入月M</td>
<td>Y</td>
<td>Y</td>
<td>N</td>
<td>N</td>
<td>Y</td>
<td>Y</td>
<td>N</td>
<td>N</td>
</tr>
<tr>
<td>条件</td>
<td>正确输入日D</td>
<td>Y</td>
<td>N</td>
<td>Y</td>
<td>N</td>
<td>Y</td>
<td>N</td>
<td>Y</td>
<td>N</td>
</tr>
<tr>
<td>动作</td>
<td>函数运行成功</td>
<td>√</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>动作</td>
<td>函数运行失败</td>
<td></td>
<td>√</td>
<td>√</td>
<td>√</td>
<td>√</td>
<td>√</td>
<td>√</td>
<td>√</td>
</tr>
</tbody></table>
<p><strong>因果图法</strong>是一种利用图解法分析输入的各种组合情况，从而设计测试用例的形式化方法。它适合于检查程序输入、输出错误，还能判定程序规范中的二义性、不完全性等错误。</p>
<p>因果图PPT上面举了好几页例子，肯定很重要哒~</p>
<p><img src="https://s2.loli.net/2023/06/02/WxI9MwjJepmurfE.png" alt="Snipaste_2023-06-02_15-46-16.png"></p>
<p><img src="https://s2.loli.net/2023/06/02/jCuF49rsNHEm1a5.png" alt="Snipaste_2023-06-02_15-46-38.png"></p>
<p><img src="https://s2.loli.net/2023/06/02/GqM7ES6sPwaBRKt.png" alt="Snipaste_2023-06-02_15-46-47.png"></p>
<p><img src="https://s2.loli.net/2023/06/02/1QmJtbZgpjdr5x7.png" alt="Snipaste_2023-06-02_15-46-56.png"></p>
<p><img src="https://s2.loli.net/2023/06/02/t8moTlbkVwfOLN3.png" alt="Snipaste_2023-06-02_15-47-10.png"></p>
<p><img src="https://s2.loli.net/2023/06/02/L9t3abT6hHxMXNJ.png" alt="Snipaste_2023-06-02_15-48-36.png"></p>
<p><img src="https://s2.loli.net/2023/06/02/2n1okyQVmwI9RrF.png" alt="Snipaste_2023-06-02_15-49-01.png"></p>
<p><img src="https://s2.loli.net/2023/06/02/NWK8wLlgq2Q5AEB.png" alt="Snipaste_2023-06-02_15-50-08.png"></p>
<p><img src="https://s2.loli.net/2023/06/02/CiUFqs6Q2tdLbj4.png" alt="Snipaste_2023-06-02_15-50-14.png"></p>
<p><img src="https://s2.loli.net/2023/06/02/YUzawnXV9oFRgex.png" alt="Snipaste_2023-06-02_15-50-20.png"></p>
<p>当有多个输入变量、每个变量又有多个取值。若要执行全覆盖组合测试，其工作量非常大。为了有效地减少测试组合数，可以采用<strong>成对组合测试方法</strong>，其基本思想是每两个输入变量所有取值组合形成不同测试用例。</p>
<p>例：</p>
<p>测试一个登录页面在不同浏览器和语言下的功能正确性，其输入条件如下:</p>
<p>1）输入项（账号、密码）</p>
<p>2）浏览器（IE、chrome、FireFox、360）</p>
<p>3）语言（中文、英文）</p>
<p>成对组合测试用例表</p>
<table>
<thead>
<tr>
<th>用例</th>
<th>账号</th>
<th>密码</th>
<th>浏览器</th>
<th>语言</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>空值</td>
<td>空值</td>
<td>IE</td>
<td>中文</td>
</tr>
<tr>
<td>2</td>
<td>空值</td>
<td>有值</td>
<td>chrome</td>
<td>英文</td>
</tr>
<tr>
<td>3</td>
<td>有值</td>
<td>空值</td>
<td>FireFox</td>
<td>中文</td>
</tr>
<tr>
<td>4</td>
<td>有值</td>
<td>有值</td>
<td>360</td>
<td>英文</td>
</tr>
<tr>
<td>5</td>
<td>空值</td>
<td>空值</td>
<td>360</td>
<td>中文</td>
</tr>
<tr>
<td>6</td>
<td>空值</td>
<td>有值</td>
<td>FireFox</td>
<td>英文</td>
</tr>
<tr>
<td>7</td>
<td>有值</td>
<td>空值</td>
<td>chrome</td>
<td>中文</td>
</tr>
<tr>
<td>8</td>
<td>有值</td>
<td>有值</td>
<td>IE</td>
<td>英文</td>
</tr>
</tbody></table>
<p><strong>正交实验测试法</strong>是一种依据伽罗华(Galois)理论，从大量实验数据中挑选适量的、具有代表性的数据进行实验，以达到降低实验成本的方法。</p>
<p>正交表构成</p>
<blockquote>
<p>行数:正交表中的行个数，即实验的次数，也是我们通过正交实验法设计的测试用例个数。行数(即&gt;测试用例次数)&#x3D;∑(每列水平数-1)+1</p>
<p>因素数:正交表中列的个数，即测试功能点的因子数。</p>
<p>水平数:任何单个因素能够取值的个数。正交表中包含值为从0到“水平数-1”或从1到“水平数”。即要测试功能点的输入取值数。</p>
<p>L代表正交表，它是运用数学理论在拉丁方和正交拉丁方基础上构造的规格化数据表格，常用的有L₈(2⁷)、L₉(3⁴)、L₁₆(4⁵)等。</p>
</blockquote>
<p>正交表特性</p>
<blockquote>
<p>1)每一列中各数字出现的次数都一样多;<br>2)任何两列所构成的各有序数对出现的次数都一样多。<br>例如在两水平正交表中，任何两列(同一横行内）有序对子共有4种:(1，1)、 (1，2)、(2，1)、 (2，2)。每种对数出现次数相等。在三水平情况下，任何两列(同一横行内）有序对共有9种，1.1、1.2、1.3、<br>2.1、2.2、2.3、<br>3.1、3.2、3.3，且每对出现数也均相等。</p>
</blockquote>
<p> 在一个客户信息查询界面中，输入条件有“姓名”、“身份证号”、“手机”，采用正交表方式设计该界面查询功能的测试用例。</p>
<p>针对本测试有3个输入条件，每个输入有2种取值情况，可以选择L₄(2³)正交表，其正交表值如下表所示：</p>
<table>
<thead>
<tr>
<th>实验数\列号</th>
<th>姓名</th>
<th>身份证号</th>
<th>手机</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>2</td>
<td>1</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>3</td>
<td>0</td>
<td>1</td>
<td>0</td>
</tr>
<tr>
<td>4</td>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
</tbody></table>
<p>测试用例：</p>
<table>
<thead>
<tr>
<th>测试用例&#x2F;查询条件</th>
<th>姓名</th>
<th>身份证号</th>
<th>手机</th>
</tr>
</thead>
<tbody><tr>
<td>测试用例1</td>
<td>填写</td>
<td>填写</td>
<td>填写</td>
</tr>
<tr>
<td>测试用例2</td>
<td>填写</td>
<td>空</td>
<td>空</td>
</tr>
<tr>
<td>测试用例3</td>
<td>空</td>
<td>填写</td>
<td>空</td>
</tr>
<tr>
<td>测试用例4</td>
<td>空</td>
<td>空</td>
<td>填写</td>
</tr>
</tbody></table>
<h3 id="基于逻辑覆盖方法"><a href="#基于逻辑覆盖方法" class="headerlink" title="基于逻辑覆盖方法"></a>基于逻辑覆盖方法</h3><p><strong>语句覆盖法</strong>的基本思想是设计若干测试用例，使得被测程序中的每个可执行语句至少被执行一次。如果是顺序结构，就是让测试从头执行到尾。如果有分支、条件和循环，则需要执行足够的测试用例覆盖全部语句。</p>
<p><strong>语句覆盖测试能解决的问题</strong>:发现程序中一些永远不能被执行的语句缺陷，但不能发现程序中语句逻辑错误。</p>
<p>语句覆盖测试即使覆盖了程序中每个语句，但并不一定测试覆盖所有分支。试图覆盖程序中所有路径的测试方法称为<strong>路径覆盖</strong>。路径测试的最简单形式就是<strong>判定覆盖测试</strong>。<br><strong>判定覆盖测试基本思想</strong>:设计若干用例，运行被测程序，使得程序中每个判断语句的取真分支和取假分支至少执行一次，即判断真假值均可被满足。一个判定往往代表程序的一个分支，所以判定覆盖测试也称为<strong>分支覆盖测试</strong>。</p>
<p>判定覆盖测试能发现程序中一些永远不能被执行的分支缺陷，可以发现部分逻辑缺陷。</p>
<p><strong>条件覆盖</strong>的基本思想是设计若干测试用例，使其对被测程序进行测试，使每个判断中每个条件的可能取值至少满足一次。</p>
<p>符合条件覆盖的测试用例并不一定满足判定覆盖要求，反之，符合判定覆盖的测试用例也不一定满足条件覆盖要求。因此，需要找出符合两者的测试用例交集，该方法称为<strong>判定-条件覆盖</strong>。</p>
<p><strong>条件组合覆盖</strong>的基本思想是设计足够的测试用例，使得判断中每个条件的所有取值情况至少出现一次，并且每个判断本身的判定结果也至少出现一次。条件组合测试不一定能覆盖所有路径。</p>
<p><strong>基本路径覆盖</strong>就是设计测试用例，覆盖程序中所有可能的基本分支路径。<br>基本路径覆盖局限:不能保证覆盖所有条件组合</p>
<p>基本路径覆盖测试用例设计步骤:</p>
<blockquote>
<p>依据代码绘制流程图<br>确定流程图的环路复杂度<br>确定各个独立路径的基本集合<br>设计测试用例覆盖每条基本路径</p>
</blockquote>
<p>计算环路复杂度：</p>
<blockquote>
<p>（1）流图中的区域数等于环形复杂度。<br>（2）流图G的环形复杂度V(G)&#x3D;E-N+2，其中，E是流图中边的条数，N是结点数。<br>（3）流图G的环形复杂度V(G)&#x3D;P+1，其中，P是流图中判定结点的数目。</p>
</blockquote>
<h2 id="第四章-测试流程和规范"><a href="#第四章-测试流程和规范" class="headerlink" title="第四章  测试流程和规范"></a>第四章  测试流程和规范</h2><p>软件测试过程：<br>软件工程角度→需求评审→设计评审→单元测试→集成测试→系统测试→验收测试</p>
<p>项目管理角度：<br>测试计划→测试设计→执行与监控→结果分析与评估→项目总结</p>
<p><strong>敏捷测试</strong>（自动化测试）是一种遵从敏捷软件开发原则，支持敏捷软件开发实现质量控制的测试实践。<br><strong>TMap</strong> (Test Management Approach，测试管理方法)是一种业务驱动的、基于风险策略的、结构化的测试管理方法，其目标是尽早地发现缺陷，以最小的成本、有效地、彻底地完成测试任务，以减少软件发布后的支持成本。</p>
<p><strong>基于脚本测试</strong>(Scripted Testing，ST），无论是手工测试，还是自动化测试，都需要先设计用例，生成测试脚本，然后执行脚本实施测试。<br><strong>探索式测试</strong>(Exploratory Testing，ET），不需要设计用例，一边思考，一边测试。<br><em><strong>在敏捷测试中，则主要采用探索式测试，基于脚本测试则作为补充</strong></em>;而在传统测试中，主要采用基于脚本测试，探索式测试作为补充。</p>
<h2 id="第五章-单元测试与集成测试"><a href="#第五章-单元测试与集成测试" class="headerlink" title="第五章 单元测试与集成测试"></a>第五章 单元测试与集成测试</h2><p><strong>单元静态测试</strong>是指不运行被测程序本身，仅通过分析或检查源程序的语法、结构、过程、接口等来检查程序的正确性。主要采用互查、走查、评审方法进行测试，也可通过代码缺陷扫描工具进行分析处理。</p>
<p>代码示例1：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过用户UI界面输入的用户名，传递到Action层，进行用户角色识别操作</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> request HttpServletRequest对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> String 用户角色，如管理员/普通用户/...</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getUserRole</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">userRole</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">userName</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;userName&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (userName.equals(<span class="string">&quot;schadmin&quot;</span>)) &#123;</span><br><span class="line">        <span class="comment">// 这是系统初始化时默认的管理员账号，如果是，则进行以下验证操作...      </span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 非系统初始化的账号，进行以下验证操作...</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> userRole;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>userName可能会出现空指针情况</p>
<p>修改：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过用户UI界面输入的用户名，传递到Action层，进行用户角色识别操作</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> request HttpServletRequest对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> String 用户角色，如管理员/普通用户/...</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getUserRole</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">userRole</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">userName</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;userName&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;schadmin&quot;</span>.equals(userName)) &#123;</span><br><span class="line">        <span class="comment">// 这是系统初始化时默认的管理员账号，如果是，则进行以下验证操作...      </span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 非系统初始化的账号，进行以下验证操作...</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> userRole;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码示例2</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过用户输入的年龄，转换为数值型</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> request HttpServletRequest对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> Integer 用户年龄</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getUserAge</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">userAge</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;userAge&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (userAge != <span class="literal">null</span>) &#123;</span><br><span class="line">        age = Integer.parseInt(userAge);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>userAge可能不是字符型数字。</p>
<p>建议写一个Util工具类，实现一些常见的数据转换方法，以供调用:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 传入的字符串转换为整型</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> intStr String</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> Integer</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getIntValue</span><span class="params">(String intStr)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">parseInt</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (isNumeric(intStr)) &#123;</span><br><span class="line">        parseInt = Integer.parseInt(intStr);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> parseInt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>示例代码3</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 假设电话号码字符串设计的标准格式为: 国家编码-区位号码-电话号码-分机号</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> strPhoneNumber String</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> String 电话号码 (如: 例子中的2313222)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getPhoneNumber</span><span class="params">(String strPhoneNumber)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (strPhoneNumber == <span class="literal">null</span> || <span class="string">&quot;&quot;</span>.equals(strPhoneNumber)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    String[] arrPhone = strPhoneNumber.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> arrPhone[<span class="number">2</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可能出现数组越界错误。</p>
<p>修改：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getPhoneNumber</span><span class="params">(String strPhoneNumber)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (strPhoneNumber == <span class="literal">null</span> || <span class="string">&quot;&quot;</span>.equals(strPhoneNumber)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    String[] arrPhone = strPhoneNumber.split(<span class="string">&quot;, &quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (arrPhone.length &gt; <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> arrPhone[<span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>示例代码4</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">writeString</span><span class="params">(File file, String writeContent, String encoding)</span> <span class="keyword">throws</span> FileOperatorException &#123;</span><br><span class="line">    <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">            file.createNewFile();</span><br><span class="line">        &#125;</span><br><span class="line">        fos = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file);</span><br><span class="line">        fos.write(writeContent.getBytes(encoding));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FileOperatorException</span>(ex);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">writeString</span><span class="params">(File file, String writeContent, String encoding)</span> <span class="keyword">throws</span> FileOperatorException &#123;</span><br><span class="line">    <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">            file.createNewFile();</span><br><span class="line">        &#125;</span><br><span class="line">        fos = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file);</span><br><span class="line">        fos.write(writeContent.getBytes(encoding));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FileOperatorException</span>(ex);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;<span class="comment">//如果没有finally下面的段语句，就无法释放文件资源</span></span><br><span class="line">         <span class="keyword">if</span> (fos != <span class="literal">null</span>)&#123;</span><br><span class="line">             <span class="keyword">try</span> &#123;</span><br><span class="line">                fos.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FileOperatorException</span>(e);</span><br><span class="line">             &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>为了确保代码在运行可靠、功能正确并且能够有良好的性能响应，仅仅进行静态测试是不够的，必须将该单元代码运行起来，验证代码业务逻辑合理性，并了解单元代码的实际表现，即对单元代码进行<strong>动态测试</strong>。</p>
<p>动态测试实现原理</p>
<blockquote>
<p>驱动程序(Driver)<br>被测单元(Unit)<br>桩程序(Stub)</p>
</blockquote>
<p>桩模块和驱动模块的概念搞不清楚，那么下面来介绍这两个概念： </p>
<blockquote>
<p>　　假设现在项目组把任务分给了7个人，每个人负责实现一个模块。你负责的是B模块，你很优秀，第一个完成了编码工作，现在需要开展单元测试工作，先分析结构图：<br>　　1、由于B模块不是最顶层模块，所以它一定不包含main函数(A模块包含main函数)，也就不能独立运行。<br>　　2、B模块调用了D模块和E模块，而目前D模块和E模块都还没有开发好，那么想让B模块通过编译器的编译也是不可能的。<br>　　那么怎样才能测试B模块呢?需要做：<br>　　1、写两个模块Sd和Se分别代替D模块和E模块(函数名、返回值、传递的参数相同)，这样B模块就可以通过编译了。Sd模块和Se模块就是桩模块。<br>　　2、写一个模块Da用来代替A模块，里面包含main函数，可以在main函数中调用B模块，让B模块运行起来。Da模块就是驱动模块。<br>　　桩模块的使命除了使得程序能够编译通过之外，还需要模拟返回被代替的模块的各种可能返回值(什么时候返回什么值需要根据测试用例的情况来决定)。<br>　　驱动模块的使命就是根据测试用例的设计去调用被测试模块，并且判断被测试模块的返回值是否与测试用例的预期结果相符</p>
</blockquote>
<p>集成测试模式:</p>
<blockquote>
<p><strong>非渐增式集成测试</strong><br>先分别测试每个模块，再把所有模块按设计要求组装在一起，然后再进行集成程序的测试。<br><strong>渐增式集成测试</strong><br>把下一个待测试的模块同已经测试好的模块结合起来进行测试，测试完以后再把下一个待测试模块结合进来测试。</p>
</blockquote>
<p><a href="https://smms.app/image/rnOYwCVIDNeBuol" target="_blank"><img src="https://s2.loli.net/2023/06/02/rnOYwCVIDNeBuol.png" alt="HU3PI_3`VKVH_46F9W_GL_4.png"></a></p>
<p><img src="https://s2.loli.net/2023/06/02/qkVeM75SoWYvXg4.png" alt="E_Y5_DZ_B7D_8_Y_B__R_Q8.png"></p>
<p>以上两种测试模式都属于渐增式集成测试。</p>
<p>针对叶节点模块进行单元测试，下面哪项不是必须的?<br>A.测试数据	B.被测单元	C.驱动程序	D.桩程序</p>
<blockquote>
<p>然而，对于叶节点模块的单元测试而言，通常不需要使用桩程序。叶节点模块是指在软件系统中没有其他依赖的最底层模块，也被称为叶子节点或叶子模块。由于它们不依赖其他模块或外部系统，所以不需要模拟或替代任何外部依赖项的行为。</p>
</blockquote>
<h2 id="第六章-系统测试"><a href="#第六章-系统测试" class="headerlink" title="第六章 系统测试"></a>第六章 系统测试</h2><p><strong>功能测试</strong>就是对软件系统的各功能进行验证，根据系统功能需求，逐项测试系统功能是否达到用户要求。</p>
<p><strong>回归测试</strong>是指修改了源代码后，重新进行系统功能测试以确认修改没有引入新的错误或导致其他代码产生错误（<strong>回归缺陷</strong>）。</p>
<p><strong>性能测试</strong>是一种为了发现系统性能问题或获取系统性能相关指标而进行的测试。一般在真实环境、特定负载条件下，通过测试工具模拟实际软件系统的运行及其操作，同时监控性能各项指标，最后对测试结果进行分析来确定系统的性能状况。</p>
<p>常见系统性能问题</p>
<blockquote>
<p>资源耗尽:CPU使用率达到100%<br>资源泄露:内存泄露导致资源耗尽<br>资源瓶颈:缺少可用线程、DB连接资源</p>
</blockquote>
<p><strong>负载测试</strong>（Load Test）：负载测试是一种性能测试，指数据在超负荷环境中运行，程序是否能够承担。 关注点：how much</p>
<p><strong>压力测试</strong>（Stress Test）： 压力测试（又叫强度测试）也是一种性能测试，它在系统资源特别低的情况下软件系统运行情况，目的是找到系统在哪里失效以及如何失效的地方。</p>
<p><strong>容量测试</strong>(Volume Test)：确定系统可处理同时在线的最大用户数 关注点：how much（而不是how fast） 容量测试，通常和数据库有关，容量和负载的区别在于：容量关注的是大容量，而不需要关注使用中的实际表现。</p>
<p>其中，容量测试、负载测试、压力测试的英文解释为：</p>
<blockquote>
<p>Volume Testing &#x3D; Large amounts of data<br>Load Testing &#x3D; Large amount of users<br>Stress Testing &#x3D; Too many users, too much data, too little time and too little room</p>
</blockquote>
<p>假设一个业务系统有1万个注册用户，每天有1半用户会在上班时间（8小时)访问该系统，平均在线时间为1个小时。那么访问该系统的上班时间平均每分钟在线用户数为多少?<br>5000×60&#x2F;(8×60)&#x3D;625</p>
<p><img src="https://s2.loli.net/2023/06/02/TSQZBrG6hRD1NCn.png" alt="Y_TBOAQ0UR1TJ27T2@S4SQY.png"></p>
<p><strong>容错性测试</strong>是检查系统容错能力，即系统在异常条件下自身是否具有防护性的措施或者某种灾难性恢复的手段。</p>
<p><strong>兼容性测试</strong>是指测试软件在特定的硬件平台上、不同的应用软件之间、不同的操纵系统平台上、不同的网络等环境中是否能够很友好的运行。</p>
<p><strong>软件可靠性</strong>是指软件系统在规定时间内及规定环境条件下，完成特定功能的能力。</p>
<p>软件可靠性评估：<br>MTTF (Mean Time To Failure)——系统平均无故障时间</p>
<p>MTTR (Mean Time To Recover)——故障平均修复时间</p>
<p>可用性度量&#x3D; MTTF &#x2F; (MTTF+MTTR）<br>例:如果系统每运行100个时间单位，会有1个时间单位无法提供服务，其系统的可用性是99%。</p>
<p>下面哪项不是系统性能降低的原因?<br>A．资源耗尽	<em><strong>B．响应时间慢</strong></em>	C．内存泄漏	D．网络拥挤</p>
<h2 id="第七章-验收测试"><a href="#第七章-验收测试" class="headerlink" title="第七章 验收测试"></a>第七章 验收测试</h2><p><strong>验收测试</strong>是在软件产品完成了系统测试之后、产品发布之前所进行的软件测试活动，它是软件测试的最后一个阶段，也称<strong>交付测试</strong>。</p>
<p>有些内容在第二章说到啦！</p>
<h2 id="第八章-软件本地化测试"><a href="#第八章-软件本地化测试" class="headerlink" title="第八章 软件本地化测试"></a>第八章 软件本地化测试</h2><p><strong>软件本地化</strong>是指将某软件产品的用户界面、文档资料、在线帮助等从其源语言向目标语言进行转化，使之适应目标语言及文化的处理过程。（）</p>
<p><strong>软件国际化</strong>是指为保证所开发软件产品能适应国际市场需要，通过特定的系统架构设计、代码编程技术支持软件能在不同语言、不同文化的国家及地区使用，使其在进行本地化时不需要修改软件的程序代码。</p>
<p><strong>软件本地化测试</strong>是根据软件本地化开发完成后，设计测试用例，并利用这些测试用例去运行被测试软件，以发现软件程序缺陷的过程。（含<strong>翻译验证</strong>）</p>
<h2 id="第九章测试-自动化及其框架"><a href="#第九章测试-自动化及其框架" class="headerlink" title="第九章测试 自动化及其框架"></a>第九章测试 自动化及其框架</h2><p><strong>自动化测试</strong>是指采用测试工具实现程序驱动替代人驱动所开展的软件测试活动。测试自动化除包括自动化测试之外，还包括测试辅助工作的自动化。</p>
<p>自动化测试不能完成下面哪项质量指标测试?</p>
<p>A.正确性	B.可靠性	C.性能效率 	D.易用性</p>
<p>自动化测试可以用于测试正确性、可靠性和性能效率等质量指标，但对于易用性的测试则相对有限。易用性通常涉及到用户界面的可操作性、用户体验和用户友好性等方面，这些特征难以完全通过自动化测试来覆盖和评估。易用性测试通常需要人工参与，通过用户实际操作和反馈来评估系统的易用性。</p>
<p><strong>JUnit</strong>是一种白盒测试工具，因为它主要用于单元测试，可以直接访问和测试代码的内部结构和逻辑。它通常用于Java开发环境中，用于测试Java应用程序的各个单元和模块。<strong>UFT</strong>（Unified Functional Testing）是一种黑盒测试工具，用于功能测试和自动化测试。它主要用于测试应用程序的外部行为和用户界面，而不需要了解应用程序的内部实现。<br><strong>Load Runner</strong>是一种性能测试工具，用于测试应用程序在负载和压力条件下的性能表现。它通常用于模拟多个用户同时访问应用程序，以评估其性能和可靠性。<br><strong>Selenium</strong>是一种自动化测试工具，主要用于Web应用程序的功能测试和回归测试。它可以模拟用户操作和交互，并对应用程序的用户界面进行测试。由于它主要关注应用程序的外部行为，因此它也被归类为黑盒测试工具。</p>
<h2 id="第十章-测试需求分析与测试计划"><a href="#第十章-测试需求分析与测试计划" class="headerlink" title="第十章 测试需求分析与测试计划"></a>第十章 测试需求分析与测试计划</h2><p>功能测试范围</p>
<blockquote>
<p>页面链接:页面是否存在、页面是否正确跳转<br>控件功能:按钮功能是否正确、列表内容是否正确、光标位置移动是否顺序正确<br>输入文本框:数据格式、数据类型、数据长度是否检查<br>Web图形测试:图片文字提示是否正确、图片链接是否正确、图片在不同分辨率下显示是否正确<br>表单测试:请求是否响应、脚本是否正确执行</p>
</blockquote>
<p>非功能测试范围。</p>
<blockquote>
<p>性能测试——响应时间、吞吐量等<br>安全测试——用户验证、授权访问、数据安全等<br>容错测试——部件损坏后系统仍正常运行能力<br>兼容性测试——硬件兼容性、操作系统兼容性、浏览器兼容性·可伸缩性测试——增加容量的能力<br>可用性测试——正常运行时间&#x2F;总运行时间</p>
</blockquote>
<h2 id="第十一章-软件质量保证"><a href="#第十一章-软件质量保证" class="headerlink" title="第十一章 软件质量保证"></a>第十一章 软件质量保证</h2><p><strong>软件度量</strong>是根据一定规则对软件项目、软件过程、软件产品进行数据定义、数据收集及量化处理，其目的是为了清晰地理解、预测、评估、控制和改善软件质量。</p>
<p><img src="https://s2.loli.net/2023/06/02/sZKupSB7FxJXjwI.png" alt="NK38BB~K_`__MF0`3SH_VC9.png"></p>
<p><a href="https://smms.app/image/VIRA859hNGcTP1H" target="_blank"><img src="https://s2.loli.net/2023/06/02/VIRA859hNGcTP1H.png" alt="_RF_ABD_90`8@LYLXYP4R@A.png"></a></p>
<p><a href="https://smms.app/image/1rZ85Mps9dmJN3z" target="_blank"><img src="https://s2.loli.net/2023/06/02/1rZ85Mps9dmJN3z.png" alt="_Q1DGL`_SUS_P_RW~_TX6_N.png"></a></p>
<p>再举个上机考试考的题吧，细思也不是不能出大题：</p>
<p>针对如下Java程序进行单元测试，找出该程序的缺陷。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 对传入参数telCode（电话号码）进行处理，从中提取该电话号码的座机号码，并将其输出返回。 </span></span><br><span class="line"><span class="comment"> * 例如，输入电话号码为“86,28,83202112”， 返回值应为“83202112” */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">getPhoneNo</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">getPhoneNumber</span><span class="params">(String telCode)</span> &#123; </span><br><span class="line">	  <span class="keyword">if</span> (telCode == <span class="literal">null</span> ) &#123; </span><br><span class="line">	    <span class="keyword">return</span> <span class="string">&quot;输入了空字符串&quot;</span>;&#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">		String localPhone[] = telCode.split(<span class="string">&quot;,&quot;</span>); </span><br><span class="line">		<span class="keyword">return</span> localPhone[<span class="number">2</span>]; &#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>设计单元测试用例表，在该表中填写测试用例的输入数据和预期结果数据。</p>
<table>
<thead>
<tr>
<th>用例</th>
<th>telCode值</th>
<th>预期结果</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>86,28,83202112</td>
<td>83202112</td>
</tr>
<tr>
<td>2</td>
<td>Null</td>
<td>输入了空字符串</td>
</tr>
<tr>
<td>3</td>
<td>空格</td>
<td>输入电话号码格式错误</td>
</tr>
<tr>
<td>4</td>
<td>86,83202112</td>
<td>输入电话号码格式错误</td>
</tr>
<tr>
<td>5</td>
<td>86,28,83202112%</td>
<td>输入电话号码格式错误</td>
</tr>
</tbody></table>
<p>缺陷如下：</p>
<ol>
<li><p>电话号码为空时无法提示输入了空字符串。</p>
</li>
<li><p>电话号码输入为空格，或者其位数不符合要求，该程序报错而无法继续运行，应该提示输入电话号码格式错误。</p>
</li>
<li><p>当电话号码含有非法字符，该程序没有提示输入了非法字符，而是继续输出了非法字符，应该提示输入电话号码格式错误才对。</p>
</li>
</ol>
<p>测试代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.After;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">getPhoneNoTest_83202112</span> &#123;</span><br><span class="line">    getPhoneNo getPhoneNo=<span class="keyword">new</span> <span class="title class_">getPhoneNo</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">tearDown</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getPhoneNumber</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getPhoneNo1</span><span class="params">()</span> &#123;</span><br><span class="line">        String expectedResult=<span class="string">&quot;83202112&quot;</span>;</span><br><span class="line">        assertEquals(expectedResult,getPhoneNo.getPhoneNumber(<span class="string">&quot;86,28,83202112&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getPhoneNo2</span><span class="params">()</span> &#123;</span><br><span class="line">        String expectedResult=<span class="string">&quot;输入了空字符串&quot;</span>;</span><br><span class="line">        assertEquals(expectedResult,getPhoneNo.getPhoneNumber(<span class="literal">null</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getPhoneNo3</span><span class="params">()</span> &#123;</span><br><span class="line">        String expectedResult=<span class="string">&quot;输入电话号码格式错误&quot;</span>;</span><br><span class="line">        assertEquals(expectedResult,getPhoneNo.getPhoneNumber(<span class="string">&quot; &quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getPhoneNo4</span><span class="params">()</span> &#123;</span><br><span class="line">        String expectedResult=<span class="string">&quot;输入电话号码格式错误&quot;</span>;</span><br><span class="line">        assertEquals(expectedResult,getPhoneNo.getPhoneNumber(<span class="string">&quot;86,83202112&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getPhoneNo5</span><span class="params">()</span> &#123;</span><br><span class="line">        String expectedResult=<span class="string">&quot;输入电话号码格式错误&quot;</span>;</span><br><span class="line">        assertEquals(expectedResult,getPhoneNo.getPhoneNumber(<span class="string">&quot;86,28,83202112%&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改后的源程序：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">getPhoneNo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPhoneNumber</span><span class="params">(String telCode)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (telCode == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;输入了空字符串&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            String localPhone[] = telCode.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (localPhone.length &lt; <span class="number">3</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;输入电话号码格式错误&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">String</span> <span class="variable">phoneNumber</span> <span class="operator">=</span> localPhone[<span class="number">2</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; phoneNumber.length(); i++) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> phoneNumber.charAt(i);</span><br><span class="line">                <span class="keyword">if</span> (c &lt; <span class="string">&#x27;0&#x27;</span> ||c &gt; <span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&quot;输入电话号码格式错误&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> phoneNumber;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>大二下期末复习</category>
      </categories>
      <tags>
        <tag>软件测试</tag>
      </tags>
  </entry>
  <entry>
    <title>电大软件测试～第三次作业</title>
    <url>/2023/06/01/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/test3/</url>
    <content><![CDATA[<h2 id="第三次作业"><a href="#第三次作业" class="headerlink" title="第三次作业"></a>第三次作业</h2><h3 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h3><p>采用JUnit软件测试框架进行测试程序编程，实现对下面java程序进行单元测试，找出其中缺陷。然后修改缺陷，直到通过单元测试，给出测试程序脚本和运行结果界面。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">getMax</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">get_max</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> z)</span> &#123;</span><br><span class="line">	<span class="type">int</span> max;</span><br><span class="line">	<span class="keyword">if</span> (x &gt;= y) </span><br><span class="line">		max = x;</span><br><span class="line">	<span class="keyword">else</span> </span><br><span class="line">		max = y;</span><br><span class="line">	<span class="keyword">if</span> (z &gt;= x)</span><br><span class="line">		max = z;</span><br><span class="line">	<span class="keyword">return</span> max;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>答：</p>
<p>测试程序脚本：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.After;</span><br><span class="line"><span class="keyword">import</span> org.junit.Assert;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> junit.framework.TestCase;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">getMaxTest</span> <span class="keyword">extends</span> <span class="title class_">TestCase</span> &#123;</span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">       getMax Max=<span class="keyword">new</span> <span class="title class_">getMax</span>();</span><br><span class="line">       <span class="type">int</span> max= Max.get_max(<span class="number">7</span>,<span class="number">9</span>,<span class="number">8</span>);</span><br><span class="line">       Assert.assertEquals(<span class="number">9</span>,max);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Before</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@After</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">tearDown</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>以下是运行结果，发现代码有缺陷：z如果比x大，但比y小，程序会输出z，而实际情况是y最大。</p>
<p><a href="https://imgse.com/i/p9zYRRP"><img src="https://s1.ax1x.com/2023/06/01/p9zYRRP.png" alt="p9zYRRP.png" border="0" /></a></p>
<p>修改缺陷，以下是修改后的源程序：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">getMax</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">get_max</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> z)</span> &#123;</span><br><span class="line">	<span class="type">int</span> max;</span><br><span class="line">	<span class="keyword">if</span> (x &gt;= y) </span><br><span class="line">		max = x;</span><br><span class="line">	<span class="keyword">else</span> </span><br><span class="line">		max = y;</span><br><span class="line">	<span class="keyword">if</span> (z &gt;= max)</span><br><span class="line">		max = z;</span><br><span class="line">	<span class="keyword">return</span> max;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em><strong>其实就是将其中一个x改成max</strong></em></p>
<p>以下是单元测试通过的界面：</p>
<p><a href="https://imgse.com/i/p9zYoZQ"><img src="https://s1.ax1x.com/2023/06/01/p9zYoZQ.png" alt="p9zYoZQ.png" border="0" /></a></p>
<p>缺陷修改成功。</p>
<h3 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h3><p>采用Postman接口测试软件对百度百科<a href="https://baike.baidu.com/">https://baike.baidu.com/</a>搜索引擎进行接口测试。如对词条“软件工程”返回页面内容进行测试验证，给出请求参数设置、Tests脚本、Body响应结果、Test Results结果说明及运行界面。</p>
<hr>
<p>以下是笔者的分析过程：</p>
<p>​	在百度百科页面搜索软件工程，得到的网址如下：</p>
<p><a href="https://baike.baidu.com/item/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/25279?fromModule=lemma_search-box">https://baike.baidu.com/item/软件工程/25279?fromModule=lemma_search-box</a></p>
<p>如果是常规的get请求（大多数项目开发者会这样设置)，在url里面应该有<u>?word&#x3D;软件工程</u>的字符串（不一定是word这个单词，举这个例子表示形如这个url），但是该链接并不如此。</p>
<p>​	于是猜测是post请求，F12打开开发者工具对输入框进行分析，发现它在form表单里，初步断定是post请求，但是这个表单不是向当前网址提交的，表单的action属性是&#x2F;seach&#x2F;word，所以请求的url应该是其对应的绝对路径（还得拐个弯🥺），为<a href="https://baike.baidu.com/search/word">https://baike.baidu.com/search/word</a></p>
<p><a href="https://imgse.com/i/p9zUnPA"><img src="https://s1.ax1x.com/2023/06/01/p9zUnPA.png" alt="p9zUnPA.png" border="0" /></a></p>
<p><a href="https://imgse.com/i/p9zalWR"><img src="https://s1.ax1x.com/2023/06/01/p9zalWR.png" alt="p9zalWR.png" border="0"></a></p>
<p>​	还要注意到表单的method是GET方法，于是我大胆的猜测get方法也可以，经过postman测试，用get方法向<a href="https://baike.baidu.com/search">https://baike.baidu.com/search</a>也可以达到预期目标。</p>
<p><a href="https://imgse.com/i/p9za3S1"><img src="https://s1.ax1x.com/2023/06/01/p9za3S1.png" alt="p9za3S1.png" border="0"></a></p>
<hr>
<p>答：</p>
<p>请求参数设置</p>
<blockquote>
<p>URL：<a href="https://baike.baidu.com/search/word">https://baike.baidu.com/search/word</a></p>
<p>Method: post</p>
<p>Body：</p>
<p>​	键：word	值：软件工程</p>
</blockquote>
<p>或者</p>
<blockquote>
<p>URL：<a href="https://baike.baidu.com/search">https://baike.baidu.com/search</a></p>
<p>Method：GET</p>
<p>参数：</p>
<p>​	键：word	值：软件工程</p>
</blockquote>
<p>Tests脚本</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pm.<span class="title function_">test</span>(<span class="string">&quot;Status code is 200&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    pm.<span class="property">response</span>.<span class="property">to</span>.<span class="property">have</span>.<span class="title function_">status</span>(<span class="number">200</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">pm.<span class="title function_">test</span>(<span class="string">&quot;Response body is not empty&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    pm.<span class="property">response</span>.<span class="property">to</span>.<span class="property">have</span>.<span class="title function_">body</span>();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">pm.<span class="title function_">test</span>(<span class="string">&quot;The response contains the word &#x27;软件工程&#x27;&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    pm.<span class="title function_">expect</span>(pm.<span class="property">response</span>.<span class="title function_">text</span>()).<span class="property">to</span>.<span class="title function_">include</span>(<span class="string">&quot;软件工程&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>Body响应结果</p>
<p>把你操作界面的body复制下来就可以啦~内容有很多（毕竟是百度的程序员😎）</p>
<p>Test Results结果</p>
<p><a href="https://imgse.com/i/p9za5pn"><img src="https://s1.ax1x.com/2023/06/01/p9za5pn.png" alt="p9za5pn.png" border="0"></a></p>
<blockquote>
<p>可以看到Status code is 200，Response body is not empty，The response contains the word ‘软件工程’，三次测试全部通过。</p>
</blockquote>
<p>运行界面</p>
<p><a href="https://imgse.com/i/p9zaIlq"><img src="https://s1.ax1x.com/2023/06/01/p9zaIlq.png" alt="p9zaIlq.png" border="0"></a></p>
<p>但是为了图方便感觉用get直接向<a href="https://baike.baidu.com/item/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B">https://baike.baidu.com/item/软件工程</a>发请求也得行（这样子就少了很多分析啦~)</p>
]]></content>
      <categories>
        <category>大二下期末复习</category>
      </categories>
      <tags>
        <tag>软件测试</tag>
      </tags>
  </entry>
</search>
